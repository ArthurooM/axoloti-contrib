<objdefs appVersion="1.0.12">
   <obj.normal id="euclidSeq" uuid="88a9eef9-c8ba-465a-9e68-7ccc6cc1a951">
      <sDescription>Euclidean Rhythm Sequencer (rhythm).
https://en.wikipedia.org/wiki/Euclidean_rhythm</sDescription>
      <author>Jérôme Burlando</author>
      <license>BSD</license>
      <helpPatch>euclidSeq.axh</helpPatch>
      <inlets>
         <bool32.rising name="trig"/>
      </inlets>
      <outlets>
         <bool32.pulse name="trig" description="bang"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="rotation" description="first hit index in measure (euclidean sequencer)">
            <MinValue i="0"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="length" description="length of the measure (euclidean sequencer)">
            <MinValue i="0"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="hits" description="number of hits in the measure (euclidean sequencer)">
            <MinValue i="0"/>
            <MaxValue i="128"/>
         </int32>
      </params>
      <attribs/>
      <code.declaration><![CDATA[uint8_t ntrig;
uint8_t counter;
int32_t o;]]></code.declaration>
      <code.init><![CDATA[ntrig = 0;
counter = 0;
o = 0;]]></code.init>
      <code.krate><![CDATA[o = 0;
if(inlet_trig > 0 && !ntrig){
	ntrig = 1;
	o = ((((counter++ + param_rotation) * param_hits) % param_length) < param_hits);
}
if(!(inlet_trig > 0)) ntrig = 0;
outlet_trig = o;]]></code.krate>
   </obj.normal>
</objdefs>