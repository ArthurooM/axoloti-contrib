<patch-1.0 appVersion="1.0.11">
   <comment type="patch/comment" x="896" y="0" text="Generate a 24ppq signal from the pos signal.."/>
   <comment type="patch/comment" x="1120" y="0" text=".. and feed such 24ppq to a click"/>
   <comment type="patch/comment" x="14" y="14" text="sample table"/>
   <obj type="sptnk/looper/pos2phase" uuid="e03d1cc5-fc14-4a32-8375-dbf570f3fcc7" name="pos2phase_1" x="658" y="14">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="visual ref" x="812" y="14">
      <params/>
      <attribs/>
   </obj>
   <obj type="sptnk/looper/pos2ppq" uuid="7817ed66-154d-4429-9dd2-6d3721f54391" name="pos2ppq_1" x="910" y="14">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_1" x="1064" y="14">
      <params/>
      <attribs/>
   </obj>
   <obj type="sptnk/sequencer/24ppq2click" uuid="4d377328-a4b6-4296-8994-9fb0bd32cf8a" name="24ppq2click_1" x="1120" y="14">
      <params/>
      <attribs/>
   </obj>
   <obj type="table/alloc 32b sdram" uuid="1a4546b7b52747ea765093ac97444601c44721e8" name="alloc_1" x="14" y="28">
      <params/>
      <attribs>
         <combo attributeName="size" selection="524288"/>
         <text attributeName="init">
            <sText><![CDATA[]]></sText>
         </text>
      </attribs>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_2" x="1064" y="70">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_1" x="434" y="84">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/&lt;&lt;" uuid="b03d8d8009c0480be0ccb29ed65933a82fa4a80f" name="&lt;&lt;_1" x="518" y="112">
      <params/>
      <attribs>
         <spinner attributeName="shift" value="2"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="13163875-3748-4837-ad77-5230549d11f3" name="pos_1" x="742" y="182">
      <params>
         <int32 name="num" value="1"/>
         <int32 name="den" value="1"/>
         <int32 name="mulstart" value="0"/>
         <frac32.s.map name="speed" value="0.0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="alloc_1"/>
      </attribs>
      <object id="patch/object" uuid="13163875-3748-4837-ad77-5230549d11f3">
         <sDescription>Phase generator for the loop recorder object. Essential to avoid horrible noises.
Mod inlets for num, den and mulstart params (override). Speed multiplier</sDescription>
         <author>Sputnki</author>
         <license>BSD</license>
         <helpPatch>4x8bit looper.axh</helpPatch>
         <inlets>
            <bool32 name="play" description="set the object to play mode. When released, the phasor resets to 0"/>
            <bool32 name="hold" description="set the object to pause mode"/>
            <int32 name="length" description="last value of the table to read"/>
            <int32 name="num" description="mod inlet for the num parameter (overrides the parameter) "/>
            <int32 name="den" description="mod inlet for the den parameter (overrides the parameter) "/>
            <int32 name="mulstart" description="mod inlet for the mulstart parameter (overrides the parameter) "/>
            <frac32 name="speed" description="mod inlet for the speed parameter"/>
         </inlets>
         <outlets>
            <frac32buffer.positive name="pos" description="pos signal generator for the rec object"/>
            <int32 name="startpos" description=""/>
            <int32 name="endpos"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="num" description="numerator for a further subdivision of the loop interval">
               <MinValue i="1"/>
               <MaxValue i="32"/>
            </int32>
            <int32 name="den" description="denominator for a further subdivision of the loop interval">
               <MinValue i="1"/>
               <MaxValue i="32"/>
            </int32>
            <int32 name="mulstart" description="offsets the start position by a factor mulstart*num/den">
               <MinValue i="0"/>
               <MaxValue i="31"/>
            </int32>
            <frac32.s.map name="speed"/>
         </params>
         <attribs>
            <objref name="table" description="32b table in which the 4 tracks are stored"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t counter = 0;
uint32_t maxlength = attr_table.LENGTH;

bool play;
bool hold;

int32_t num ;
int32_t den;
int32_t mulstart;]]></code.declaration>
         <code.krate><![CDATA[uint32_t	maxlength = inlet_length?inlet_length:attr_table.LENGTHMASK;
uint32_t	startpos = 0;


num =inlet_num>0?inlet_num:param_num;
den =inlet_den>0?inlet_den:param_den;
mulstart =inlet_mulstart>=0?inlet_mulstart:param_mulstart;


uint32_t base = (num*maxlength)/den;

startpos= (mulstart*maxlength)/den;
maxlength = startpos + base;

if (startpos>attr_table.LENGTHMASK)
startpos =0;
if (maxlength>attr_table.LENGTHMASK)
maxlength = attr_table.LENGTHMASK;

play = inlet_play;
hold = inlet_hold;

outlet_startpos = startpos;
outlet_endpos = maxlength;

startpos = startpos<<8;
maxlength = maxlength<<8;


int32_t increment = __USAT(___SMMLA(param_speed+ inlet_speed,1<<13,1<<8),30);]]></code.krate>
         <code.srate><![CDATA[if (play && !hold)
counter+=increment;
else if (!play)
counter = startpos;

if (counter>maxlength)
	counter = startpos;


outlet_pos = counter>>8;]]></code.srate>
      </object>
   </patchobj>
   <obj type="sptnk/looper/play" uuid="71c4f3b4-7351-45b9-bb6f-80fdbba3f9a6" name="play_2" x="882" y="182">
      <params/>
      <attribs>
         <objref attributeName="table" obj="alloc_1"/>
      </attribs>
   </obj>
   <obj type="audio/inconfig" uuid="9a80ef3c19f2a8f81da3a3b7c1c44d18126b97d9" name="inconfig_1" x="14" y="196">
      <params/>
      <attribs>
         <combo attributeName="gain" selection="15dB"/>
         <combo attributeName="boost" selection="0dB"/>
         <combo attributeName="mode" selection="Stereo"/>
      </attribs>
   </obj>
   <obj type="audio/in stereo" uuid="99848ad6d90a8e615e83b2e619cfc806f28e7281" name="in_1" x="112" y="196">
      <params/>
      <attribs/>
   </obj>
   <obj type="sptnk/looper/length bpm" uuid="c2556fbe-60a8-41f1-b280-90d645d4fb5c" name="endpos_1" x="476" y="196">
      <params>
         <int32 name="quarters" value="16"/>
         <int32 name="bpm" value="160"/>
         <int32.small name="fine" value="0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="alloc_1"/>
      </attribs>
   </obj>
   <obj type="phi/mix/mix st2 sq" uuid="58ca1c18-45fa-449e-b0d2-01f7d5032d97" name="mix_" x="1120" y="196">
      <params>
         <frac32.u.map name="gain1" value="64.0"/>
         <frac32.u.map name="gain2" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="1414" y="196">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="f9005295-975d-48cc-a6a2-ab33a942504d" name="record_1" x="322" y="210">
      <params/>
      <attribs>
         <objref attributeName="table" obj="alloc_1"/>
      </attribs>
      <object id="patch/object" uuid="f9005295-975d-48cc-a6a2-ab33a942504d">
         <sDescription>Record 4 tracks of audio into a 32bit table.
Each track occupies 8bit in size.
This implementation allows stretched playback.</sDescription>
         <author>Sputnki</author>
         <license>BSD</license>
         <helpPatch>4x8bit looper.axh</helpPatch>
         <inlets>
            <frac32buffer name="w1" description="audio in for track 1"/>
            <frac32buffer name="w2" description="audio in for track 2"/>
            <frac32buffer name="w3" description="audio in for track 3"/>
            <frac32buffer name="w4" description="audio in for track 4"/>
            <frac32buffer.positive name="pos" description="use looper/pos to drive this input"/>
            <int32.positive name="protect" description="use looper/protect to protect specific bits (or you could use this to distort the signal)"/>
            <int32.positive name="mode" description="0 = idle, 1 = erase, 2 = overwrite, 3 = overdub, 4 = halving overdub, 5.. idle"/>
            <int32 name="startpos"/>
            <int32 name="endpos"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <objref name="table" description="the 32b table in which storing tracks"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t pos = 0;
uint32_t pos_old = 0;
   
uint32_t bitmask1 = 0b11111111000000000000000000000000;
uint32_t bitmask2 = 0b00000000111111110000000000000000;
uint32_t bitmask3 = 0b00000000000000001111111100000000;
uint32_t bitmask4 = 0b00000000000000000000000011111111;

int state = 0; // 0 = do nothing; 1 = erase;  2 = overwrite; 3 = overdub; 4 = halving overdub;]]></code.declaration>
         <code.krate><![CDATA[uint32_t protected_bits = inlet_protect;

state = inlet_mode; //0= idle; 1=overwrite; 2=overdub; 3= halving overdub]]></code.krate>
         <code.srate><![CDATA[pos = __USAT(inlet_pos,28);

if (pos>attr_table.LENGTH)
pos = attr_table.LENGTH;


uint32_t table_pos = attr_table.array[pos];

uint32_t input = ((__SSAT(inlet_w1>>1,27)<<5)&bitmask1) | ((__SSAT(inlet_w2>>1,27)>>3)&bitmask2) | ((__SSAT(inlet_w3>>1,27)>>11)&bitmask3) | ((__SSAT(inlet_w4>>1,27)>>19)&bitmask4);
uint32_t temp_out;


	switch (state)
	{
		case 1: temp_out = 0; break; //erasing table
		case 2: temp_out = input; break; //overwriting table 
		case 3: temp_out = __SADD8(table_pos,input); break; //overdubbing table
		case 4: temp_out = __SHADD8(table_pos,input); break; // halving overdub
		default: temp_out = table_pos;  break; //idle, do nothing
	}


while (pos != pos_old)
{
	attr_table.array[pos_old++] = (temp_out & (~protected_bits)) |(table_pos & protected_bits);
	if (pos_old>inlet_endpos)
	pos_old = inlet_startpos;
}




pos_old = pos;]]></code.srate>
      </object>
   </patchobj>
   <obj type="mux/mux 2" uuid="16f90f81694766b0bc8187bfcba5a021e5701d81" name="mux_1" x="238" y="294">
      <params/>
      <attribs/>
   </obj>
   <obj type="sptnk/looper/protect" uuid="f1d3e7a3-544d-4d1a-aa3e-fd7f0941c196" name="protect_1" x="112" y="308">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1036" y="322" text="click volume &gt;"/>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_1" x="56" y="350">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="476" y="350" text="^^^^ you can try experimenting with these objects ^^^^"/>
   <obj type="phi/mix/mix st2 sq" uuid="58ca1c18-45fa-449e-b0d2-01f7d5032d97" name="mix" x="1120" y="350">
      <params>
         <frac32.u.map name="gain1" value="64.0"/>
         <frac32.u.map name="gain2" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="350" y="448" text="master control"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="play/stop" x="588" y="448">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="pause" x="658" y="448">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1022" y="448" text="looper volume&gt;"/>
   <comment type="patch/comment" x="350" y="476" text="Switch between recording track 1/2 (off)"/>
   <comment type="patch/comment" x="1008" y="476" text="dry input volume &gt;"/>
   <comment type="patch/comment" x="350" y="490" text="and recording track 3/4 (on)"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="track 1/2 - 3/4" x="350" y="504">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="588" y="504" text="When the toggle button is not pressed"/>
   <comment type="patch/comment" x="1120" y="504" text="mix between 1 (looper)"/>
   <comment type="patch/comment" x="588" y="518" text="tracks 3 and 4 are protected"/>
   <comment type="patch/comment" x="1120" y="518" text="and 2 (clean input)"/>
   <comment type="patch/comment" x="588" y="532" text="tracks 1 and 2 are protected"/>
   <comment type="patch/comment" x="1120" y="532" text="Thank you Philoop for mix object!"/>
   <comment type="patch/comment" x="588" y="546" text="When the toggle button is pressed"/>
   <obj type="ctrl/i radio 8 v" uuid="577436e6982cb8ac1f816144195641eeb6846f79" name="record mode" x="350" y="560">
      <params>
         <int32.vradio name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="434" y="602" text="&lt; idle"/>
   <comment type="patch/comment" x="434" y="616" text="&lt; erase"/>
   <comment type="patch/comment" x="434" y="630" text="&lt; overwrite"/>
   <comment type="patch/comment" x="434" y="644" text="&lt; overdub"/>
   <comment type="patch/comment" x="434" y="658" text="&lt; halving overdub"/>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_1" x="84" y="1302">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="0" y="1372" text="data table"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_1" x="182" y="1372">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="table/alloc 32b sdram" uuid="1a4546b7b52747ea765093ac97444601c44721e8" name="alloc_2" x="0" y="1386">
      <params/>
      <attribs>
         <combo attributeName="size" selection="32768"/>
         <text attributeName="init">
            <sText><![CDATA[]]></sText>
         </text>
      </attribs>
   </obj>
   <comment type="patch/comment" x="0" y="1470" text="This is the &quot;work in progress part&quot; "/>
   <patchobj type="patch/object" uuid="c04d1e85-6eda-46ef-9bf9-ab1f8e1828c1" name="transient mapper" x="0" y="1498">
      <params/>
      <attribs>
         <objref attributeName="table" obj="alloc_1"/>
         <objref attributeName="tdata" obj="alloc_2"/>
      </attribs>
      <object id="patch/object" uuid="c04d1e85-6eda-46ef-9bf9-ab1f8e1828c1">
         <inlets>
            <frac32buffer.positive name="pos" description="use looper/pos to drive this input"/>
            <bool32.rising name="add" description="this input should be connected to a transient detector"/>
            <bool32.rising name="clear"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <objref name="table" description="name of the 32b audio table"/>
            <objref name="tdata" description="name of the 32b transient data table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[bool atrig = 0;
bool ctrig = 0;
uint32_t bitshift =0;

uint32_t bitmask3 = 0b00000000000000001111111100000000;
uint32_t bitmask4 = 0b00000000000000000000000011111111;


/* 
[00000000][00000000][00000000][00000000]
[number of points ][flags    ][bitshift]


static const uint32_t LENGTHPOW = attr_size;
static const uint32_t LENGTH = 1<<attr_size;
static const uint32_t LENGTHMASK = (1<<attr_size)-1;
static const uint32_t BITS = 32;
static const uint32_t GAIN = 0;
int32_t array[LENGTH];

*/]]></code.declaration>
         <code.init><![CDATA[if (attr_table.LENGTHPOW>16)
bitshift = attr_table.LENGTHPOW - 16;

attr_tdata.array[0] = bitshift;


/* 
[00000000][00000000][00000000][00000000]
[number of points ][flags    ][bitshift] HEADER
[real position    ][quantized position ] DATA


static const uint32_t LENGTHPOW = attr_size;
static const uint32_t LENGTH = 1<<attr_size;
static const uint32_t LENGTHMASK = (1<<attr_size)-1;
static const uint32_t BITS = 32;
static const uint32_t GAIN = 0;
int32_t array[LENGTH];

*/

//[flags]  = [12345678]
//[8] = 1 = unquantized
//[8] = 0 = quantized]]></code.init>
         <code.krate><![CDATA[uint32_t numpoints = attr_tdata.array[0]>>16; //retrieve the current number of chop points in the table 
uint32_t flags = (attr_tdata.array[0] & bitmask3)>>8; //retrieve the flag byte of the table
bitshift = attr_tdata.array[0] & bitmask4; //retrieve the bitshift amount of the table

if(inlet_add && !atrig && (numpoints<attr_tdata.LENGTHMASK)) //if inlet add is rising and there's still space in the data table
{ 
	numpoints++;
	atrig = 1; 
	attr_tdata.array[numpoints]=(inlet_pos[0]>>bitshift)<<16; //add one point, with the current position, shifted to fit the table
	flags = flags | 1; //the data table might not be quantized anymore 
}
else if (!inlet_add)
{
	atrig = 0;
}

if(inlet_clear && !ctrig)
{
	ctrig = 1;
	numpoints = 0;
	flags = 0;
}
else if (!inlet_clear)
{
	ctrig = 0;
}

attr_tdata.array[0] = (numpoints<<16) | (flags<<8) | bitshift; //this should in theory take care of it]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="a4967cdc-50f1-4752-93d1-47078d0f8805" name="table sort" x="126" y="1498">
      <params/>
      <attribs>
         <objref attributeName="tdata" obj="alloc_2"/>
      </attribs>
      <object id="patch/object" uuid="a4967cdc-50f1-4752-93d1-47078d0f8805">
         <author>Sputnki</author>
         <license>BSD</license>
         <inlets/>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <objref name="tdata"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t sortpos = 0;
bool sorted = 0;
uint32_t numpoints_old = 0;

uint32_t bitmask12 = 0b11111111111111110000000000000000;
uint32_t bitmask3 = 0b00000000000000001111111100000000;
uint32_t bitmask4 = 0b00000000000000000000000011111111;

bool itrig =0;]]></code.declaration>
         <code.krate><![CDATA[uint32_t numpoints = attr_tdata.array[0] >>16;

uint32_t flag = (attr_tdata.array[0]>>8)&bitmask4;
uint32_t bitshift = attr_tdata.array[0] & bitmask4;

if (sortpos >= numpoints -1) 
{
	sortpos = 0;
	if (sorted && numpoints == numpoints_old)
	flag = flag & -2;
}
if (sortpos<(numpoints-1) && numpoints >1)
{
	uint32_t pos2 = numpoints - sortpos;
	uint32_t pos1 = pos2-1;
	if ( (uint32_t)attr_tdata.array[pos1] > (uint32_t)attr_tdata.array[pos2])
	{
		uint32_t temp = attr_tdata.array[pos1];
		attr_tdata.array[pos1] = attr_tdata.array[pos2];
		attr_tdata.array[pos2] = temp;
		sorted = 1;
		sortpos++;
	}
}

numpoints_old = numpoints;
attr_tdata.array[0] = ((numpoints <<16) & bitmask12) | ((flag<<8)&bitmask3) | bitshift;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="535a42f5-d0f2-48fb-8cb6-42e04f51bdf1" name="play quantized" x="280" y="1498">
      <params>
         <frac32.u.map name="preserve" value="57.0"/>
         <frac32.u.map name="window" value="64.0"/>
         <int32.hradio name="track" value="0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="alloc_1"/>
         <objref attributeName="tdata" obj="alloc_2"/>
      </attribs>
      <object id="patch/object" uuid="535a42f5-d0f2-48fb-8cb6-42e04f51bdf1">
         <inlets>
            <frac32buffer.positive name="pos"/>
            <int32.positive name="startpos"/>
            <int32.positive name="endpos"/>
         </inlets>
         <outlets>
            <frac32buffer name="o"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="preserve"/>
            <frac32.u.map name="window"/>
            <int32.hradio name="track">
               <MaxValue i="4"/>
            </int32.hradio>
         </params>
         <attribs>
            <objref name="table"/>
            <objref name="tdata"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t chop_counter = 0;

uint32_t numpoints = 0; //number of chop points inside the data table
uint32_t bitshift = 0; //the position extracted from the data table must be bitshifted by this amount

uint32_t wrap_index;
uint32_t qwrapB=0;
uint32_t twrapB=0;

uint32_t qposA = 0;
uint32_t qposB = 0;
uint32_t tposA = 0;
uint32_t tposB = 0;

uint32_t qdiff = 0;
uint32_t tdiff = 0;

//data relative to envelopes
uint32_t envstage[2] = {0,0}; //0 = stop; 1 = ramp up; 2 = ramp down; 3 = declick in; 4 = hold.
						// 1 -> 2 -> 0 (ad window) ...  3 -> 4 -> 2 -> 0 (ahd window)
int32_t envamt[2] = {0,0};
float envpos[2] = {0,0};

//bitmasks, useful to unpack tables
uint32_t bitmask4  = 0b00000000000000000000000011111111;
uint32_t bitmask34 = 0b00000000000000001111111111111111;]]></code.declaration>
         <code.krate><![CDATA[numpoints = attr_tdata.array[0] >> 16;
bitshift = attr_tdata.array[0] & bitmask4;


qposA = attr_tdata.array[1+chop_counter] & bitmask34 <<bitshift; 
tposA = (attr_tdata.array[1+chop_counter] >>16) & bitmask34 <<bitshift;
qwrapB = attr_tdata.array[1+wrap_index] & bitmask34 <<bitshift;
twrapB = (attr_tdata.array[1+wrap_index] >>16) & bitmask34 <<bitshift;

if (qposA>=inlet_startpos && (qposA<=qwrapB || qwrapB<inlet_startpos) )
{
	qwrapB = qposA;
	twrapB = tposA;
	wrap_index = chop_counter;
}

if (chop_counter < numpoints)
{
	qposB = attr_tdata.array[2+chop_counter] & bitmask34 <<bitshift;
	tposB = (attr_tdata.array[2+chop_counter] >>16) & bitmask34 <<bitshift;
}
else
{
	qposB = qwrapB;
	tposB = twrapB;
}
if (qposB>inlet_endpos )
{
	qposB =  qwrapB;
	tposB =  twrapB;
}


if (qposB != qwrapB) //non-patologic case
{
	if (inlet_pos[0] > qposB)
		chop_counter++;
	else if (inlet_pos[0] < qposA)
		chop_counter--;
	if (!chop_counter< numpoints)
	chop_counter = wrap_index;
	qdiff = qposB-qposA;
	tdiff = tposB-tposA;	
}
else //patologic case
{
	if (inlet_pos[0] > qposB && inlet_pos[0] < qposA)
		chop_counter=wrap_index;
	qdiff = qposB-inlet_startpos + inlet_endpos -qposA;
	tdiff = tposB-inlet_startpos + inlet_endpos -tposA;
}


uint32_t holdramp = (1<<26)/___SMMUL(param_preserve,qdiff); 	
uint32_t envramp = (1<<30) / (2 + (param_window>>19));
float posramp = ((float) tdiff )/ ((float) qdiff );


/*
 * qposB-qposA = Dpos (tra quantizzati) = numero campioni MA NE SIAMO SICURI? abbastanza
 * frequenza krate = 3000 (campioni / sec) 
 * holdlength (campioni) = ___SMMUL(param_preserve,Dpos)<<5 [numero campioni] 
 * holdramp = (1<<31)/holdlength;
 * holdramp = (1<<26)/(___SMMUL(param_preserve,Dpos))
 * holdramp = (1<<26)/(___SMMUL(param_preserve,qposB-qposA))
 *  
 */

for(int i=0;i<2;i++)
{
	switch(envstage[i])
	{
		case 0: break; //idle stage
		case 1: //attack stage
		{
			envamt[i]+=envramp;
			if (envamt[i]>(1<<30))
			{
				envamt[i] = (1<<30);
				envstage[i]=2; // go to decay stage
				
				if (envamt[i]< 1<<30 && envstage[1-i] == 0 && (qposB-inlet_pos[0]>64)) /// fare partire il grano successivo, ricordarsi di mettere questa roba pure al termine di hold.
				{
					envstage[1-i] = 1;
				}
			}
			break;
		}
		case 2: //decay stage
		{
			if (envamt[i]<=envramp)
			{
				envamt[i] = 0;
				envstage[i]=0; // go to idle stage
			}
			else envamt[i]-=envramp;
			break;
		}
		case 3: //declick in (128 smp) -> 42 ms window 
		{
			envamt[i]+=(1<<23);
			if (envamt[i]>=(1<<30))
			{
				envamt[i] = 0;
				envstage[i] = 4; //go to hold stage
			}
			break;
		}
		case 4: //hold stage //VA COMPLETATO
		{
			envamt[i]+=holdramp;
			if (envamt[i]>(1<<30))
			{
				envamt[i] = (1<<30);
				envstage[i]=2; // go to decay stage
				envstage[1-i] = 1;
			}
			break;
		}
		default: break; //default
	}
}]]></code.krate>
         <code.srate><![CDATA[//ricorda che se sei in fase di hold devi fare SMMUL tra 1<<30 e il campione, e non tra envamt e il campione


if (inlet_pos == qposA)
{
	envstage[0] = 3;
	envpos[0] = (float) inlet_pos;
}

int32_t accum = 0;
for (int i=0;i<2;i++) 
{
	int8_t input = (attr_table.array[(uint32_t) envpos[i]/**/]>>(param_track<<3) & bitmask4); //ho dovuto mettere quel commento per evitare un errore di parse
	accum =___SMMLA(((int32_t)(input))<<20,envstage[i]==4?(1<<30):envamt[i],accum) ;
	
envpos[i]+=posramp;
if (envpos[i]>inlet_endpos)
envpos[i] = inlet_startpos;
}

outlet_o = accum;]]></code.srate>
      </object>
   </patchobj>
   <obj type="disp/scope 128 b" uuid="2b69f51a714fc276503ef10c349d6d253d1ae5e2" name="scope_1" x="462" y="1498">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_3" x="882" y="1498">
      <params>
         <int32 name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="table/read" uuid="65eb8d0f6a3344638de94c9882999b9af15510d0" name="read_1" x="952" y="1498">
      <params/>
      <attribs>
         <objref attributeName="table" obj="alloc_2"/>
      </attribs>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_1" x="1092" y="1498">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="in_1" outlet="left"/>
         <dest obj="mix" inlet="l2"/>
         <dest obj="record_1" inlet="w1"/>
         <dest obj="record_1" inlet="w3"/>
      </net>
      <net>
         <source obj="pos_1" outlet="pos"/>
         <dest obj="pos2ppq_1" inlet="pos"/>
         <dest obj="pos2phase_1" inlet="pos"/>
         <dest obj="transient mapper" inlet="pos"/>
         <dest obj="play quantized" inlet="pos"/>
         <dest obj="play_2" inlet="pos"/>
         <dest obj="record_1" inlet="pos"/>
      </net>
      <net>
         <source obj="play/stop" outlet="o"/>
         <dest obj="mux_1" inlet="s"/>
         <dest obj="pos_1" inlet="play"/>
      </net>
      <net>
         <source obj="pause" outlet="o"/>
         <dest obj="pos_1" inlet="hold"/>
      </net>
      <net>
         <source obj="mix" outlet="L"/>
         <dest obj="mix_" inlet="l1"/>
      </net>
      <net>
         <source obj="mix" outlet="R"/>
         <dest obj="mix_" inlet="r1"/>
      </net>
      <net>
         <source obj="protect_1" outlet="protect"/>
         <dest obj="record_1" inlet="protect"/>
      </net>
      <net>
         <source obj="record mode" outlet="out"/>
         <dest obj="mux_1" inlet="i2"/>
      </net>
      <net>
         <source obj="mux_1" outlet="o"/>
         <dest obj="record_1" inlet="mode"/>
      </net>
      <net>
         <source obj="endpos_1" outlet="length"/>
         <dest obj="pos2ppq_1" inlet="length"/>
         <dest obj="pos_1" inlet="length"/>
      </net>
      <net>
         <source obj="pos2phase_1" outlet="percent"/>
         <dest obj="visual ref" inlet="in"/>
      </net>
      <net>
         <source obj="pos2ppq_1" outlet="pos24ppq"/>
         <dest obj="i_2" inlet="in"/>
         <dest obj="24ppq2click_1" inlet="24ppq"/>
      </net>
      <net>
         <source obj="pos2ppq_1" outlet="pos4ppq"/>
         <dest obj="i_1" inlet="in"/>
      </net>
      <net>
         <source obj="mix_" outlet="L"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="mix_" outlet="R"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="24ppq2click_1" outlet="o"/>
         <dest obj="mix_" inlet="l2"/>
         <dest obj="mix_" inlet="r2"/>
      </net>
      <net>
         <source obj="in_1" outlet="right"/>
         <dest obj="mix" inlet="r2"/>
         <dest obj="record_1" inlet="w2"/>
         <dest obj="record_1" inlet="w4"/>
      </net>
      <net>
         <source obj="track 1/2 - 3/4" outlet="o"/>
         <dest obj="inv_1" inlet="i"/>
         <dest obj="protect_1" inlet="i1"/>
         <dest obj="protect_1" inlet="i2"/>
      </net>
      <net>
         <source obj="inv_1" outlet="o"/>
         <dest obj="protect_1" inlet="i3"/>
         <dest obj="protect_1" inlet="i4"/>
      </net>
      <net>
         <source obj="pos_1" outlet="endpos"/>
         <dest obj="pos2phase_1" inlet="endpos"/>
         <dest obj="play quantized" inlet="endpos"/>
         <dest obj="record_1" inlet="endpos"/>
      </net>
      <net>
         <source obj="pos_1" outlet="startpos"/>
         <dest obj="pos2ppq_1" inlet="startpos"/>
         <dest obj="pos2phase_1" inlet="startpos"/>
         <dest obj="play quantized" inlet="startpos"/>
         <dest obj="record_1" inlet="startpos"/>
      </net>
      <net>
         <source obj="i_3" outlet="out"/>
         <dest obj="read_1" inlet="a"/>
      </net>
      <net>
         <source obj="read_1" outlet="o"/>
         <dest obj="hex_1" inlet="in"/>
      </net>
      <net>
         <source obj="endpos_1" outlet="quarters"/>
         <dest obj="pos2ppq_1" inlet="quarters"/>
      </net>
      <net>
         <source obj="play quantized" outlet="o"/>
         <dest obj="scope_1" inlet="in"/>
      </net>
      <net>
         <source obj="button_1" outlet="o"/>
         <dest obj="transient mapper" inlet="add"/>
      </net>
      <net>
         <source obj="toggle_1" outlet="o"/>
         <dest obj="transient mapper" inlet="clear"/>
      </net>
      <net>
         <source obj="play_2" outlet="o1"/>
         <dest obj="mix" inlet="l1"/>
      </net>
      <net>
         <source obj="play_2" outlet="o2"/>
         <dest obj="mix" inlet="r1"/>
      </net>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="&lt;&lt;_1" inlet="a"/>
      </net>
      <net>
         <source obj="&lt;&lt;_1" outlet="result"/>
         <dest obj="pos_1" inlet="speed"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
      <MidiChannel>1</MidiChannel>
      <NPresets>8</NPresets>
      <NPresetEntries>32</NPresetEntries>
      <NModulationSources>8</NModulationSources>
      <NModulationTargetsPerSource>8</NModulationTargetsPerSource>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1382</width>
      <height>784</height>
   </windowPos>
</patch-1.0>