<objdefs appVersion="1.0.11">
   <obj.normal id="mandelbrot" uuid="c9d88f0e-9136-49d4-a067-15e27ec65890">
      <sDescription>Mandelbrot based iterator: generates a sequence of numbers iterating the fundamental mandelbrot equation z&apos; = z^n +c , where z is the &quot;old&quot; number, n is an integer (&gt;1) and c is a complex constant.</sDescription>
      <author>Sputnki</author>
      <license>BSD</license>
      <inlets>
         <frac32 name="Im" description="Imaginary part of the complex number c"/>
         <frac32 name="Re" description="Real part of the complex number c"/>
         <bool32 name="trig" description="Compute a new iteration"/>
         <bool32 name="reset" description="Reset"/>
      </inlets>
      <outlets>
         <frac32 name="Im" description="Imaginary part of the complex number z&apos;"/>
         <frac32 name="Re" description="Real part of the complex number z&apos;"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="Im" description="Imaginary part of the complex number c"/>
         <frac32.s.map name="Re" description="Real part of the complex number c"/>
         <int32 name="power" description="Power of the complex number z">
            <MinValue i="2"/>
            <MaxValue i="16"/>
         </int32>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t Im_old = 0;
int32_t Re_old = 0;
int32_t a = 0;
int32_t b = 0;
int32_t c = 0;
int32_t d = 0;

bool rtrig = 0;
bool ttrig = 0;]]></code.declaration>
      <code.krate><![CDATA[// main iterator block

//(ai + b)^n
//(ai + b)*(ci + d) = (ad+bc)i + (bd-ac)
//a_new = ad + bc
//b_new = bd - ac

if (inlet_trig && !ttrig)
{
	a = Im_old; //these two will be iterated
	b = Re_old; //these two will be iterated
	c = Im_old; //these two are constant through the cycles
	d = Re_old; //these two are constant through the cycles
	
	for(int i=1;i<param_power;i++)
	{
		a = ___SMMLA(b<<2,c<<3,___SMMUL(a<<2,d<<3));
		b = ___SMMLS(a<<2,c<<3,___SMMUL(b<<2,d<<3));
	}
	
	Im_old = a + param_Im +inlet_Im;
	Re_old = b + param_Re +inlet_Re;

	ttrig = 1;
}
else if (!inlet_trig)
ttrig = 0;

if (inlet_reset && !rtrig)
{
	rtrig = 1;
	Im_old = 0;
	Re_old = 0;
}
else if (!inlet_reset)
rtrig = 0;


outlet_Im = Im_old;
outlet_Re = Re_old;]]></code.krate>
   </obj.normal>
</objdefs>