<objdefs appVersion="1.0.10">
   <obj.normal id="maestro" uuid="64d9d750-1d2e-4a5a-87b7-b11419b85ef9">
      <sDescription>First instance of a melody generator, based on euclidean rhytms.
This object requires a Ph.D in aerospace engineering for basic operation.

Input: 24ppq (connect to some 24ppq counter signal)
Output: pitch and velocity.
3 levels of velocity are outputted, corresponding to the 3 accent levels (strong, medium and weak).

Parameter list::::
Cue: adds a constant number to the 24ppq signal before processing it, useful to fine-sync the object.
length: sets the length in quarters of the melody
strongDiv, mediumDiv, weakDiv: set the denominators for the velocity subdivisions
mediumBypass, weakBypass: bypass medium and weak beats (in case you don&apos;t need velocities)
oddBypass: skip all the odd beats during the euclidean subdivision.
strongStart: use in conjunction with oddBypass to force the first beat to be strong velocity
activenotes: set the number of notes for the melody (this will also change the rhythm, since it operates on the euclidean subdivision.
gateMode: sets the length of notes
rootNote: pretty straightworward
scale: select a scale between the modes of the diatonic scale
alteration: change some notes in the scale (see parameter)
seed: parameter for melody algorithms
algorithm: select an algorithm between a list
octaves: number of octaves excursion for the melody
harmony: in some algorithms you can decide to use particular harmonizations (triads, quartal, fifths, sixths and stuff like that). Algos that use this parameter are indicated by the usesHarmony led

This last part will be improved over time. You can write your own algorithm, just put it in local data in the calculatepitch function.</sDescription>
      <author>Sputnki</author>
      <license>BSD</license>
      <inlets>
         <int32 name="24ppq"/>
      </inlets>
      <outlets>
         <frac32 name="pitch"/>
         <frac32 name="velocity"/>
      </outlets>
      <displays>
         <bool32 name="usesHarmony" noLabel="true"/>
      </displays>
      <params>
         <int32 name="cue">
            <MinValue i="-24"/>
            <MaxValue i="24"/>
         </int32>
         <int32 name="length" description="length of the melody (in quarters)">
            <MinValue i="0"/>
            <MaxValue i="64"/>
         </int32>
         <int32 name="strongDiv" description="ppq subdivision for strong beats (tip 24)">
            <MinValue i="0"/>
            <MaxValue i="1536"/>
         </int32>
         <int32 name="mediumDiv" description="ppq subdivision for medium beats (tip 12 or 8)">
            <MinValue i="0"/>
            <MaxValue i="1536"/>
         </int32>
         <int32 name="weakDiv" description="ppq subdivision for weak beats (tip 6 or 4)">
            <MinValue i="0"/>
            <MaxValue i="1536"/>
         </int32>
         <bool32.tgl name="mediumBypass" description="bypass all medium beats"/>
         <bool32.tgl name="weakBypass" description="bypass all weak beats"/>
         <bool32.tgl name="oddBypass" description="bypass all odd beats (of all strengths)"/>
         <bool32.tgl name="strongStart" description="active = start the melody with the first strong beat, use in conjunction with oddBypass"/>
         <int32 name="activeNotes" description="number of active notes in the melody, uses some sort of euclidean division">
            <MinValue i="0"/>
            <MaxValue i="1536"/>
         </int32>
         <int32.hradio name="gateMode" description="1-&gt; no gate; 2 -&gt; gate length=50%; 3-&gt; gate length = 100%; 4 -&gt; gate length proportional to velocity">
            <MaxValue i="4"/>
         </int32.hradio>
         <frac32.s.map.pitch name="rootNote"/>
         <int32.hradio name="scale" description="1 = lydian; 2 = dorian; 3 = phyrigian; 4 = lydian; 5 = myxolidian; 6 = aeolian; 7 = locrian">
            <MaxValue i="7"/>
         </int32.hradio>
         <int32.hradio name="alteration" description="1 = natural diatonic; 2 = harmonic minor; 3 = melodic minor; 4 = harmonic major">
            <MaxValue i="4"/>
         </int32.hradio>
         <int32 name="seed" description="some number to put inside the algorithm to perform the magic">
            <MinValue i="-65536"/>
            <MaxValue i="65535"/>
         </int32>
         <int32 name="algorithm">
            <MinValue i="0"/>
            <MaxValue i="15"/>
         </int32>
         <int32 name="octaves">
            <MinValue i="1"/>
            <MaxValue i="8"/>
         </int32>
         <int32 name="harmony" description="3rd note harmony, 4th note harmony and so on..">
            <MinValue i="3"/>
            <MaxValue i="7"/>
         </int32>
      </params>
      <attribs/>
      <code.declaration><![CDATA[bool recalc = 1;

int ppq = 0; // the wrapped value for ppq position
 
int32_t pitch[1536]; //1536 = 24 ppq * 64 quarters (maximum number)
int32_t velocity[1536];

int i = 0;
int ii = 0;
int temp = 0;



int length = 0;
int strongDiv = 0;
int mediumDiv = 0;
int weakDiv = 0;
bool strongBypass = 0;
bool mediumBypass = 0;
bool weakBypass = 0;
bool oddBypass = 0;
bool strongStart = 0;
int activeNotes = 0;
int gateMode;
int scale;
int alteration;
int harmony;
int seed;
int algorithm;
int octaves;


int par_EuclidLength = 0;

bool strongMap[1536];
bool mediumMap[1536];
bool weakMap[1536];
bool active = 0;

bool EuclidSequence[1536]; //the array containing the euclidean rhythm


int scaleArray[4][7] = //used inside calculate_pitch
{

{0,2,4,5,7,9,11}, //natural
{0,2,4,5,8,9,11}, //harm minor
{0,2,4,6,8,9,11}, //mel minor
{0,2,4,5,7,8,11}  //harm major

};


int32_t calculate_pitch(int i, int scale, int alteration, int harmony, int seed, int algorithm, int octaves)
{
	uint32_t n;
	int32_t pitch = 0;
	switch(algorithm)
	{
		case 0:n=i*seed; break;
		case 1:n=i*i*seed; break;
		case 2:n=i*i*i*seed; break;
		case 3:n=(i==((i>>2)<<2))?i*seed:0; break;
		case 4:n=(i==((i>>2)<<2))?i*seed:2*i*seed; break;
		case 5:n=(i==((i>>2)<<2))?2*i*seed:i*seed; break;
		case 6:n=seed<<(i-31*(i/31)); break;	
		case 7:n=i*(harmony-1) - seed*i*((harmony-1)/seed);	break;
		case 8:n=(i==((i>>2)<<2))?i*seed*(harmony-1):0; break;
		case 9:n=(i==((i>>2)<<2))?0:i*seed*(harmony-1); break;
		case 10:n=(i==((i>>2)<<2))?i*seed*harmony:i*(harmony-1); break;
		case 11:n=(i==((i>>2)<<2))?i*harmony:i*seed*(harmony-1); break;
		default:n = 0;
	}
	int sn7 = (scale+n)/7;
	pitch = 12*(sn7 - octaves*(n/(7*octaves)))  + scaleArray[alteration][(scale + n) - 7*sn7] - scaleArray[alteration][scale];
	return pitch;
}

]]></code.declaration>
      <code.init><![CDATA[for(i=0;i<1536;i++)
{
	pitch[i]=0;
	velocity[i]=0;
}
]]></code.init>
      <code.krate><![CDATA[int lengthppq= 24*param_length;
ppq = param_cue + inlet_24ppq - lengthppq*((param_cue+inlet_24ppq)/(lengthppq));
outlet_velocity = velocity[ppq];
outlet_pitch = param_rootNote + (pitch[ppq]<<21);

if (algorithm)
disp_usesHarmony = 1;
else
disp_usesHarmony = 0;


switch(algorithm)
	{
		case 0:disp_usesHarmony = 0; break;
		case 1:disp_usesHarmony = 0; break;
		case 2:disp_usesHarmony = 0; break;
		case 3:disp_usesHarmony = 0; break;
		case 4:disp_usesHarmony = 0; break;
		case 5:disp_usesHarmony = 0; break;
		case 6:disp_usesHarmony = 0; break;	
		case 7:disp_usesHarmony = 1; break;
		case 8:disp_usesHarmony = 1; break;
		case 9:disp_usesHarmony = 1; break;
		case 10:disp_usesHarmony = 1; break;
		case 11:disp_usesHarmony = 1; break;		
		default:disp_usesHarmony = 0; break;
	}


//check whether some parameters are changed
{
	if (length != param_length || strongDiv!= param_strongDiv || mediumDiv != param_mediumDiv || weakDiv != param_weakDiv || mediumBypass != param_mediumBypass || weakBypass != param_weakBypass|| oddBypass != param_oddBypass || strongStart != param_strongStart || activeNotes != param_activeNotes ||gateMode != param_gateMode || scale !=param_scale || alteration != param_alteration || harmony != param_harmony || seed != param_seed || algorithm != param_algorithm || octaves !=param_octaves)  
	{ 
		recalc = 1;
		length = param_length;
		strongDiv = param_strongDiv;
		mediumDiv = param_mediumDiv;
		weakDiv = param_weakDiv;
		mediumBypass = param_mediumBypass;
		weakBypass = param_weakBypass;
		oddBypass = param_oddBypass;
		strongStart = param_strongStart;
		activeNotes = param_activeNotes;
		gateMode = param_gateMode;
		scale = param_scale;
		alteration = param_alteration;
		harmony = param_harmony;
		seed = param_seed;
		algorithm = param_algorithm;
		octaves = param_octaves;
	}
}


if (recalc) //this should go in a separate thread to lighten the dsp load
{
	//calculate new pattern (DO ALL THE STUFF)

	for(i=0;i<1536;i++) //resetting steps
	{
		strongMap[i]=0;
		mediumMap[i]=0;
		weakMap[i]=0;
		EuclidSequence[i]=0; 
		velocity[i]=0;
		pitch[i]=0;
	}

	
/// EUCLIDEAN SEQUENCER PREPARATION (depends on oddBypass, strongStart, strongDiv, mediumDiv, weakDiv, mediumBypass, weakBypass)
{
	

	bool active = !strongStart;	
	par_EuclidLength = 0;
	
	
	ii=1;
	for(i=0;i<lengthppq;i++)
	{
		
		
		{
			if (!(i-strongDiv*(i/strongDiv))) //if we're on a strong beat   
			{
				if (!(oddBypass && ((ii)&1) )) //if odd beats are not bypassed or if we are not on an odd beat
				{
				active = 1;
				strongMap[i]=1;
				par_EuclidLength+=1;
				}
				ii++;
				
			}
			else if  (!(i-mediumDiv*(i/mediumDiv)) && active && !mediumBypass) //if we're on a medium beat
			{
				if (!(oddBypass && ((ii)&1) )) //if odd beats are not bypassed or if we are not on an odd beat
				{
				mediumMap[i]=1;
				par_EuclidLength+=1;	
				}
				ii++;
			}
			else if  (!(i-weakDiv*(i/weakDiv)) && active && !weakBypass) //if we're on a weak beat
			{
				if (!(oddBypass && ((ii)&1) )) //if odd beats are not bypassed or if we are not on an odd beat
				{
				weakMap[i]=1;
				par_EuclidLength+=1;
				}
				ii++;	
			}
		}
	}
	
	
}
// END OF DETERMINATION OF int par_EuclidLength
// other arrays are generated: bool strongMap[1536] ; bool mediumMap[1536] ; bool weakMap[1536] ; 


// START OF THE EUCLIDEAN SEQUENCER (depends on activeNotes)
{

	int EuclidNotes = activeNotes;
	
	if (EuclidNotes>par_EuclidLength)
		EuclidNotes=par_EuclidLength;
	
	int EuclidRests = par_EuclidLength - EuclidNotes;
	
	if (EuclidRests)// if the number of rests is different than 0
	{ 
		if (EuclidNotes<EuclidRests)
		{
			int mul=EuclidRests/EuclidNotes;
			int rem=EuclidRests-(mul*EuclidNotes);
			ii=0;
		
			for (i=0;i<EuclidNotes;i+=1)
			{
				if (i<rem)
				{
					temp=ii;
					EuclidSequence[ii]=1;
					for(ii=temp+1;ii<temp+mul+2;ii+=1)
					EuclidSequence[ii]=0;			
				}
				else
				{
					temp=ii;
					EuclidSequence[ii]=1;
					for(ii=temp+1;ii<temp+mul+1;ii+=1)
					EuclidSequence[ii]=0;	
				}
			}
		}
		else if (EuclidNotes>EuclidRests)
		{
			int mul=EuclidNotes/EuclidRests;
			int rem=EuclidNotes-(mul*EuclidRests);
			ii=0;
			
			for (i=0;i<EuclidRests;i+=1)
			{
				if (i<rem)
				{
					
					EuclidSequence[ii]=1;
					ii+=1;
					EuclidSequence[ii]=0;
					temp=ii;
					for(ii=temp+1;ii<temp+mul+1;ii+=1)
					EuclidSequence[ii]=1;				
				}
				else
				{
					EuclidSequence[ii]=1;
					ii+=1;
					EuclidSequence[ii]=0;
					temp=ii;
					for(ii=temp+1;ii<temp+mul;ii+=1)
					EuclidSequence[ii]=1;	
				}
			}
			
			
		}
		else
		{
			EuclidSequence[0]=1;
			for (i=1;i<par_EuclidLength;i+=1)
			EuclidSequence[i]=!EuclidSequence[i-1];
		}
	}
	else // if the number of rests is equal to 0 (all notes active)
	{
		for(ii=0;ii<par_EuclidLength;ii+=1)
		EuclidSequence[ii]=1; 
	}
	
	

}
// END OF THE EUCLIDEAN SEQUENCER -> bool EuclidSequence[1536] 
// the EuclidSequence array contains the on/off values for single notes after subdivision



	
// now i have to put velocities (and pitches, so you have to complete this) in the right spot (in the int32_t velocity[1536] array)
{
	i=-1;
	temp = 0;
	for(ii=0;ii<lengthppq;ii+=1)
	{
			if (ii)
			{
			pitch[ii]=pitch[ii-1];
			if (gateMode)
			velocity[ii]=velocity[ii-1];	
			}
			
			
			
		
			if (strongMap[ii])
			{
				i++;
				if (EuclidSequence[i])
				{
				if (gateMode==1)
				for(int n=((temp+ii)>>1);n<ii;n++)
				velocity[n]=0;
				else if (gateMode==3 && velocity[temp]<0x8000000)
				for(int n= temp+((ii-temp)/3)*(velocity[temp]>0x2AAAAAA?2:1);n<ii;n++)		
				velocity[n]=0;
				velocity[ii]=0x8000000;
				temp=ii;
				pitch[ii]=calculate_pitch(i, scale, alteration, harmony, seed, algorithm, octaves);
				}
				
			}
			else if (mediumMap[ii])
			{
				i++;
				if (EuclidSequence[i])
				{
				if (gateMode==1)
				for(int n=((temp+ii)>>1);n<ii;n++)
				velocity[n]=0;
				else if (gateMode==3 && velocity[temp]<0x8000000)
				for(int n= temp+((ii-temp)/3)*(velocity[temp]>0x2AAAAAA?2:1);n<ii;n++)		
				velocity[n]=0;
				velocity[ii]=0x5555554;
				temp=ii;
				pitch[ii]=calculate_pitch(i, scale, alteration, harmony, seed, algorithm, octaves);
				}
				
			}
			else if (weakMap[ii])
			{
				i++;
				if (EuclidSequence[i])
				{
				if (gateMode==1)
				for(int n=((temp+ii)>>1);n<ii;n++)
				velocity[n]=0;
				else if (gateMode==3 && velocity[temp]<0x8000000)
				for(int n= temp+((ii-temp)/3)*(velocity[temp]>0x2AAAAAA?2:1);n<ii;n++)	
				velocity[n]=0;
				velocity[ii]=0x2AAAAAA;
				temp=ii;
				pitch[ii]=calculate_pitch(i, scale, alteration, harmony, seed, algorithm, octaves);
				}
			}

			
	}
				if (gateMode==1)
				for(int n=((temp+ii)>>1);n<lengthppq;n++)
				velocity[n]=0;
				else if (gateMode==3 && velocity[temp]<0x8000000)
				for(int n= temp+((ii-temp)/3)*(velocity[temp]>0x2AAAAAA?2:1);n<lengthppq;n++)	
				velocity[n]=0;

	
		
			

}
//VELOCITIES ARE NOW IN PLACE 
	
	
	

	recalc=0;
}


]]></code.krate>
   </obj.normal>
</objdefs>