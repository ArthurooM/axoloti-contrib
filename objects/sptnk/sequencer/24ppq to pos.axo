<objdefs appVersion="1.0.10">
   <obj.normal id="24ppq to pos" uuid="ff9e96c4-e764-4da7-a863-0b75f6d511b5">
      <sDescription>Converts a 24ppq counter signal into different subdivisions: quarters, sixteenths and triplet eights. 
Length parameter can be used to set the length (in quarters) before resetting the counter (works exactly like divremc.
Cue parameter offsets the incoming signal by a constant number of ppqs.
24ppqrem outputs the cued and divided 24ppq signal.

inlet -&gt; +cue -&gt; divremc -&gt; 24ppqrem -&gt; other outputs</sDescription>
      <author>Sputnki</author>
      <license>BSD</license>
      <helpPatch>sequencer.axh</helpPatch>
      <inlets>
         <int32.positive name="24ppq"/>
      </inlets>
      <outlets>
         <int32 name="4th"/>
         <int32 name="16th"/>
         <int32 name="8thT"/>
         <int32 name="24ppqrem"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="length">
            <MinValue i="0"/>
            <MaxValue i="27700"/>
         </int32>
         <int32 name="cue">
            <MinValue i="-24000"/>
            <MaxValue i="24000"/>
         </int32>
      </params>
      <attribs/>
      <code.krate><![CDATA[uint32_t i = inlet_24ppq + param_cue;
uint32_t pos_tot = i - param_length*24*(i/(24*param_length));
outlet_24ppqrem=pos_tot;

outlet_4th=pos_tot/24;
outlet_16th=pos_tot/6;
outlet_8thT=pos_tot/8;]]></code.krate>
   </obj.normal>
</objdefs>