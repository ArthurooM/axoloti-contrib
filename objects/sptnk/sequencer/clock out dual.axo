<objdefs appVersion="1.0.10">
   <obj.normal id="clock out dual" uuid="a931a2d2-c3f5-4b1b-9e3b-11e6cf48814e">
      <sDescription>Midi clock master, also outputs Midi clock, start, stop, and continue messages on two separate Midi devices.
The secondary device can be switched on or off (when off, the behavior is identical to the midi/out/clock by Johannes.

Based on midi/out/clock by Johannes Taelman.</sDescription>
      <author>Sputnki</author>
      <license>BSD</license>
      <helpPatch>sequencer.axh</helpPatch>
      <inlets>
         <bool32 name="run" description="Run"/>
         <bool32.rising name="rst" description="Reset"/>
      </inlets>
      <outlets>
         <bool32 name="active" description="Song is playing"/>
         <int32 name="pos4ppq" description="Position in 4 counts per quarter"/>
         <int32 name="pos24ppq" description="Position in 24 counts per quarter"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="bpm" noLabel="true"/>
         <bool32.tgl name="secondary"/>
      </params>
      <attribs>
         <combo name="device">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <combo name="secondary">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[bool _active;
int32_t _posfrac;
int32_t _pos24ppq;
bool rstp;
]]></code.declaration>
      <code.init><![CDATA[_active = 0;
_posfrac = 0;
_pos24ppq = 0;
rstp = 0;]]></code.init>
      <code.krate><![CDATA[if (inlet_rst & !rstp){
   rstp = 1;
   _posfrac = 0;
   _pos24ppq = 0;
} else if (!inlet_rst){
   rstp = 0;
}
if (inlet_run && !_active) {
  _active = 1;
  if (_pos24ppq)     
  {
  	MidiSend1((midi_device_t) attr_device, MIDI_CONTINUE);
  	if (param_secondary) MidiSend1((midi_device_t) attr_secondary, MIDI_CONTINUE);
  }
  else     
  {
  	MidiSend1((midi_device_t) attr_device, MIDI_START); 
	if (param_secondary) MidiSend1((midi_device_t) attr_secondary, MIDI_START);
  }
} else if (!inlet_run && _active){
  _active = 0;
  MidiSend1((midi_device_t) attr_device, MIDI_STOP);
  if (param_secondary) MidiSend1((midi_device_t) attr_secondary, MIDI_STOP);
}if (_active) {
  _posfrac += param_bpm;
  if (_posfrac & 1<<31) {
    _posfrac &= (1<<31)-1;
    _pos24ppq++;
    MidiSend1((midi_device_t) attr_device,MIDI_TIMING_CLOCK); 
    if (param_secondary) MidiSend1((midi_device_t) attr_secondary,MIDI_TIMING_CLOCK); 
  }
}
outlet_pos4ppq = _pos24ppq/6;
outlet_pos24ppq = _pos24ppq;
]]></code.krate>
   </obj.normal>
</objdefs>