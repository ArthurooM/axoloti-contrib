<objdefs appVersion="1.0.10">
   <obj.normal id="sat ur hate" uuid="c2ee1e65-7cf6-400a-8f52-4500cf1a6eb5">
      <sDescription>A saturator distortion based on dist/soft and filter/lp1 - hp1 by Johannes Taelman.
A soft saturator is cascaded with a filter (lowpass or highpass). 
You can feed the output of the filter back into the input with the feed knob and change the filter cutoff with the filter knob.
postfilter allows you to pick up the sound after filtering; highpass changes the filter from lowpass to highpass.</sDescription>
      <author>Sptnk</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="in"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="feed"/>
         <frac32.s.map.pitch name="filter"/>
         <bool32.tgl name="postfilter"/>
         <bool32.tgl name="highpass"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t f;

int32_t feed;
int32_t satout = 0;
int32_t filterout = 0;

bool postfilter = 0;
bool highpass = 0;
]]></code.declaration>
      <code.krate><![CDATA[MTOF(param_filter,f);

postfilter = param_postfilter;
highpass = param_highpass;]]></code.krate>
      <code.srate><![CDATA[int32_t ts = __SSAT(___SMMLA(filterout,param_feed<<4,inlet_in)<<1,27);
int32_t tsq31 = ts<<3;
int32_t tsq31p3 = ___SMMUL(tsq31,___SMMUL(tsq31,tsq31));
satout = ts + (ts>>1) - (tsq31p3);




filterout = ___SMMLA(__SSAT((satout-filterout)<<1,30),f,filterout);
if (highpass) filterout = satout - filterout;



if (postfilter)
outlet_out = filterout;
else
outlet_out = satout;
]]></code.srate>
   </obj.normal>
</objdefs>