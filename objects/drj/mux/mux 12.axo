<objdefs appVersion="1.0.9">
   <obj.normal id="mux 12" uuid="da39b04ea2afde5167d9c2039376e8cc6202e28a">
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Are Leistad</author>
      <license>BSD</license>
      <helpPatch>mux.axh</helpPatch>
      <inlets>
         <frac32 name="i0" description="input 0"/>
         <frac32 name="i1" description="input 1"/>
         <frac32 name="i2" description="input 2"/>
         <frac32 name="i3" description="input 3"/>
         <frac32 name="i4" description="input 4"/>
         <frac32 name="i5" description="input 5"/>
         <frac32 name="i6" description="input 6"/>
         <frac32 name="i7" description="input 7"/>
         <frac32 name="i8" description="input 8"/>
         <frac32 name="i9" description="input 9"/>
         <frac32 name="i10" description="input 10"/>
         <frac32 name="i11" description="input 11"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <frac32 name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      case 4: outlet_o= inlet_i4;break;
      case 5: outlet_o= inlet_i5;break;
      case 6: outlet_o= inlet_i6;break;
      case 7: outlet_o= inlet_i7;break;
      case 8: outlet_o= inlet_i8;break;
      case 9: outlet_o= inlet_i9;break;
      case 10: outlet_o= inlet_i10;break;
      case 11: outlet_o= inlet_i11;break;
      default: outlet_o= inlet_i11;break;
}
]]></code.krate>
   </obj.normal>
   <obj.normal id="mux 12" uuid="f548c23eb95fa96cfa963baaadac300608530430">
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Are Leistad</author>
      <license>BSD</license>
      <inlets>
         <int32 name="i0" description="input 0"/>
         <int32 name="i1" description="input 1"/>
         <int32 name="i2" description="input 2"/>
         <int32 name="i3" description="input 3"/>
         <int32 name="i4" description="input 4"/>
         <int32 name="i5" description="input 5"/>
         <int32 name="i6" description="input 6"/>
         <int32 name="i7" description="input 7"/>
         <int32 name="i8" description="input 8"/>
         <int32 name="i9" description="input 9"/>
         <int32 name="i10" description="input 10"/>
         <int32 name="i11" description="input 11"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <int32 name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      case 4: outlet_o= inlet_i4;break;
      case 5: outlet_o= inlet_i5;break;
      case 6: outlet_o= inlet_i6;break;
      case 7: outlet_o= inlet_i7;break;
      case 8: outlet_o= inlet_i8;break;
      case 9: outlet_o= inlet_i9;break;
      case 10: outlet_o= inlet_i10;break;
      case 11: outlet_o= inlet_i11;break;
      default: outlet_o= inlet_i11;break;
}
]]></code.krate>
   </obj.normal>
   <obj.normal id="mux 12" uuid="a1f8ed9ae009fbf5500cd5ae2334f6eaeaa683ea">
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Are Leistad</author>
      <license>BSD</license>
      <helpPatch>mux.axh</helpPatch>
      <inlets>
         <frac32buffer name="i0" description="input 0"/>
         <frac32buffer name="i1" description="input 1"/>
         <frac32buffer name="i2" description="input 2"/>
         <frac32buffer name="i3" description="input 3"/>
         <frac32buffer name="i4" description="input 4"/>
         <frac32buffer name="i5" description="input 5"/>
         <frac32buffer name="i6" description="input 6"/>
         <frac32buffer name="i7" description="input 7"/>
         <frac32buffer name="i8" description="input 8"/>
         <frac32buffer name="i9" description="input 9"/>
         <frac32buffer name="i10" description="input 10"/>
         <frac32buffer name="i11" description="input 11"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <frac32buffer name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.srate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      case 4: outlet_o= inlet_i4;break;
      case 5: outlet_o= inlet_i5;break;
      case 6: outlet_o= inlet_i6;break;
      case 7: outlet_o= inlet_i7;break;
      case 8: outlet_o= inlet_i8;break;
      case 9: outlet_o= inlet_i9;break;
      // 24.11.2017 19:51
      // BUG in 1.0.12
      //  For the audio rate sample buffer inlet type, the patcher mangles the building of the patch source
      //  when an input has a name that ends in a number with more than 2 digits.
      //
      //  Use "mux 12b" as a temprary work around until the patcher has been fixed.
      //
      // In the code below
      //      case 10: outlet_o= inlet_i10;break;
      //      case 11: outlet_o= inlet_i11;break;
      //      default: outlet_o= inlet_i11;break;
      // becomes:
      //      case 10: outlet_o[buffer_index]= inlet_i1[buffer_index]0;break;
      //      case 11: outlet_o[buffer_index]= inlet_i1[buffer_index]1;break;
      //      default: outlet_o[buffer_index]= inlet_i1[buffer_index]1;break;
      // when the patch source is built:

      case 10: outlet_o= inlet_i10;break;
      case 11: outlet_o= inlet_i11;break;
      default: outlet_o= inlet_i11;break;
}
]]></code.srate>
   </obj.normal>
   <obj.normal id="mux 12" uuid="395571d158db4604822e73f12d315ce2c2bc895f1">
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Are Leistad</author>
      <license>BSD</license>
      <inlets>
         <bool32 name="i0" description="input 0"/>
         <bool32 name="i1" description="input 1"/>
         <bool32 name="i2" description="input 2"/>
         <bool32 name="i3" description="input 3"/>
         <bool32 name="i4" description="input 4"/>
         <bool32 name="i5" description="input 5"/>
         <bool32 name="i6" description="input 6"/>
         <bool32 name="i7" description="input 7"/>
         <bool32 name="i8" description="input 8"/>
         <bool32 name="i9" description="input 9"/>
         <bool32 name="i10" description="input 10"/>
         <bool32 name="i11" description="input 11"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <bool32 name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      case 4: outlet_o= inlet_i4;break;
      case 5: outlet_o= inlet_i5;break;
      case 6: outlet_o= inlet_i6;break;
      case 7: outlet_o= inlet_i7;break;
      case 8: outlet_o= inlet_i8;break;
      case 9: outlet_o= inlet_i9;break;
      case 10: outlet_o= inlet_i10;break;
      case 11: outlet_o= inlet_i11;break;
      default: outlet_o= inlet_i11;break;
}
]]></code.krate>
   </obj.normal>
   <obj.normal id="mux 12" uuid="538081223bada604a557f992dab7a2eda93df0fe">
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Are Leistad</author>
      <license>BSD</license>
      <helpPatch>mux.axh</helpPatch>
      <inlets>
         <charptr32 name="i0" description="input 0"/>
         <charptr32 name="i1" description="input 1"/>
         <charptr32 name="i2" description="input 2"/>
         <charptr32 name="i3" description="input 3"/>
         <charptr32 name="i4" description="input 4"/>
         <charptr32 name="i5" description="input 5"/>
         <charptr32 name="i6" description="input 6"/>
         <charptr32 name="i7" description="input 7"/>
         <charptr32 name="i8" description="input 8"/>
         <charptr32 name="i9" description="input 9"/>
         <charptr32 name="i10" description="input 10"/>
         <charptr32 name="i11" description="input 11"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <charptr32 name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= (char *)inlet_i0;break;
      case 1: outlet_o= (char *)inlet_i1;break;
      case 2: outlet_o= (char *)inlet_i2;break;
      case 3: outlet_o= (char *)inlet_i3;break;
      case 4: outlet_o= (char *)inlet_i4;break;
      case 5: outlet_o= (char *)inlet_i5;break;
      case 6: outlet_o= (char *)inlet_i6;break;
      case 7: outlet_o= (char *)inlet_i7;break;
      case 8: outlet_o= (char *)inlet_i8;break;
      case 9: outlet_o= (char *)inlet_i9;break;
      case 10: outlet_o= (char *)inlet_i10;break;
      case 11: outlet_o= (char *)inlet_i11;break;
      default: outlet_o= (char *)inlet_i11;break;
}
]]></code.krate>
   </obj.normal>
</objdefs>