<objdefs appVersion="1.0.10">

  <obj.normal id="nrpn_rx_multi" uuid="4aa087a1ef03fb294701ea7ffca595a32f0c1b0979">
    <sDescription>NRPN receiver, multi format outputs</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets/>
    <outlets>
      <frac32.bipolar  name="fb"    description="Fractional bipolar value"/>
      <frac32.positive name="fp"    description="Fractional unipolar value"/>
      <int32.bipolar   name="ib"    description="Integer bipolar 14 bit value"/>
      <int32.positive  name="ip"    description="Integer unipolar 14 bit value"/>
      <int32.positive  name="msb"   description="Integer 7 bit MSB value"/>
      <int32.positive  name="lsb"   description="Integer 7 bit LSB value"/>
      <bool32.pulse    name="chmsb" description="Pulse on MSB value changes"/>
      <bool32.pulse    name="chlsb" description="Pulse on LSB value changes"/>
    </outlets>
    <displays/>
    <params/>
    <attribs>
      <combo name="device">
        <MenuEntries>
          <string>omni</string>
          <string>din</string>
          <string>usb host port 1</string>
          <string>usb host port 2</string>
          <string>usb host port 3</string>
          <string>usb host port 4</string>
          <string>internal port 1</string>
          <string>internal port 2</string>
          <string>usb device port 1</string>
        </MenuEntries>
        <CEntries>
          <string>MIDI_DEVICE_OMNI, 0</string>
          <string>MIDI_DEVICE_DIN, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 2</string>
          <string>MIDI_DEVICE_USB_HOST, 3</string>
          <string>MIDI_DEVICE_USB_HOST, 4</string>
          <string>MIDI_DEVICE_INTERNAL, 1</string>
          <string>MIDI_DEVICE_INTERNAL, 2</string>
          <string>MIDI_DEVICE_USB_DEVICE, 1</string>
        </CEntries>
      </combo>
      <spinner name="channel" MinValue="1"  MaxValue="16"    DefaultValue="1"/>
      <spinner name="nrpn"    MinValue="0"  MaxValue="16383" DefaultValue="0"/>
    </attribs>
    <code.declaration><![CDATA[

      char    midi_nrpn_msb;
      int32_t midi_nrpn;
      char    midi_value_msb;
      char    midi_value_lsb;
      int32_t midi_value_int;
      int32_t midi_value_frac;
      int32_t midi_changed_msb;
      int32_t midi_changed_lsb;

      __attribute__ (( always_inline )) __STATIC_INLINE int midi_device_test( midi_device_t dev, uint8_t port, int selected_dev, uint8_t selected_port )
      {
        if(    (selected_dev == MIDI_DEVICE_OMNI)
            || (selected_dev == dev && selected_port == port)
            )
          return 1;
        return 0;
      }
    ]]></code.declaration>
    <code.init><![CDATA[

      midi_nrpn_msb     = 0;
      midi_nrpn         = 0;
      midi_value_msb    = 0;
      midi_value_lsb    = 0;
      midi_value_int    = 0;
      midi_value_frac   = 0;
      midi_changed_msb  = 0;
      midi_changed_lsb  = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      outlet_fb         = (midi_value_frac << 1)- (1<<27);
      outlet_fp         = midi_value_frac;
      outlet_ib         = midi_value_int - (1<<13);
      outlet_ip         = midi_value_int;
      outlet_msb        = midi_value_msb;
      outlet_lsb        = midi_value_lsb;
      outlet_chmsb      = midi_changed_msb;
      outlet_chlsb      = midi_changed_lsb;
      midi_changed_msb  = 0;
      midi_changed_lsb  = 0;

    ]]></code.krate>
   <code.midihandler><![CDATA[

      #ifndef MIDI_C_DATA_ENTRY_LSB
        #define MIDI_C_DATA_ENTRY_LSB 38
      #endif

      if( midi_device_test( dev, port, attr_device ) == 1 && status == (attr_channel-1) | MIDI_CONTROL_CHANGE )
        {
          if( data1 == MIDI_C_NONRPN_MSB )
            {
              midi_nrpn_msb = data2;
            }
          else if( data1 == MIDI_C_NONRPN_LSB )
            {
              midi_nrpn = (midi_nrpn_msb << 7) | data2;
            }
          else if( data1 == MIDI_C_DATA_ENTRY && midi_nrpn == attr_nrpn )
            {
              midi_value_msb   = data2;
              midi_value_int   = midi_value_msb << 7;
              midi_value_frac  = midi_value_int << 13;
              midi_changed_msb = 1;
            }
          else if( data1 == MIDI_C_DATA_ENTRY_LSB && midi_nrpn == attr_nrpn )
            {
              midi_value_lsb   = data2;
              midi_value_int   = (midi_value_msb << 7) | midi_value_lsb;
              midi_value_frac  = midi_value_int << 13;
              midi_changed_lsb = 1;
            }
        }

    ]]></code.midihandler>
  </obj.normal>

  <obj.normal id="nrpn_rx_multi2" uuid="ca1087a1f303fb296701ea7afca595a12f0c1b16af">
    <sDescription>NRPN receiver, multi parameter, multi format outputs</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets/>
    <outlets>
      <frac32.bipolar  name="fb"    description="Fractional bipolar value"/>
      <frac32.positive name="fp"    description="Fractional unipolar value"/>
      <int32.bipolar   name="ib"    description="Integer bipolar 14 bit value"/>
      <int32.positive  name="ip"    description="Integer unipolar 14 bit value"/>
      <int32.positive  name="msb"   description="Integer 7 bit MSB value"/>
      <int32.positive  name="lsb"   description="Integer 7 bit LSB value"/>
      <int32.positive  name="nrpn"  description="Parameter number"/>
      <bool32.pulse    name="chmsb" description="Pulse on MSB value changes"/>
      <bool32.pulse    name="chlsb" description="Pulse on LSB value changes"/>
    </outlets>
    <displays/>
    <params/>
    <attribs>
      <combo name="device">
        <MenuEntries>
          <string>omni</string>
          <string>din</string>
          <string>usb host port 1</string>
          <string>usb host port 2</string>
          <string>usb host port 3</string>
          <string>usb host port 4</string>
          <string>internal port 1</string>
          <string>internal port 2</string>
          <string>usb device port 1</string>
        </MenuEntries>
        <CEntries>
          <string>MIDI_DEVICE_OMNI, 0</string>
          <string>MIDI_DEVICE_DIN, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 2</string>
          <string>MIDI_DEVICE_USB_HOST, 3</string>
          <string>MIDI_DEVICE_USB_HOST, 4</string>
          <string>MIDI_DEVICE_INTERNAL, 1</string>
          <string>MIDI_DEVICE_INTERNAL, 2</string>
          <string>MIDI_DEVICE_USB_DEVICE, 1</string>
        </CEntries>
      </combo>
      <spinner name="channel" MinValue="1"  MaxValue="16"    DefaultValue="1"/>
    </attribs>
    <code.declaration><![CDATA[

      char    midi_nrpn_msb;
      int32_t midi_nrpn;
      char    midi_value_msb;
      char    midi_value_lsb;
      int32_t midi_value_int;
      int32_t midi_value_frac;
      int32_t midi_changed_msb;
      int32_t midi_changed_lsb;

      __attribute__ (( always_inline )) __STATIC_INLINE int midi_device_test( midi_device_t dev, uint8_t port, int selected_dev, uint8_t selected_port )
      {
        if(    (selected_dev == MIDI_DEVICE_OMNI)
            || (selected_dev == dev && selected_port == port)
            )
          return 1;
        return 0;
      }
    ]]></code.declaration>
    <code.init><![CDATA[

      midi_nrpn_msb     = 0;
      midi_nrpn         = 0;
      midi_value_msb    = 0;
      midi_value_lsb    = 0;
      midi_value_int    = 0;
      midi_value_frac   = 0;
      midi_changed_msb  = 0;
      midi_changed_lsb  = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      outlet_fb         = (midi_value_frac << 1)- (1<<27);
      outlet_fp         = midi_value_frac;
      outlet_ib         = midi_value_int - (1<<13);
      outlet_ip         = midi_value_int;
      outlet_msb        = midi_value_msb;
      outlet_lsb        = midi_value_lsb;
      outlet_nrpn       = midi_nrpn;
      outlet_chmsb      = midi_changed_msb;
      outlet_chlsb      = midi_changed_lsb;
      midi_changed_msb  = 0;
      midi_changed_lsb  = 0;

    ]]></code.krate>
   <code.midihandler><![CDATA[

      #ifndef MIDI_C_DATA_ENTRY_LSB
        #define MIDI_C_DATA_ENTRY_LSB 38
      #endif

      if( midi_device_test( dev, port, attr_device ) == 1 && status == (attr_channel-1) | MIDI_CONTROL_CHANGE )
        {
          if( data1 == MIDI_C_NONRPN_MSB )
            {
              midi_nrpn_msb = data2;
            }
          else if( data1 == MIDI_C_NONRPN_LSB )
            {
              midi_nrpn = (midi_nrpn_msb << 7) | data2;
            }
          else if( data1 == MIDI_C_DATA_ENTRY )
            {
              midi_value_msb   = data2;
              midi_value_int   = midi_value_msb << 7;
              midi_value_frac  = midi_value_int << 13;
              midi_changed_msb = 1;
            }
          else if( data1 == MIDI_C_DATA_ENTRY_LSB )
            {
              midi_value_lsb   = data2;
              midi_value_int   = (midi_value_msb << 7) | midi_value_lsb;
              midi_value_frac  = midi_value_int << 13;
              midi_changed_lsb = 1;
            }
        }

    ]]></code.midihandler>
  </obj.normal>

  <obj.normal id="nrpn_rx_f" uuid="3fb294701e18a087a1e22a7ffca595a32f0c1b0100">
    <sDescription>NRPN receiver, bipolar and unipolar fractional outputs</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets/>
    <outlets>
      <frac32.bipolar  name="fb" description="Fractional bipolar value"/>
      <frac32.positive name="fp" description="Fractional unipolar value"/>
    </outlets>
    <displays/>
    <params/>
    <attribs>
      <combo name="device">
        <MenuEntries>
          <string>omni</string>
          <string>din</string>
          <string>usb host port 1</string>
          <string>usb host port 2</string>
          <string>usb host port 3</string>
          <string>usb host port 4</string>
          <string>internal port 1</string>
          <string>internal port 2</string>
          <string>usb device port 1</string>
        </MenuEntries>
        <CEntries>
          <string>MIDI_DEVICE_OMNI, 0</string>
          <string>MIDI_DEVICE_DIN, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 2</string>
          <string>MIDI_DEVICE_USB_HOST, 3</string>
          <string>MIDI_DEVICE_USB_HOST, 4</string>
          <string>MIDI_DEVICE_INTERNAL, 1</string>
          <string>MIDI_DEVICE_INTERNAL, 2</string>
          <string>MIDI_DEVICE_USB_DEVICE, 1</string>
        </CEntries>
      </combo>
      <spinner name="channel" MinValue="1"  MaxValue="16"    DefaultValue="1"/>
      <spinner name="nrpn"    MinValue="0"  MaxValue="16383" DefaultValue="0"/>
    </attribs>
    <code.declaration><![CDATA[

      char    midi_nrpn_msb;
      int32_t midi_nrpn;
      char    midi_value_msb;
      int32_t midi_value_frac;

      __attribute__ (( always_inline )) __STATIC_INLINE int midi_device_test( midi_device_t dev, uint8_t port, int selected_dev, uint8_t selected_port )
      {
        if(    (selected_dev == MIDI_DEVICE_OMNI)
            || (selected_dev == dev && selected_port == port)
            )
          return 1;
        return 0;
      }
    ]]></code.declaration>
    <code.init><![CDATA[

      midi_nrpn_msb     = 0;
      midi_nrpn         = 0;
      midi_value_msb    = 0;
      midi_value_frac   = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      outlet_fb = (midi_value_frac << 1)- (1<<27);
      outlet_fp = midi_value_frac;

    ]]></code.krate>
   <code.midihandler><![CDATA[

      #ifndef MIDI_C_DATA_ENTRY_LSB
        #define MIDI_C_DATA_ENTRY_LSB 38
      #endif

      if( midi_device_test( dev, port, attr_device ) == 1 && status == (attr_channel-1) | MIDI_CONTROL_CHANGE )
        {
          if( data1 == MIDI_C_NONRPN_MSB )
            {
              midi_nrpn_msb = data2;
            }
          else if( data1 == MIDI_C_NONRPN_LSB )
            {
              midi_nrpn = (midi_nrpn_msb << 7) | data2;
            }
          else if( data1 == MIDI_C_DATA_ENTRY && midi_nrpn == attr_nrpn )
            {
              midi_value_msb  = data2;
              midi_value_frac = midi_value_msb << 20;
            }
          else if( data1 == MIDI_C_DATA_ENTRY_LSB && midi_nrpn == attr_nrpn )
            {
              midi_value_frac = (midi_value_msb << 20) | (data2 << 13);
            }
        }

    ]]></code.midihandler>
  </obj.normal>

  <obj.normal id="nrpn_rx_i" uuid="a087a1e22a73fb294701e180cca595a32f0c1b098a">
    <sDescription>NRPN receiver, bipolar and unipolar integer outputs</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets/>
    <outlets>
      <int32.bipolar   name="ib"    description="Integer bipolar 14 bit value"/>
      <int32.positive  name="ip"    description="Integer unipolar 14 bit value"/>
      <int32.positive  name="msb"   description="Integer 7 bit MSB value"/>
      <int32.positive  name="lsb"   description="Integer 7 bit LSB value"/>
    </outlets>
    <displays/>
    <params/>
    <attribs>
      <combo name="device">
        <MenuEntries>
          <string>omni</string>
          <string>din</string>
          <string>usb host port 1</string>
          <string>usb host port 2</string>
          <string>usb host port 3</string>
          <string>usb host port 4</string>
          <string>internal port 1</string>
          <string>internal port 2</string>
          <string>usb device port 1</string>
        </MenuEntries>
        <CEntries>
          <string>MIDI_DEVICE_OMNI, 0</string>
          <string>MIDI_DEVICE_DIN, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 2</string>
          <string>MIDI_DEVICE_USB_HOST, 3</string>
          <string>MIDI_DEVICE_USB_HOST, 4</string>
          <string>MIDI_DEVICE_INTERNAL, 1</string>
          <string>MIDI_DEVICE_INTERNAL, 2</string>
          <string>MIDI_DEVICE_USB_DEVICE, 1</string>
        </CEntries>
      </combo>
      <spinner name="channel" MinValue="1"  MaxValue="16"    DefaultValue="1"/>
      <spinner name="nrpn"    MinValue="0"  MaxValue="16383" DefaultValue="0"/>
    </attribs>
    <code.declaration><![CDATA[

      char    midi_nrpn_msb;
      int32_t midi_nrpn;
      char    midi_value_lsb;
      char    midi_value_msb;
      int32_t midi_value_int;

      __attribute__ (( always_inline )) __STATIC_INLINE int midi_device_test( midi_device_t dev, uint8_t port, int selected_dev, uint8_t selected_port )
      {
        if(    (selected_dev == MIDI_DEVICE_OMNI)
            || (selected_dev == dev && selected_port == port)
            )
          return 1;
        return 0;
      }
    ]]></code.declaration>
    <code.init><![CDATA[

      midi_nrpn_msb     = 0;
      midi_nrpn         = 0;
      midi_value_lsb    = 0;
      midi_value_msb    = 0;
      midi_value_int    = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      outlet_ib         = midi_value_int - (1<<13);
      outlet_ip         = midi_value_int;
      outlet_msb        = midi_value_msb;
      outlet_lsb        = midi_value_lsb;

    ]]></code.krate>
   <code.midihandler><![CDATA[

      #ifndef MIDI_C_DATA_ENTRY_LSB
        #define MIDI_C_DATA_ENTRY_LSB 38
      #endif

      if( midi_device_test( dev, port, attr_device ) == 1 && status == (attr_channel-1) | MIDI_CONTROL_CHANGE )
        {
          if( data1 == MIDI_C_NONRPN_MSB )
            {
              midi_nrpn_msb = data2;
            }
          else if( data1 == MIDI_C_NONRPN_LSB )
            {
              midi_nrpn = (midi_nrpn_msb << 7) | data2;
            }
          else if( data1 == MIDI_C_DATA_ENTRY && midi_nrpn == attr_nrpn )
            {
              midi_value_msb   = data2;
              midi_value_int   = midi_value_msb << 7;
            }
          else if( data1 == MIDI_C_DATA_ENTRY_LSB && midi_nrpn == attr_nrpn )
            {
              midi_value_lsb   = data2;
              midi_value_int   = (midi_value_msb << 7) | midi_value_lsb;
            }
        }

    ]]></code.midihandler>
  </obj.normal>

</objdefs>