<objdefs appVersion="1.0.8">
  <obj.normal id="fm4op_alg" uuid="bwca2a267f775acc24055659829101d3ee7f0181">
    <sDescription>FM 4 op algorithm router ala TX81Z, but with a feedback path on all leaf operators</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <frac32buffer name="op1i" description="Op 1 input"/>
      <frac32buffer name="op2i" description="OP 2 input"/>
      <frac32buffer name="op3i" description="OP 3 input"/>
      <frac32buffer name="op4i" description="OP 4 input"/>
    </inlets>
    <outlets>
      <frac32buffer name="op1o" description="Op 1 output"/>
      <frac32buffer name="op2o" description="Op 2 output"/>
      <frac32buffer name="op3o" description="Op 3 output"/>
      <frac32buffer name="op4o" description="Op 4 output"/>
      <frac32buffer name="out" description="Output"/>
    </outlets>
    <displays/>
    <params>
      <int32.hradio name="algorithm">
        <MaxValue i="8"/>
      </int32.hradio>
    </params>
    <attribs/>
    <code.krate><![CDATA[
      int32_t j;
      /*
       *  TX81Z algorithms:
       *  1: op4 -> op3 -> op2 -> op1
       *  2: (op4 + op3) -> op2 -> op1
       *  3: op3 -> op2 + op4 -> op1
       *  4: op4 -> op3 + op2 -> op1
       *  5: (op2 -> op1) + (op4 -> op3)
       *  6: (op4 -> op1) + (op4 -> op2) + op4 -> op3)
       *  7: op1 + op2 + (op4 -> op3)
       *  8: op1 + op2 + op3 + op4
      */
      switch( param_algorithm )
        {
          case 0 :
            // 1: op4 -> op3 -> op2 -> op1
            for( j = 0; j < BUFSIZE; ++j )
              {
                outlet_op1o[j] = inlet_op2i[j];
                outlet_op2o[j] = inlet_op3i[j];
                outlet_op3o[j] = inlet_op4i[j];
                outlet_op4o[j] = inlet_op4i[j];
                outlet_out[j]  = __SSAT(inlet_op1i[j],28);
              }
            break;
          case 1 :
            // 2: (op4 + op3) -> op2 -> op1
            for( j = 0; j < BUFSIZE; ++j )
              {
                outlet_op1o[j] = inlet_op2i[j];
                outlet_op2o[j] = inlet_op3i[j] + inlet_op4i[j];
                outlet_op3o[j] = inlet_op3i[j]; // = 0
                outlet_op4o[j] = inlet_op4i[j];
                outlet_out[j]  = __SSAT(inlet_op1i[j],28);
              }
            break;
          case 2 :
            // 3: op3 -> op2 + op4 -> op1
            for( j = 0; j < BUFSIZE; ++j )
              {
              outlet_op1o[j] = inlet_op2i[j] + inlet_op4i[j];
              outlet_op2o[j] = inlet_op3i[j];
              outlet_op3o[j] = inlet_op3i[j];  // = 0
              outlet_op4o[j] = inlet_op4i[j];
              outlet_out[j]  = __SSAT(inlet_op1i[j],28);
            }
            break;
          case 3 :
            // 4: op4 -> op3 + op2 -> op1
            for( j = 0; j < BUFSIZE; ++j )
              {
                outlet_op1o[j] = inlet_op2i[j] + inlet_op3i[j];
                outlet_op2o[j] = inlet_op2i[j]; // = 0;
                outlet_op3o[j] = inlet_op4i[j];
                outlet_op4o[j] = inlet_op4i[j];
                outlet_out[j]  = __SSAT(inlet_op1i[j],28);
              }
            break;
          case 4 :
            // 5: (op2 -> op1) + (op4 -> op3)
            for( j = 0; j < BUFSIZE; ++j )
              {
                outlet_op1o[j] = inlet_op2i[j];
                outlet_op2o[j] = inlet_op2i[j]; // = 0;
                outlet_op3o[j] = inlet_op4i[j];
                outlet_op4o[j] = inlet_op4i[j];
                outlet_out[j]  = __SSAT(inlet_op1i[j]+inlet_op3i[j],28);
              }
            break;
          case 5 :
            // 6: (op4 -> op1) + (op4 -> op2) + (op4 -> op3)
            for( j = 0; j < BUFSIZE; ++j )
              {
                outlet_op1o[j] = inlet_op4i[j];
                outlet_op2o[j] = inlet_op4i[j];
                outlet_op3o[j] = inlet_op4i[j];
                outlet_op4o[j] = inlet_op4i[j];
                outlet_out[j]  = __SSAT(inlet_op1i[j]+inlet_op2i[j]+inlet_op3i[j],28);
              }
            break;
          case 6 :
            // 7: op1 + op2 + (op4 -> op3)
            for( j = 0; j < BUFSIZE; ++j )
              {
                outlet_op1o[j] = inlet_op1i[j]; //= 0;
                outlet_op2o[j] = inlet_op2i[j]; //= 0;
                outlet_op3o[j] = inlet_op4i[j];
                outlet_op4o[j] = inlet_op4i[j];
                outlet_out[j]  = __SSAT(inlet_op1i[j]+inlet_op2i[j]+inlet_op3i[j],28);
              }
            break;
          case 7 :
            // 8: op1 + op2 + op3 + op4
            for( j = 0; j < BUFSIZE; ++j )
              {
                outlet_op1o[j] = inlet_op1i[j]; // = 0
                outlet_op2o[j] = inlet_op2i[j]; // = 0
                outlet_op3o[j] = inlet_op3i[j]; // = 0
                outlet_op4o[j] = inlet_op4i[j];
                outlet_out[j]  = __SSAT(inlet_op1i[j]+inlet_op2i[j]+inlet_op3i[j]+inlet_op4i[j],28);
              }
            break;
        }
    ]]></code.krate>
  </obj.normal>
</objdefs>