<objdefs appVersion="1.0.11">

  <obj.normal id="mov_avg" uuid="bca43539d9ad309ea065379a3145eaac7b1485bf">
    <sDescription>Moving average, fractional, k-rate</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <frac32 name="in" description="Input"/>
    </inlets>
    <outlets>
      <frac32 name="out" description="Moving average output"/>
    </outlets>
    <displays/>
    <params/>
    <attribs>
      <combo name="length">
        <MenuEntries>
          <string>2</string>
          <string>4</string>
          <string>8</string>
          <string>16</string>
          <string>32</string>
          <string>64</string>
          <string>128</string>
          <string>256</string>
        </MenuEntries>
        <CEntries>
          <string>1</string>
          <string>2</string>
          <string>3</string>
          <string>4</string>
          <string>5</string>
          <string>6</string>
          <string>7</string>
          <string>8</string>
        </CEntries>
      </combo>
    </attribs>
    <code.declaration><![CDATA[

      #define FIFO_EXP attr_length
      #define FIFO_LEN (1<<FIFO_EXP)
      #define FIFO_MASK (FIFO_LEN-1)
      typedef struct _AveragerContext
      {
        int32_t fifo[FIFO_LEN];
        int32_t fifo_i;
        int32_t acc;
      } AveragerContext;
      AveragerContext avg;
      __attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t moving_average( AveragerContext *avg, int32_t new_value )
      {
        avg->fifo_i             = (avg->fifo_i + 1) & FIFO_MASK;
        avg->acc               -= avg->fifo[avg->fifo_i];
        avg->acc               += new_value;
        avg->fifo[avg->fifo_i]  = new_value;
        return avg->acc >> FIFO_EXP;
      }

    ]]></code.declaration>
    <code.init><![CDATA[

      for( avg.fifo_i = 0; avg.fifo_i < FIFO_LEN; avg.fifo_i++ )
        {
          avg.fifo[avg.fifo_i] = 0;
        }
      avg.fifo_i       = 0;
      avg.acc          = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      outlet_out = moving_average( &avg, inlet_in>>FIFO_EXP )<<FIFO_EXP;

    ]]></code.krate>
    <code.srate><![CDATA[

    ]]></code.srate>
  </obj.normal>

  <obj.normal id="mov_avg" uuid="acea43539d9ad309b065329a3145e9a07b1485bf">
    <sDescription>Moving average, integer (no loss of precision), k-rate</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <int32 name="in" description="Input"/>
    </inlets>
    <outlets>
      <int32 name="out" description="Moving average output"/>
    </outlets>
    <displays/>
    <params/>
    <attribs>
      <combo name="length">
        <MenuEntries>
          <string>2</string>
          <string>4</string>
          <string>8</string>
          <string>16</string>
          <string>32</string>
          <string>64</string>
          <string>128</string>
          <string>256</string>
        </MenuEntries>
        <CEntries>
          <string>1</string>
          <string>2</string>
          <string>3</string>
          <string>4</string>
          <string>5</string>
          <string>6</string>
          <string>7</string>
          <string>8</string>
        </CEntries>
      </combo>
    </attribs>
    <code.declaration><![CDATA[

      #define FIFO_EXP attr_length
      #define FIFO_LEN (1<<FIFO_EXP)
      #define FIFO_MASK (FIFO_LEN-1)
      typedef struct _AveragerContext
      {
        int32_t fifo[FIFO_LEN];
        int32_t fifo_i;
        int32_t acc;
      } AveragerContext;
      AveragerContext avg;
      __attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t moving_average( AveragerContext *avg, int32_t new_value )
      {
        avg->fifo_i             = (avg->fifo_i + 1) & FIFO_MASK;
        avg->acc               -= avg->fifo[avg->fifo_i];
        avg->acc               += new_value;
        avg->fifo[avg->fifo_i]  = new_value;
        return avg->acc >> FIFO_EXP;
      }

    ]]></code.declaration>
    <code.init><![CDATA[

      for( avg.fifo_i = 0; avg.fifo_i < FIFO_LEN; avg.fifo_i++ )
        {
          avg.fifo[avg.fifo_i] = 0;
        }
      avg.fifo_i       = 0;
      avg.acc          = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      outlet_out = moving_average( &avg, inlet_in );

    ]]></code.krate>
    <code.srate><![CDATA[

    ]]></code.srate>
  </obj.normal>

  <obj.normal id="mov_avg" uuid="a390435d9ad3b09ea0622ab1483ac779a3145e4b">
    <sDescription>Moving average, fractional, s-rate</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <frac32buffer name="in" description="Input"/>
    </inlets>
    <outlets>
      <frac32buffer name="out" description="Moving average output"/>
    </outlets>
    <displays/>
    <params/>
    <attribs>
      <combo name="length">
        <MenuEntries>
          <string>2</string>
          <string>4</string>
          <string>8</string>
          <string>16</string>
          <string>32</string>
          <string>64</string>
          <string>128</string>
          <string>256</string>
        </MenuEntries>
        <CEntries>
          <string>1</string>
          <string>2</string>
          <string>3</string>
          <string>4</string>
          <string>5</string>
          <string>6</string>
          <string>7</string>
          <string>8</string>
        </CEntries>
      </combo>
    </attribs>
    <code.declaration><![CDATA[

      #define FIFO_EXP attr_length
      #define FIFO_LEN (1<<FIFO_EXP)
      #define FIFO_MASK (FIFO_LEN-1)
      typedef struct _AveragerContext
      {
        int32_t fifo[FIFO_LEN];
        int32_t fifo_i;
        int32_t acc;
      } AveragerContext;
      AveragerContext avg;
      __attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t moving_average( AveragerContext *avg, int32_t new_value )
      {
        avg->fifo_i             = (avg->fifo_i + 1) & FIFO_MASK;
        avg->acc               -= avg->fifo[avg->fifo_i];
        avg->acc               += new_value;
        avg->fifo[avg->fifo_i]  = new_value;
        return avg->acc >> FIFO_EXP;
      }

    ]]></code.declaration>
    <code.init><![CDATA[

      for( avg.fifo_i = 0; avg.fifo_i < FIFO_LEN; avg.fifo_i++ )
        {
          avg.fifo[avg.fifo_i] = 0;
        }
      avg.fifo_i       = 0;
      avg.acc          = 0;

    ]]></code.init>
    <code.krate><![CDATA[

    ]]></code.krate>
    <code.srate><![CDATA[

      outlet_out = moving_average( &avg, inlet_in>>FIFO_EXP )<<FIFO_EXP;

    ]]></code.srate>
  </obj.normal>

  <obj.normal id="mov_avg_clk" uuid="d9ad309ebca4ac7b1485b3539a06537900045eaf">
    <sDescription>Moving average, fractional, clocked, k-rate</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <frac32        name="in"    description="Input"/>
      <bool32.rising name="clock" description="Clock input"/>
    </inlets>
    <outlets>
      <frac32 name="out" description="Moving average output"/>
    </outlets>
    <displays/>
    <params/>
    <attribs>
      <combo name="length">
        <MenuEntries>
          <string>2</string>
          <string>4</string>
          <string>8</string>
          <string>16</string>
          <string>32</string>
          <string>64</string>
          <string>128</string>
          <string>256</string>
        </MenuEntries>
        <CEntries>
          <string>1</string>
          <string>2</string>
          <string>3</string>
          <string>4</string>
          <string>5</string>
          <string>6</string>
          <string>7</string>
          <string>8</string>
        </CEntries>
      </combo>
    </attribs>
    <code.declaration><![CDATA[

      #define FIFO_EXP attr_length
      #define FIFO_LEN (1<<FIFO_EXP)
      #define FIFO_MASK (FIFO_LEN-1)
      typedef struct _AveragerContext
      {
        int32_t fifo[FIFO_LEN];
        int32_t fifo_i;
        int32_t acc;
      } AveragerContext;
      AveragerContext avg;
      __attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t moving_average( AveragerContext *avg, int32_t new_value )
      {
        avg->fifo_i             = (avg->fifo_i + 1) & FIFO_MASK;
        avg->acc               -= avg->fifo[avg->fifo_i];
        avg->acc               += new_value;
        avg->fifo[avg->fifo_i]  = new_value;
        return avg->acc >> FIFO_EXP;
      }

      int32_t last_out;
      int32_t old_inlet_clock;

    ]]></code.declaration>
    <code.init><![CDATA[

      for( avg.fifo_i = 0; avg.fifo_i < FIFO_LEN; avg.fifo_i++ )
        {
          avg.fifo[avg.fifo_i] = 0;
        }
      avg.fifo_i      = 0;
      avg.acc         = 0;
      last_out        = 0;
      old_inlet_clock = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      if( inlet_clock & !old_inlet_clock )
        {
          last_out = moving_average( &avg, inlet_in>>FIFO_EXP )<<FIFO_EXP;
        }
      old_inlet_clock = inlet_clock;
      outlet_out      = last_out;

    ]]></code.krate>
    <code.srate><![CDATA[

    ]]></code.srate>
  </obj.normal>

  <obj.normal id="mov_avg_clk" uuid="15b790b348539a0653d9ad309ebca4ac700464a9">
    <sDescription>Moving average, integer (no loss of precision), clocked, k-rate</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <int32         name="in"    description="Input"/>
      <bool32.rising name="clock" description="Clock input"/>
    </inlets>
    <outlets>
      <int32 name="out" description="Moving average output"/>
    </outlets>
    <displays/>
    <params/>
    <attribs>
      <combo name="length">
        <MenuEntries>
          <string>2</string>
          <string>4</string>
          <string>8</string>
          <string>16</string>
          <string>32</string>
          <string>64</string>
          <string>128</string>
          <string>256</string>
        </MenuEntries>
        <CEntries>
          <string>1</string>
          <string>2</string>
          <string>3</string>
          <string>4</string>
          <string>5</string>
          <string>6</string>
          <string>7</string>
          <string>8</string>
        </CEntries>
      </combo>
    </attribs>
    <code.declaration><![CDATA[

      #define FIFO_EXP attr_length
      #define FIFO_LEN (1<<FIFO_EXP)
      #define FIFO_MASK (FIFO_LEN-1)
      typedef struct _AveragerContext
      {
        int32_t fifo[FIFO_LEN];
        int32_t fifo_i;
        int32_t acc;
      } AveragerContext;
      AveragerContext avg;
      __attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t moving_average( AveragerContext *avg, int32_t new_value )
      {
        avg->fifo_i             = (avg->fifo_i + 1) & FIFO_MASK;
        avg->acc               -= avg->fifo[avg->fifo_i];
        avg->acc               += new_value;
        avg->fifo[avg->fifo_i]  = new_value;
        return avg->acc >> FIFO_EXP;
      }

      int32_t last_out;
      int32_t old_inlet_clock;

    ]]></code.declaration>
    <code.init><![CDATA[

      for( avg.fifo_i = 0; avg.fifo_i < FIFO_LEN; avg.fifo_i++ )
        {
          avg.fifo[avg.fifo_i] = 0;
        }
      avg.fifo_i      = 0;
      avg.acc         = 0;
      last_out        = 0;
      old_inlet_clock = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      if( inlet_clock & !old_inlet_clock )
        {
          last_out = moving_average( &avg, inlet_in );
        }
      old_inlet_clock = inlet_clock;
      outlet_out      = last_out;

    ]]></code.krate>
    <code.srate><![CDATA[

    ]]></code.srate>
  </obj.normal>

</objdefs>
