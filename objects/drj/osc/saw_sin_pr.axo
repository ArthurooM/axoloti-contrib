<objdefs>
  <obj.normal id="phasor_pm_pr_b" uuid="1111a162334b5aac6e462984c5decba17b1862d85" >
    <sDescription>Phasor with phase and phase reset inputs, bipolar, s-rate</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <frac32.bipolar name="pitch" description="Pitch input"/>
      <frac32buffer.bipolar name="phase" description="phase input"/>
      <bool32.rising name="reset" description="phase reset input"/>
    </inlets>
    <outlets>
      <frac32buffer.bipolar name="out" description="Phasor output"/>
    </outlets>
    <displays/>
    <params>
      <frac32.s.map.pitch name="pitch" noLabel="true"/>
    </params>
    <attribs/>
    <includes/>
    <code.declaration><![CDATA[

      uint32_t phase;
      int32_t old_reset;
      int32_t freq;

    ]]></code.declaration>
    <code.init><![CDATA[phase = 0;

      phase = 0;
      old_reset = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      MTOFEXTENDED(param_pitch + inlet_pitch,freq);

    ]]></code.krate>
    <code.srate><![CDATA[

      if( inlet_reset && !old_reset )
        {
          phase = 0;
        }
      else
        {
          phase += freq;
        }
      old_reset = inlet_reset;

      outlet_out = ((phase + (inlet_phase<<4))>>4) - (1<<27);

    ]]></code.srate>
  </obj.normal>
  <obj.normal id="phasor_pm_pr_u" uuid="1111a16c37bb5aac6e4629842aceaba17b1862d85" >
    <sDescription>Phasor with phase and phase reset inputs, unipolar s-rate</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <frac32.bipolar name="pitch" description="Pitch input"/>
      <frac32buffer.bipolar name="phase" description="phase input"/>
      <bool32.rising name="reset" description="phase reset input"/>
    </inlets>
    <outlets>
      <frac32buffer.positive name="out" description="Phasor output"/>
    </outlets>
    <displays/>
    <params>
      <frac32.s.map.pitch name="pitch" noLabel="true"/>
    </params>
    <attribs/>
    <includes/>
    <code.declaration><![CDATA[

      uint32_t phase;
      int32_t old_reset;
      int32_t freq;

    ]]></code.declaration>
    <code.init><![CDATA[phase = 0;

      phase = 0;
      old_reset = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      MTOFEXTENDED(param_pitch + inlet_pitch,freq);

    ]]></code.krate>
    <code.srate><![CDATA[

      if( inlet_reset && !old_reset )
        {
          phase = 0;
        }
      else
        {
          phase += freq;
        }
      old_reset = inlet_reset;

      outlet_out = (phase + (inlet_phase<<4))>>5;

    ]]></code.srate>
  </obj.normal>
  <obj.normal id="sin_pm_pr_b" uuid="6e0087345c134da9dbf7ebfa72e44e4700d2b3ba">
    <sDescription>Sine oscillator with phase and phase reset inputs, bipolar, s-rate</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <helpPatch>osc.axh</helpPatch>
    <inlets>
      <frac32.bipolar name="pitch" description="Pitch input"/>
      <frac32buffer.bipolar name="phase" description="phase input"/>
      <bool32.rising name="reset" description="phase reset input"/>
    </inlets>
    <outlets>
      <frac32buffer.bipolar name="out" description="Sine output"/>
    </outlets>
    <displays/>
    <params>
       <frac32.s.map.pitch name="pitch" noLabel="true"/>
    </params>
    <attribs/>
    <code.declaration><![CDATA[

      uint32_t phase;
      int32_t old_reset;
      int32_t freq;

    ]]></code.declaration>
    <code.init><![CDATA[

      phase = 0;
      old_reset = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      MTOFEXTENDED(param_pitch + inlet_pitch,freq);

    ]]></code.krate>
    <code.srate><![CDATA[

      if( inlet_reset && !old_reset )
        {
          phase = 0;
        }
      else
        {
          phase += freq;
        }
      old_reset = inlet_reset;

      int32_t sine;
      SINE2TINTERP( phase + (inlet_phase<<4), sine )
      outlet_out = (sine>>4);

    ]]></code.srate>
  </obj.normal>
  <obj.normal id="sin_pm_pr_u" uuid="6e0129475c12cda9dbf7ebfa72eaae4700d2b3ba">
    <sDescription>Sine oscillator with phase and phase reset inputs, unipolar, s-rate</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <helpPatch>osc.axh</helpPatch>
    <inlets>
      <frac32.bipolar name="pitch" description="Pitch input"/>
      <frac32buffer.bipolar name="phase" description="phase input"/>
      <bool32.rising name="reset" description="phase reset input"/>
    </inlets>
    <outlets>
      <frac32buffer.positive name="out" description="Sine output"/>
    </outlets>
    <displays/>
    <params>
      <frac32.s.map.pitch name="pitch" noLabel="true"/>
    </params>
    <attribs/>
    <code.declaration><![CDATA[

      uint32_t phase;
      int32_t old_reset;
      int32_t freq;

    ]]></code.declaration>
    <code.init><![CDATA[

      phase = 0;
      old_reset = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      MTOFEXTENDED(param_pitch + inlet_pitch,freq);

    ]]></code.krate>
    <code.srate><![CDATA[

      if( inlet_reset && !old_reset )
        {
          phase = 0;
        }
      else
        {
          phase += freq;
        }
      old_reset = inlet_reset;

      int32_t sine;
      SINE2TINTERP( phase + (inlet_phase<<4), sine )
      outlet_out = (sine>>5) + (1<<26);

    ]]></code.srate>
  </obj.normal>
</objdefs>