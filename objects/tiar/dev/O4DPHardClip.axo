<objdefs appVersion="1.0.11">
   <obj.normal id="O4DP HardClip" uuid="1034419c-ac24-4f69-b51c-c0e35e577394">
      <sDescription>4x oversampled HardClip with Differentiated Polynomial Anti aliasing.</sDescription>
      <author>Smashed Transistors</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer.bipolar name="in3"/>
         <frac32buffer.bipolar name="in2"/>
         <frac32buffer.bipolar name="in1"/>
         <frac32buffer.bipolar name="in0"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="out3"/>
         <frac32buffer.bipolar name="out2"/>
         <frac32buffer.bipolar name="out1"/>
         <frac32buffer.bipolar name="out0"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="InGain"/>
         <frac32.u.map name="OutGain"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[float x0,x1,I0,I1,out,inGain,outGain;
int32_t old_in;
int32_t outMax, outMin;]]></code.declaration>
      <code.init><![CDATA[x0=x1=I0=I1=out=0;
old_in = 0;]]></code.init>
      <code.krate><![CDATA[inGain = param_InGain*(1.0f/(1<<25))*(1.0f/(1<<27));
outGain = 2.0f*param_OutGain;
outMax = (int32_t)(outGain);
outMin = -outMax;]]></code.krate>
      <code.srate><![CDATA[x1 = x0;
x0 = inlet_in3 * inGain;
I1 = I0;
I0 = fabs(x0);
if(I0 <= 1){
  I0 = 0.5f * I0*I0;
} else {
  I0 = I0 - 0.5f;  
}
if((inlet_in3 & 0xFFFFF000) != (old_in & 0xFFFFF000)){
  outlet_out3 = (int32_t)(outGain*(I0 - I1) / (x0 - x1));
}else{
  outlet_out3 = x0 >= 1  ? outMax 
              : x0 <= -1 ? outMin 
              : (int32_t)(outGain * x0);
}
old_in = inlet_in3;
// _________________________________________________________________
x1 = x0;
x0 = inlet_in2 * inGain;
I1 = I0;
I0 = fabs(x0);
if(I0 <= 1){
  I0 = 0.5f * I0*I0;
} else {
  I0 = I0 - 0.5f;  
}
if((inlet_in2 & 0xFFFFF000) != (old_in & 0xFFFFF000)){
  outlet_out2 = (int32_t)(outGain*(I0 - I1) / (x0 - x1));
}else{

  outlet_out2 = x0 >= 1  ? outMax 
              : x0 <= -1 ? outMin 
              : (int32_t)(outGain * x0);
}
old_in = inlet_in2;
// _________________________________________________________________
x1 = x0;
x0 = inlet_in1 * inGain;
I1 = I0;
I0 = fabs(x0);
if(I0 <= 1){
  I0 = 0.5f * I0*I0;
} else {
  I0 = I0 - 0.5f;  
}
if((inlet_in1 & 0xFFFFF000) != (old_in & 0xFFFFF000)){
  outlet_out1 = (int32_t)(outGain*(I0 - I1) / (x0 - x1));
}else{
  outlet_out1 = x0 >= 1  ? outMax 
              : x0 <= -1 ? outMin 
              : (int32_t)(outGain * x0);
}
old_in = inlet_in1;
// _________________________________________________________________
x1 = x0;
x0 = inlet_in0 * inGain;
I1 = I0;
I0 = fabs(x0);
if(I0 <= 1){
  I0 = 0.5f * I0*I0;
} else {
  I0 = I0 - 0.5f;  
}
if((inlet_in0 & 0xFFFFF000) != (old_in & 0xFFFFF000)){
  outlet_out0 = (int32_t)(outGain*(I0 - I1) / (x0 - x1));
}else{
  outlet_out0 = x0 >= 1  ? outMax 
              : x0 <= -1 ? outMin 
              : (int32_t)(outGain * x0);
}
old_in = inlet_in0;]]></code.srate>
   </obj.normal>
</objdefs>