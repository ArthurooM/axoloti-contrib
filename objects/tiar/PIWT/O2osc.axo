<objdefs appVersion="1.0.12">
   <obj.normal id="O2osc" uuid="c853a6af-6786-4fce-b2dd-2445f9b7d5b8">
      <sDescription>PIWT osc, needs to connect to a PIWT.
Experimental.
</sDescription>
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>PIWTO2osc.axh</helpPatch>
      <inlets>
         <frac32buffer.bipolar name="pm1"/>
         <frac32buffer.bipolar name="pm0"/>
         <frac32.bipolar name="pitch"/>
         <frac32.bipolar name="freq offset"/>
         <bool32 name="disable" description="disables the object"/>
         <bool32 name="disto" description="use the waveform as a distortion"/>
         <frac32.bipolar name="disto offset"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="y1" description=""/>
         <frac32buffer.bipolar name="y0"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
      </params>
      <attribs>
         <objref name="piwt"/>
      </attribs>
      <code.declaration><![CDATA[uint32_t p;  // phase
int32_t dp;  // delta phase aka freq
int32_t x0,x1,I1_0,I1_1;
int32_t kMI;  // Modulation Index
int32_t aMI, dMI;  // interp Modulation Index]]></code.declaration>
      <code.init><![CDATA[// _____________________________________________________________________
p = 0;
dp = 1;
x0 = 0;
x1 = 1;
I1_0 = I1_1 = 0;
aMI = dMI = kMI = 0;
// _____________________________________________________________________]]></code.init>
      <code.krate><![CDATA[if(!inlet_disable){
      // _____________________________________________________________________
MTOFEXTENDED(param_pitch + inlet_pitch, dp);
dp += ___SMMUL(0x01000000, inlet_freq_space_offset);  //<--- adjust for 64Hz at 64.
dp >>= 5;  // p is uq28 to let room for phase modulation
           // (need to calculate x0 - x1 even with over modulation)
// _____________________________________________________________________
//                                                     Audio rate loops
for(int j = 0; j < BUFSIZE; j++){
{
  if(inlet_disto){
    p = inlet_disto_space_offset << 1;
  }else{
    p += dp; // phase increment
    if(p >= 0x40000000){
       p -= 0x10000000;
      x0 -= 0x10000000;   // p, xO and x1 must be consistent
    }
  }
  x1 = x0;
  I1_1 = I1_0;
  x0 = p + inlet_pm1[j];
  float inv = ((float)(1<<27)) / ((float)(x0 - x1));
  int32_t a  = (x0 & 0x000FFFFF) << 11;  // 0 -> 1 q31
  uint32_t i = (x0 & 0x0FF00000) >> 20;  // [0 255]
  int32_t a2_2 = ___SMMUL(a, a);
  I1_0 = ___SMMUL( attr_piwt.v[i], a);
  I1_0 = ___SMMLA(attr_piwt.v[i+1] - attr_piwt.v[i], a2_2, I1_0);
  I1_0 = attr_piwt.Iv[i] + (I1_0 << 1);
  int32_t v = ___SMMLA(a, attr_piwt.v[i+1] - attr_piwt.v[i], attr_piwt.v[i] >>1)<<8;
  int32_t diff = I1_0 - I1_1;
  if(abs(x0-x1)>256)
    outlet_y1[j] = (int32_t) (diff * inv);
  else{
  	outlet_y1[j] = v;
  }
}
{
  if(inlet_disto){
    p = inlet_disto_space_offset << 1;
  }else{
    p += dp; // phase increment
    if(p >= 0x40000000){
       p -= 0x10000000;
      x0 -= 0x10000000;   // p, xO and x1 must be consistent
    }
  }
  x1 = x0;
  I1_1 = I1_0;
  x0 = p + inlet_pm0[j];
  float inv = ((float)(1<<27)) / ((float)(x0 - x1));
  int32_t a  = (x0 & 0x000FFFFF) << 11;  // 0 -> 1 q31
  uint32_t i = (x0 & 0x0FF00000) >> 20;  // [0 255]
  int32_t a2_2 = ___SMMUL(a, a);
  I1_0 = ___SMMUL( attr_piwt.v[i], a);
  I1_0 = ___SMMLA(attr_piwt.v[i+1] - attr_piwt.v[i], a2_2, I1_0);
  I1_0 = attr_piwt.Iv[i] + (I1_0 << 1);
  int32_t v = ___SMMLA(a, attr_piwt.v[i+1] - attr_piwt.v[i], attr_piwt.v[i] >>1)<<8;
  int32_t diff = I1_0 - I1_1;
  if(abs(x0-x1)>256)
    outlet_y0[j] = (int32_t) (diff * inv);
  else{
  	outlet_y0[j] = v;
  } 
} 
}
}else{
for(int j = 0; j < BUFSIZE; j++){
  outlet_y1[j] = inlet_pm1[j];
  outlet_y0[j] = inlet_pm0[j];
}
}
// _____________________________________________________________________]]></code.krate>
   </obj.normal>
</objdefs>