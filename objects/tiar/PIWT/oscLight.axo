<objdefs appVersion="1.0.12">
   <obj.normal id="oscLight" uuid="6850cfa5-d3dd-4cbf-87d4-48a6d0b03706">
      <sDescription>PIWT osc, needs to connect to a PIWT.</sDescription>
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>PIWToscLight.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch"/>
         <frac32.bipolar name="freq offset"/>
         <bool32 name="disable" description="disables the object"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="wave"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
      </params>
      <attribs>
         <objref name="piwt"/>
      </attribs>
      <code.declaration><![CDATA[uint32_t p = 0, dp = 1;  // phase and delta phase aka freq
int32_t I1_1 = 0;
int32_t inv;]]></code.declaration>
      <code.krate><![CDATA[if(!inlet_disable){
  int32_t nextDp;
  MTOFEXTENDED(param_pitch + inlet_pitch, nextDp);
  nextDp = ___SMMLA(0x01000000, inlet_freq_space_offset, nextDp);
  nextDp >>= 32 - 22 - attr_piwt.LENGTHPOW;
  // the float division execs in parallel with integer operations.
  float nextInv = (((float)(1<<16)) / arm::q_to_float(nextDp, 32));
  for(int j = 0; j < BUFSIZE; j++){
    p += dp;
    int32_t I1_0 = attr_piwt.I1p32(p);
    outlet_wave[j] = ___SMMUL(I1_0 - I1_1, inv) << 13;
    I1_1 = I1_0;
  }
  dp = nextDp;
  inv = (int32_t) nextInv;
} else { //disabled
  for(int j = 0; j < BUFSIZE; j++){
    outlet_wave[j] = 0;
  }
}]]></code.krate>
   </obj.normal>
</objdefs>