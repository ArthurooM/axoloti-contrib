<objdefs appVersion="1.0.12">
   <obj.normal id="disharm" uuid="0b2152d0-061e-499e-8a0b-a2e58ac34968">
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>PIWTdisharm.axh</helpPatch>
      <inlets/>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <objref name="piwt"/>
         <spinner name="hA" MinValue="0" MaxValue="128" DefaultValue="0"/>
         <spinner name="hB" MinValue="0" MaxValue="128" DefaultValue="0"/>
         <spinner name="hC" MinValue="0" MaxValue="128" DefaultValue="0"/>
         <spinner name="hD" MinValue="0" MaxValue="128" DefaultValue="0"/>
         <spinner name="hE" MinValue="0" MaxValue="128" DefaultValue="0"/>
         <spinner name="hF" MinValue="0" MaxValue="128" DefaultValue="0"/>
         <spinner name="hG" MinValue="0" MaxValue="128" DefaultValue="0"/>
         <spinner name="hH" MinValue="0" MaxValue="128" DefaultValue="0"/>
      </attribs>
      <code.declaration><![CDATA[float mod1(float x) { return (1024+x) - ((int)(x+1024)); }
float saw(float x){ return 2 * mod1(x) - 1; }
float tri(float x,float r){ // r: cyclic ratio 0.5f => middle
  x = mod1(x);
  if(x < r)
    return -1 + (2 * x / r);
  else {
    return 1 - 2 * (x - r) / (1.0f - r);
  }
}
float tri(float x){ return tri(x,0.5f); }
float sin1(float x){ x = tri(x); return x * (1.5708f + x*x * (-0.6422f +0.0714 * x*x));      }]]></code.declaration>
      <code.init><![CDATA[for(int i=0;i<256;i++){
  attr_piwt.fv[i] = arm::q_to_float(attr_piwt.v[i], 27);
}

int8_t h[8] = {attr_hA, attr_hB, attr_hC, attr_hD, attr_hE, attr_hF, attr_hG, attr_hH};

for(int harmo = 0; harmo < 8; harmo++){
if(h[harmo]==0)
  continue;
float s = 0;
float c = 0;
float p = 0;
float dp = h[harmo] * (1.0f/256);
for (int i = 0; i < 256; i++) {
  float x = i * (1.0f/256);
  c += attr_piwt.fv[i] * sin1(p + 0.25f);
  s += attr_piwt.fv[i] * sin1(p);
  p += dp;
}
c *= 1.0f/128;
s *= 1.0f/128;
p = 0;
for (int i = 0; i < 256; i++) {
    attr_piwt.fv[i] -= c * sin1(p + 0.25f) + s * sin1(p);
    p += dp;
}
}
//pre integrate
float moy = 0.0f;
for(int i = 0; i < 256; i++){
  moy += attr_piwt.fv[i];
}
moy *= 1/256.0f;
float M = 0.0f;
for(int i = 0; i < 256; i++){
  attr_piwt.fv[i] -= moy;
  if(fabs(attr_piwt.fv[i]) > M) M = fabs(attr_piwt.fv[i]);
}
// normalise
if(M != 0.0f){
  M = 1.0f / M;
  for(int i = 0; i < 256; i++){
    attr_piwt.fv[i] *= M;
  }
}
// convert
for(int i = 0; i < 256; i++){
  attr_piwt.v[i] = arm::float_to_q(attr_piwt.fv[i], 20);
}
attr_piwt.v[256] = attr_piwt.v[0]; // for easy dv: dv = v[i+1] - v[i]
// integrate (checked)
int32_t I1 = 0;
for(int i = 0; i < 256; i++){
  attr_piwt.Iv[i] = I1;
  I1 += attr_piwt.v[i] + (attr_piwt.v[i+1] - attr_piwt.v[i])/2; 
}]]></code.init>
   </obj.normal>
</objdefs>