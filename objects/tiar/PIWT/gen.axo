<objdefs appVersion="1.0.12">
   <obj.normal id="gen" uuid="ec13dbe5-078e-47b3-b71e-ce71caba1b6d">
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>PIWTgen.axh</helpPatch>
      <inlets/>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <text name="function"/>
      </attribs>
      <code.declaration><![CDATA[int32_t v[257]; // one more for dv
int32_t Iv[256];
float *fv = (float *)v; //in place

float mod1(float x) { return (1024+x) - ((int)(x+1024)); }
float saw(float x){ return 2 * mod1(x) - 1; }
float tri(float x,float r){ // r: cyclic ratio 0.5f => middle
  x = mod1(x);
  if(x < r)
    return -1 + (2 * x / r);
  else {
    return 1 - 2 * (x - r) / (1.0f - r);
  }
}
float tri(float x){ return tri(x,0.5f); }
float sin1(float x){ x = tri(x); return x * (1.5708f + x*x * (-0.6422f +0.0714 * x*x));      }
float clip(float x){ return x > 1.0f ? 1.0f : x < -1.0f ? -1.0f : x;}
float sat(float x){ x = clip(x); return x * (1.5f - 0.5f * x * x);     }]]></code.declaration>
      <code.init><![CDATA[//init
float moy = 0.0f;
int32_t seed = 3424655465;
for(int i = 0; i < 256; i++){
  float x = arm::q_to_float(i, 8);
  seed = seed * 69069 + 1;
  float rnd = arm::q_to_float(seed, 30)-1.0f;
  fv[i] = (float)(  attr_function  );
  moy += fv[i];
}
moy *= 1/256.0f;
float M = 0.0f;
for(int i = 0; i < 256; i++){
  fv[i] -= moy;
  if(fabs(fv[i]) > M) M = fabs(fv[i]);
}
// normalise
if(M != 0.0f){
  M = 1.0f / M;
  for(int i = 0; i < 256; i++){
    fv[i] *= M;
  }
}
// convert
for(int i = 0; i < 256; i++){
  v[i] = arm::float_to_q(fv[i], 20);
}
v[256] = v[0]; // for easy dv: dv = v[i+1] - v[i]
// integrate (checked)
int32_t I1 = 0;
for(int i = 0; i < 256; i++){
  Iv[i] = I1;
  I1 += v[i] + (v[i+1]-v[i])/2; 
}]]></code.init>
   </obj.normal>
</objdefs>