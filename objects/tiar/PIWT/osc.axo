<objdefs appVersion="1.0.12">
   <obj.normal id="osc" uuid="181d129c-ec57-4f15-a551-dc821a6bb46f">
      <sDescription>PIWT osc, needs to connect to a PIWT.
Experimental.
</sDescription>
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>PIWTosc.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch"/>
         <frac32buffer.bipolar name="m"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="wave" description="selfPM wave"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
      </params>
      <attribs>
         <objref name="piwt"/>
      </attribs>
      <code.declaration><![CDATA[uint32_t p;  // phase
int32_t dp;  // delta phase aka freq
int32_t x0,x1,I1_0,I1_1;
int32_t kMI;  // Modulation Index
int32_t aMI, dMI;  // interp Modulation Index

// _____________________________________________________________________]]></code.declaration>
      <code.init><![CDATA[// _____________________________________________________________________
p = 0;
dp = 1;
x0 = 0;
x1 = 1;
I1_0 = I1_1 = 0;
aMI = dMI = kMI = 0;
// _____________________________________________________________________]]></code.init>
      <code.krate><![CDATA[// _____________________________________________________________________
MTOFEXTENDED(param_pitch + inlet_pitch, dp);
dp >>= 4;  // p is uq28 to let room for phase modulation
           // (need to calculate x0 - x1 even with over modulation)
// _____________________________________________________________________
//                                                     Audio rate loops
for(int j = 0; j < BUFSIZE; j++){
  p += dp; // phase increment
  if(p >= 0x40000000){
     p -= 0x10000000;
    x0 -= 0x10000000;   // p, xO and x1 must be consistent
  }
  x1 = x0;
  I1_1 = I1_0;
  x0 = p + inlet_m[j];
  x1 += (x0 == x1) ? 1 : 0; // avoids ill case

  // differentiation part 1/3
  // we launch the float div here (14 cycles !!)
  // so that integer ops executes in parallel :D
  float inv = ((float)(1<<27)) / ((float)(x0 - x1));

  // Now we do as many int ops as we can to fill ~14 cycles

  // the interpolation coefficient
  int32_t a  = (x0 & 0x000FFFFF) << 11;  // 0 -> 1 q31
  
  // the segment number
  uint32_t i = (x0 & 0x0FF00000) >> 20;  // [0 255]
  
  // polynomial calc of the integrand on segment i at position a
  // the polynomial is
  // I1_0 = Iv + a * v + (a^2/2) dv
  // it is the integrand of v + a*dv

  // a^2/2  q31
  int32_t a2_2 = ___SMMUL(a, a);
  I1_0 = ___SMMUL( attr_piwt.v[i], a);
  I1_0 = ___SMMLA(attr_piwt.v[i+1]-attr_piwt.v[i], a2_2, I1_0);
  I1_0 = attr_piwt.Iv[i] + (I1_0 << 1);

  // we differentiate the integrand in the interval
  // x0 x1: ie in the interval between now and the preceding
  // input.
  
  // differentiation part 2/3
  int32_t diff = I1_0 - I1_1;
  
  // now, the result of our float division should be available.
  // we haven't wasted our time waiting for it.
  
  // differentiation part 3/3
  outlet_wave[j] = (int32_t) (diff * inv);
}
// _____________________________________________________________________]]></code.krate>
   </obj.normal>
</objdefs>