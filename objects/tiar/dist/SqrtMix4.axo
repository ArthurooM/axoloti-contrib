<objdefs appVersion="1.0.12">
   <obj.normal id="SqrtMix4" uuid="10db0e9d-f31b-46d9-8f94-6fef77de8fed">
      <sDescription>A non linear "mixer". 
An input alone will not be distorted. Distortion occurs only when many
inputs are active.
The output is the square root of the sum of the input squares.
Note: the "square" and "squaroots" are "signed" i.e for negative values they
are -x*x and -sqrt(-x*x).
      </sDescription>
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>SqrtMix4.axh</helpPatch>
      <inlets>
         <frac32buffer name="w"/>
         <frac32buffer name="x"/>
         <frac32buffer name="y"/>
         <frac32buffer name="z"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map.gain name="Gw"/>
         <frac32.u.map.gain name="Gx"/>
         <frac32.u.map.gain name="Gy"/>
         <frac32.u.map.gain name="Gz"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[float s = 1.0f/(1<<11);
int32_t out2 = 0;]]></code.declaration>
      <code.srate><![CDATA[float out = _VSQRTF(out2);
// prepare next out2
// (integer instructions executed in parallel of sqrtf)
{
  int32_t t;
  t = ___SMMUL(inlet_w, param_Gw);  out2 = ___SMMUL(t, abs(t));
  t = ___SMMUL(inlet_x, param_Gx);  out2 = ___SMMLA(t, abs(t), out2);
  t = ___SMMUL(inlet_y, param_Gy);  out2 = ___SMMLA(t, abs(t), out2);
  t = ___SMMUL(inlet_z, param_Gz);  out2 = ___SMMLA(t, abs(t), out2);
}
{
  bool neg;
  if(neg = (out2 < 0)) out2 = -out2;
  
  outlet_out = (int32_t)(s * out);
  
  s = neg ? -1.0f*(1<<17) 
          :  1.0f*(1<<17);
}]]></code.srate>
   </obj.normal>
</objdefs>