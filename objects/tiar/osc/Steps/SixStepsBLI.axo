<objdefs appVersion="1.0.12">
   <obj.normal id="SixStepsBLI" uuid="59979b1f-8fc8-414b-9e5a-1642748ca7ed">
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>SixStepsBLI.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch" description="pitch"/>
         <bool32 name="disable"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="out" description=""/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
         <frac32.s.map name="level0"/>
         <frac32.s.map name="level1"/>
         <frac32.s.map name="level2"/>
         <frac32.s.map name="level3"/>
         <frac32.s.map name="level4"/>
         <frac32.s.map name="level5"/>
      </params>
      <attribs/>
      <includes>
         <include>./tiar_bli_8_64.h</include>
      </includes>
      <code.declaration><![CDATA[int32_t y[8], seq[6], v, integ;
float  p, dp, _64dp;
uint8_t cpt;
uint8_t i;]]></code.declaration>
      <code.init><![CDATA[cpt = 0;
p = 0;
y[0]=y[1]=y[2]=y[3]=y[4]=y[5]=y[6]=y[7]=v=integ=0;
i = 0;]]></code.init>
      <code.krate><![CDATA[if(!inlet_disable){

int32_t idp;
MTOFEXTENDED(param_pitch + inlet_pitch, idp);
dp = 6.0f*(idp*(0.25f/(1<<30)));
if(dp > 1) dp = 1;
_64dp = 64.0f / dp;
seq[0] = param_level0 >> 9;
seq[1] = param_level1 >> 9;
seq[2] = param_level2 >> 9;
seq[3] = param_level3 >> 9;
seq[4] = param_level4 >> 9;
seq[5] = param_level5 >> 9;

}else for(int i=0; i < BUFSIZE; i++) outlet_out[i] = 0;]]></code.krate>
      <code.srate><![CDATA[if(!inlet_disable){

p += dp;         // phase increment
if(p >= 1.0f){    // phase above 1
  cpt++;          // next step in sequence
  if(cpt >= 6)    // above 6 => wrap to 0
    cpt = 0;
  p -= 1.0f;      // reset phase
  // select the band limited pulse according to subsample time since the transition
  const int16_t *t = tiar_bli_8_64 + (((uint32_t)(p * _64dp)) << 3); 
  int32_t g = seq[cpt] - v; // gain= the diff between the new step and the current value
  // add the selected band limited pulse to the output 8 taps
  for(int j = 0; j <= 7; j++){
    y[(i + j) & 7] += g * t[j];
  }
  v += g;   // now we can say that the value corresponds to the current step
}
outlet_out = integ += y[i]; // output integrator
y[i] = 0;
i = (i + 1) & 7;

}]]></code.srate>
   </obj.normal>
</objdefs>