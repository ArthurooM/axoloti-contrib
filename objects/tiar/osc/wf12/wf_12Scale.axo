<objdefs appVersion="1.0.12">
   <obj.normal id="wf_12Scale" uuid="d7cd2fd3-064a-4803-a37d-3e0db695611e">
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>wf_12Scale.axh</helpPatch>
      <inlets>
         <frac32.positive name="mod" description="rate"/>
         <frac32buffer.bipolar name="wf12" description="wf 12"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="wf12" description="wf 12"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="scale1"/>
         <frac32.u.map name="scale0"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t val(float x, const int32_t wf[]){
  int ix0 = (int)x;
  float fx = x - ix0;
  ix0 %= 12;
  return (int32_t)(wf[ix0] + fx * (wf[ix0 < 11 ? ix0 + 1 : 0] - wf[ix0]));
}]]></code.declaration>
      <code.init><![CDATA[
      ]]></code.init>
      <code.krate><![CDATA[float mod = inlet_mod * (1.0f/(1<<27));
if(mod < 0) mod = 0;
if(mod > 1) mod = 1;
float scale = param_scale0 + mod * (param_scale1 - param_scale0);
scale = 0.25f + scale * scale * ((5.75f/(1<<27) * (1.0f/(1<<27))));

for(int i = 0; i < 12; i++){
  outlet_wf12[i] = val(i * scale, inlet_wf12);
}]]></code.krate>
   </obj.normal>
</objdefs>