<objdefs appVersion="1.0.12">
   <obj.normal id="noiseSR" uuid="0837bae2-154c-45f6-a486-84d6f13b040b">
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>noiseSR.axh</helpPatch>
      <inlets/>
      <outlets>
         <frac32buffer.bipolar name="out"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[int32_t cChange = 1; // sample ratio change counter
int32_t csr = 1; // sample ratio counter
int32_t sr = 1; //sample ratio
int32_t _sr = 1<<27;

uint32_t urand = 137; //unsigned pseudo random generator (for periods)
int32_t rand;        //signed pseudo random gen (for audio)
int32_t curOut = 0;
int32_t deltaOut = 0;     // delta output for linear interpolation]]></code.declaration>
      <code.init><![CDATA[rand = GenerateRandomNumber();
urand = (uint32_t)GenerateRandomNumber();]]></code.init>
      <code.krate><![CDATA[cChange--;
// sample ratio change
if(cChange <= 0){
  sr = 4 + ((urand = urand * 69069 + 1)>>(32-2)); // random sample ratio 1..5
  _sr = arm::float_to_q(1.0f / sr, 27);
  cChange = 2 + ((urand = urand * 69069 + 1)>>(32-2)); // random change cycle
}]]></code.krate>
      <code.srate><![CDATA[csr--;  
if(csr <= 0){
  csr = sr;
  int32_t nextOut = (rand = rand * 69069 + 1)>>(31-27);
  deltaOut = ___SMMUL(nextOut - curOut, _sr)<<5; 
}
curOut += deltaOut;
outlet_out = curOut;
]]></code.srate>
   </obj.normal>
</objdefs>