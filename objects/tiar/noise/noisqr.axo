<objdefs appVersion="1.0.12">
   <obj.normal id="noisqr" uuid="558142f0-84d4-4f19-b994-7ec7de51a530">
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>noisqr.axh</helpPatch>
      <inlets>
         <bool32.rising name="newSeed"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="ring"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="nbOsc" noLabel="true">
            <MinValue i="2"/>
            <MaxValue i="8"/>
         </int32>
      </params>
      <attribs/>
      <code.declaration><![CDATA[static const int NB = 8;
int16_t p[NB];
int16_t c[NB];
int32_t s[NB];

int32_t r;

bool _newSeed = false;]]></code.declaration>
      <code.init><![CDATA[for(int j = 0; j < NB; j++){ c[j] = 0; s[j]= 1; }
r = GenerateRandomNumber();
for(int i = 0; i < NB; i++){
  r = r * 69069 + 1;
  p[i] = 150 + (r>>(31-7));  // +-128
}]]></code.init>
      <code.krate><![CDATA[if(!_newSeed && inlet_newSeed){
  for(int i = 0; i < NB; i++){
    r = r * 69069 + 1;
    p[i] = 150 + (r >> (31-7));  // +-128
  }
}
_newSeed = inlet_newSeed;]]></code.krate>
      <code.srate><![CDATA[int32_t r = 1;
for(int i = 0; i < param_nbOsc; i++){
  if(c[i]-- <= 0){
    c[i] = p[i];
    s[i] = -s[i];
  }
  r *= s[i];
}
outlet_ring = r << 26;]]></code.srate>
   </obj.normal>
</objdefs>