<objdefs appVersion="1.0.12">
   <obj.normal id="sigmo" uuid="3917aae2-154c-a5f6-a486-85d6f53b045b">
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>sigmo.axh</helpPatch>
      <inlets>
         <frac32 name="freq"/>
         <frac32 name="width"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="freq"/>
         <frac32.u.map name="width"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[const int32_t a = 1664525;    
const int32_t b = 1013904223;
int32_t r;
float alpha = 0;
float da = 1;
float x0, x1 = 0;]]></code.declaration>
      <code.init><![CDATA[r = GenerateRandomNumber();]]></code.init>
      <code.krate><![CDATA[float freq = arm::q_to_float(__USAT(inlet_freq + param_freq, 27),27);
freq = 0.005f+0.995f* freq*freq;

float width = 1-arm::q_to_float(__USAT(inlet_width + param_width, 27),27);
width = 0.99f*(1-width*width);]]></code.krate>
      <code.srate><![CDATA[alpha += da;
if(alpha >= 1){
  alpha -= 1;
  x0 = x1;
  x1 = arm::q_to_float(r = r * a + b, 31);
  da = arm::q_to_float(r = r * a + b, 31);
  if(da<0)da=-da;
  da = freq*(1.0f - width * da);
}
float sigmo = alpha * alpha * (3 - 2 * alpha);
outlet_out = arm::float_to_q(x0 + sigmo * (x1 - x0), 28);]]></code.srate>
   </obj.normal>
</objdefs>