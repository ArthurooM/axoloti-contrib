<objdefs appVersion="1.0.12">
   <obj.normal id="trrum" uuid="59c771c0-8d2c-4550-a8bd-2f99019d2dd3">
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>trrum.axh</helpPatch>
      <inlets/>
      <outlets>
         <frac32buffer.bipolar name="out"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[const int32_t A = 69069;
const int32_t B = -1511872763;

int32_t r;
uint8_t c = 0;]]></code.declaration>
      <code.init><![CDATA[r = GenerateRandomNumber();]]></code.init>
      <code.krate><![CDATA[c++;
if(c&1==0){
outlet_out[ 0] = (r = A * r + 1)>>4;
outlet_out[ 1] = r>>4;
outlet_out[ 2] = r>>4;
outlet_out[ 3] = r>>4;
outlet_out[ 4] = (r = A * r + 1)>>4;
outlet_out[ 5] = (r = B * (r - 1))>>4;
outlet_out[ 6] = r>>4;
outlet_out[ 7] = (r = A * r + 1)>>4;
outlet_out[ 8] = (r = A * r + 1)>>4;
outlet_out[ 9] = r>>4;
outlet_out[10] = r>>4;
outlet_out[11] = (r = B * (r - 1))>>4;
outlet_out[12] = (r = B * (r - 1))>>4;
outlet_out[13] = (r = B * (r - 1))>>4;
outlet_out[14] = (r = A * r + 1)>>4;
outlet_out[15] = (r = B * (r - 1))>>4;
} else {
outlet_out[ 0] = (r = A * r + 1)>>4;
outlet_out[ 1] = (r = A * r + 1)>>4;
outlet_out[ 2] = (r = A * r + 1)>>4;
outlet_out[ 3] = (r = A * r + 1)>>4;
outlet_out[ 4] = (r = A * r + 1)>>4;
outlet_out[ 5] = (r = B * (r - 1))>>4;
outlet_out[ 6] = r>>4;
outlet_out[ 7] = (r = B * (r - 1))>>4;
outlet_out[ 8] = (r = A * r + 1)>>4;
outlet_out[ 9] = (r = B * (r - 1))>>4;
outlet_out[10] = r>>4;
outlet_out[11] = (r = B * (r - 1))>>4;
outlet_out[12] = (r = B * (r - 1))>>4;
outlet_out[13] = (r = B * (r - 1))>>4;
outlet_out[14] = (r = B * (r - 1))>>4;
outlet_out[15] = r>>4;	
}]]></code.krate>
   </obj.normal>
</objdefs>