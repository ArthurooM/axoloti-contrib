<objdefs appVersion="1.0.12">
   <obj.normal id="scaleChord7" uuid="e047a7f1-78b1-42c6-809e-1de16039db3f">
      <sDescription>46-scale scaling and 137-temperaments chord-creatig module, but with a 1-key per note response like the factory harmony module (7 notes per octave)
This module creates chords of 4 notes to be able to control 4 oscillators at the same time in the same scaling, saves up a bit of memory and tidies up the patch.

Add the &quot;scale7bank&quot; module to provide the module the scale-list.
(Before first use, add the scale7generator once to create the list and auto-save it to the SD-card, the scale7bank then uses this file.
If you don&apos;t have a SD-card, you can use the generator module and refer to that module)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <int32 name="root"/>
         <int32 name="chord"/>
         <int32 name="invert"/>
         <int32 name="spread"/>
         <int32 name="key"/>
         <int32 name="scale"/>
         <int32 name="temper"/>
         <frac32 name="stretch"/>
      </inlets>
      <outlets>
         <frac32 name="n1"/>
         <frac32 name="n2"/>
         <frac32 name="n3"/>
         <frac32 name="n4"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <objref name="scale"/>
      </attribs>
      <code.declaration><![CDATA[int32_t out;
int key;
int scale;
int32_t STR;
int32_t temper;
int32_t N[4];
int P[4];
int i;
int32_t scalar(int NT){
int32_t pitch=NT+64;
int32_t octave=pitch/7;
int semitone=pitch-octave*7;
int32_t note=(attr_scale.note[semitone+scale]+octave*12)-112+key<<21;

int mn=(note+(1<<20)>>21)+8;
int32_t stretch=mn/12;
stretch=stretch*(STR>>9);
int oct=mn/12*12;
oct=mn<0?oct-12:oct;
mn=mn-oct;
int tmpr=temper;
tmpr=tmpr-tmpr/137*137;
tmpr+=tmpr<0?137:0;
tmpr=tmpr*12;
return out=attr_scale.TMPR[mn+tmpr]+note+stretch;
};
int S[26][4]={
{2,2,2,2},
{3,2,1,2},
{3,2,2,1},
{2,3,2,1},
{2,3,1,2},
{2,1,3,2},
{2,1,2,3},
{1,2,2,3},
{1,2,3,2},
{1,3,2,2},
{3,1,2,2},
{2,2,1,3},
{2,2,3,1},
{1,3,3,1},
{1,3,1,3},
{3,1,1,3},
{3,1,3,1},
{2,1,4,1},
{2,4,1,1},
{4,2,1,1},
{4,1,2,1},
{4,1,1,2},
{1,4,1,2},
{1,1,4,2},
{1,1,2,4},
{1,2,1,4}
};
int32_t T[26][3]={
{0,0,0},
{0,0,1},
{0,1,0},
{1,0,0},
{0,1,1},
{1,0,1},
{1,1,0},
{0,1,2},
{1,0,2},
{1,2,0},
{2,1,0},
{1,1,1},
{1,1,2},
{1,2,1},
{2,1,1},
{1,2,2},
{2,1,2},
{2,2,1},
{2,2,2},
{1,2,3},
{1,3,2},
{2,3,1},
{3,2,1},
{3,1,2},
{2,1,3},
{2,2,3},
};]]></code.declaration>
      <code.init><![CDATA[N[0]=0;
N[1]=0;
N[2]=0;
N[3]=0;]]></code.init>
      <code.krate><![CDATA[scale=inlet_scale;
scale=scale-scale/46*46;
scale=scale<0?scale+46:scale;
scale=scale*7;
int chord=inlet_chord;
chord=chord-chord/26*26;
chord=chord<0?chord+26:chord;
int spread=inlet_spread;
spread=spread-spread/26*26;
spread=spread<0?spread+26:spread;
P[0]=inlet_root;
P[1]=P[0]+S[chord][0]+T[spread][0]*3.5;
P[2]=P[1]+S[chord][1]+T[spread][1]*3.5;
P[3]=P[2]+S[chord][2]+T[spread][2]*3.5;

if(inlet_invert>0){
for(i=0;i<inlet_invert;i++){
int a=i&3;
P[a]+=7;
}
}
if(inlet_invert<0){
for(i=0;i<(-inlet_invert);i++){
int a=3-(i&3);
P[a]-=7;
}
}
key=(inlet_key)*7-4;
key=key-(key/12)*12;
key=key<0?key+12:key;
temper=inlet_temper;
STR=inlet_stretch;

N[0]=scalar(P[0]);
N[1]=scalar(P[1]);
N[2]=scalar(P[2]);
N[3]=scalar(P[3]);

outlet_n1=N[0];
outlet_n2=N[1];
outlet_n3=N[2];
outlet_n4=N[3];]]></code.krate>
   </obj.normal>
</objdefs>