<objdefs appVersion="1.0.10">
   <obj.normal id="deskmix3" uuid="3c0102c6-b41a-4bc5-bf4e-31c3397bf707">
      <sDescription>up to 8 input s-rate mixer, controlled remotely from the control modules (deskCtrl2 module, load this as many times as the channels you are using).

Features solo/mute/gain/pan/sendLvl/sendSelect for all channels-&gt;controlled with deskCtrl2 module.

unlike the deskmix2 module, where the whole code is written out, this version uses a for-loop, so it first counts the amount of control modules that are loaded and then only calculates the channels that are actually in use.
THOUGH! it does somehow ask 1% more.. something which I think, is really really weird..
This saves quite some lines of code, so if you just ran out of memory because the code gets too big, you might want to use this one instead of the deskmix2 module.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="1"/>
         <frac32buffer name="2"/>
         <frac32buffer name="3"/>
         <frac32buffer name="4"/>
         <frac32buffer name="5"/>
         <frac32buffer name="6"/>
         <frac32buffer name="7"/>
         <frac32buffer name="8"/>
      </inlets>
      <outlets>
         <frac32buffer name="L" description="mix out"/>
         <frac32buffer name="R"/>
         <frac32buffer name="send1"/>
         <frac32buffer name="send2"/>
         <frac32buffer name="send3"/>
         <frac32buffer name="send4"/>
         <frac32buffer name="send5"/>
         <frac32buffer name="send6"/>
         <frac32buffer name="send7"/>
         <frac32buffer name="send8"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map.gain name="volume"/>
         <frac32.u.map.gain name="send"/>
         <bool32.mom name="unmute"/>
         <bool32.mom name="unsolo"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t gain[8];
int solo[8];
int32_t in[8];
int32_t send[8];
int select[8];
int32_t pan[8];
int32_t ccomp[8];
int32_t Pan[8];
int32_t Ccomp[8];
int32_t Send[8];
int Solo;
int mod;
int i;
int32_t ACC[8];
int32_t MUTE;
int32_t SOLO;]]></code.declaration>
      <code.krate><![CDATA[int Solo=0;
for(i=0;i<mod;i++){
Solo+=solo[i];
Solo=Solo>0?1:0;}
for(i=0;i<mod;i++){
Ccomp[i]=((Solo>0)&(!solo[i]))?0:___SMMUL(ccomp[i]<<2,param_volume);
Pan[i]=((Solo>0)&(!solo[i]))?0:___SMMUL(pan[i]<<2,param_volume);
Send[i]=((Solo>0)&(!solo[i]))?0:___SMMUL(send[i]<<2,param_send);
}
MUTE=param_unmute;
SOLO=param_unsolo;]]></code.krate>
      <code.srate><![CDATA[in[0]=inlet_1<<3;
in[1]=inlet_2<<3;
in[2]=inlet_3<<3;
in[3]=inlet_4<<3;
in[4]=inlet_5<<3;
in[5]=inlet_6<<3;
in[6]=inlet_7<<3;
in[7]=inlet_8<<3;
int32_t sumL=0;
int32_t sumR=0;

for(i=0;i<mod;i++){
ACC[i]=0;
sumL += ___SMMUL(in[i],Ccomp[i]);
sumR += ___SMMUL(in[i],Pan[i]);
ACC[select[i]] += ___SMMUL(in[i],Send[i]);}

outlet_L=  sumL;
outlet_R=  sumR;
outlet_send1= ACC[0]<<1;
outlet_send2= ACC[1]<<1;
outlet_send3= ACC[2]<<1;
outlet_send4= ACC[3]<<1;
outlet_send5= ACC[4]<<1;
outlet_send6= ACC[5]<<1;
outlet_send7= ACC[6]<<1;
outlet_send8= ACC[7]<<1;]]></code.srate>
   </obj.normal>
</objdefs>