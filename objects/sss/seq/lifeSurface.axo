<objdefs appVersion="1.0.10">
   <obj.normal id="lifeSurface" uuid="9eaface9-d972-48bf-8970-dd5684d2e13c">
      <sDescription>This module reads out a 2D surface of the game of life module
The outcome is a scaled based upon how many coordinates are within the surface.
Each step has 4 possible values, 0,1,2,3, and all steps are added together, scaled to the total amount of steps*3 (*3 because each step has 3 as its highest value).
Using the min/max parameters, you can set the minimum and maximum output values.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <int32 name="Xs"/>
         <int32 name="Ys"/>
         <int32 name="Xe"/>
         <int32 name="Ye"/>
         <frac32 name="max"/>
         <frac32 name="min"/>
      </inlets>
      <outlets>
         <frac32 name="CV"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="Xs">
            <MinValue i="0"/>
            <MaxValue i="15"/>
         </int32>
         <int32 name="Ys">
            <MinValue i="0"/>
            <MaxValue i="15"/>
         </int32>
         <int32 name="Xe">
            <MinValue i="0"/>
            <MaxValue i="15"/>
         </int32>
         <int32 name="Ye">
            <MinValue i="0"/>
            <MaxValue i="15"/>
         </int32>
         <frac32.s.map name="max"/>
         <frac32.s.map name="min"/>
      </params>
      <attribs>
         <objref name="ref"/>
      </attribs>
      <code.declaration><![CDATA[int i;
int j;]]></code.declaration>
      <code.krate><![CDATA[int Xs=(param_Xs+inlet_Xs)&15;
int Xe=((param_Xe+inlet_Xe)-Xs)&15;
int Ys=(param_Ys+inlet_Ys)&15;
int Ye=((param_Ye+inlet_Ye)-Ys)&15;
int size=Xe*Ye*3;
int32_t temp=0; 
for(i=Xs;i<(Xe+Xs);i++){
for(j=Ys;j<(Ye+Ys);j++){
temp+=attr_ref.array[i][j];}
}
int32_t max=__SSAT(param_max+inlet_max,27);
int32_t min=__SSAT(param_min+inlet_min,27);
int32_t width=max-min;
outlet_CV=___SMMUL(((temp<<16)/size)<<14,width<<2)+min;]]></code.krate>
   </obj.normal>
</objdefs>