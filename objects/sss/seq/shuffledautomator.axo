<objdefs appVersion="1.0.10">
   <obj.normal id="shuffledautomator" uuid="fe0f4689-9fa5-448c-bf4a-43e732538132">
      <sDescription>enter the name of the table-allocation module (SDram!!) in the &quot;table&quot; entry.

Connect anything to the &quot;in&quot; input to use as a source to be recorded into the automation.
As soon as the &quot;in&quot; input changes, it&apos;s being recorded to the selected automation position after 6 steps. (reason now follows-&gt;)

To detect short &quot;stops&quot;, while it should keep recording, it keeps track of the latest 6 values. If at least one of the last 6 values is different from the others, it keeps recording.

Count input asks for a counter with a countlength between 0 to 128 steps. (128 steps is counting from 0 to 127). I advice to use my &quot;shufflingSequencer&quot; to provide both the &quot;count&quot; and &quot;normcount&quot; (it has these outputs for this reason)
This is used to read out the automation. You can use a normal counter or any other pattern generator to step through all the positions in the automation.

PresetRead can be used to automate the preset being read by the module.
PresetWrite can be used to automate the preset being written to by the module
tablevar can be used to automate the selected table in the preset to send to the var-output.

a trigger in the allload input will load all presets and automatically fills each table (used for automatic preset-load on startup or automated preset loading)

a trigger in the hold input will update the outputs to the value of the current table position.
Use the &quot;through&quot; switch to make the signal continuous (then no trigger is needed)

Use the normcount to feed the automation recorder a &quot;normal&quot; counting signal (0 to 127). This way you&apos;re sure that you&apos;re recording to the right positions. Of course, you can also connect the same signal as the count input, but if this generates a pseudo-random count, automation wont be recorded fluently. Also, this normcount is used to drive the position-indicator. Due to the way it updates, you won&apos;t be able to make up your recording in the display!

Controls:
tableread: sets which table you are currently updating to the display and will be recorded to when changing the &quot;in&quot; input.

tablevar: selects an automation from one of the 8 tables to feed to the var output.

presetread: sets preset to read from when loading presets.
presetwrite: sets preset to write to when saving presets.
save: saves currently selected table into the currently selected presetwrite position of the table allocator.
load: loads currently selected table from the currently selected presetwrite position of the table allocator.
allsave: saves ALL automation in a single preset to the table allocator
allload: loads ALL automation in a single preset to the internal automation

posplay: shows position indicator of the automation recorded (normcount)
through: when on, outputs continuously update. When off, a trigger is needed at the hold-input to update outputs.</sDescription>
      <author>Remco van der most</author>
      <license>BSD</license>
      <inlets>
         <frac32.bipolar name="in" description="connect a slider/knob/button or anything else to record your automation from"/>
         <int32 name="count" description="connect the &quot;readout&quot; counter, this can be any pattern generator"/>
         <int32 name="presetRead"/>
         <int32 name="presetWrite"/>
         <int32 name="tablevar"/>
         <bool32.risingfalling name="allload"/>
         <bool32.risingfalling name="hold"/>
         <int32 name="normcount" description="connect to a &quot;normal&quot; counter, going from 0 to 127 (counter max = 128), this drives the position indicator"/>
      </inlets>
      <outlets>
         <frac32 name="t1"/>
         <frac32 name="t2"/>
         <frac32 name="t3"/>
         <frac32 name="t4"/>
         <frac32 name="t5"/>
         <frac32 name="t6"/>
         <frac32 name="t7"/>
         <frac32 name="t8"/>
         <frac32 name="var"/>
      </outlets>
      <displays>
         <int8array128.vbar name="scope1" noLabel="true"/>
      </displays>
      <params>
         <int32.hradio name="tableRead">
            <MaxValue i="8"/>
         </int32.hradio>
         <int32.hradio name="tablevar" description="selects a table for the vartable output">
            <MaxValue i="8"/>
         </int32.hradio>
         <int32 name="presetRead" description="sets preset, which automation is load from in the table allocator">
            <MinValue i="0"/>
            <MaxValue i="0"/>
         </int32>
         <int32 name="presetWrite" description="sets preset,which automation is writed to in the table allocator">
            <MinValue i="0"/>
            <MaxValue i="0"/>
         </int32>
         <bool32.mom name="save" description="saves a single (selected) table to the table allocator preset"/>
         <bool32.mom name="load" description="loads a single (selected) table from the table allocator preset"/>
         <bool32.mom name="allsave" description="saves all 8 automations to the table allocator preset"/>
         <bool32.mom name="allload" description="loads all 8 automations from the table allocator preset"/>
         <bool32.tgl name="posplay" description="when on, shows automation recording position"/>
         <bool32.tgl name="through" description="When on, sends out automation at each trigger. When off, onlyupdates output when hold input receives a trigger"/>
      </params>
      <attribs>
         <objref name="table"/>
      </attribs>
      <code.declaration><![CDATA[int8_t t[1024];
int index;
int i;
int cnt;
int32_t prev1;
int32_t prev2;
int32_t prev3;
int32_t prev4;
int32_t prev5;
int32_t prev6;
int c1t;
int c2t;
int cprev;
int ctrg;
int record;
int32_t prav;
int32_t aprev;
int strig;
int ltrig;
int astrig;
int altrig;
int htrig;
int table;
int cat;
int hold;
int allsave;
int allload;
int Htrig;]]></code.declaration>
      <code.init><![CDATA[
for(i=0;i<128;i++)
{t[i]=0;}
index = 0;
i=0;]]></code.init>
      <code.krate><![CDATA[int Cnt=inlet_normcount&127;

if((inlet_hold>0)&& (!(htrig==1)))
{htrig=1;
hold=1;}
else
{hold=0;
if (!(inlet_hold>0)) htrig=0;}

cnt=inlet_count&127;
if(!(cnt==cprev)) ctrg=1;
else ctrg=0;

record=((!(inlet_in==prev1))+(!(inlet_in==prev2))+(!(inlet_in==prev3))+(!(inlet_in==prev4))+(!(inlet_in==prev5))+(!(inlet_in==prev6)));

//if record is on
if(record>0)
prav=prav+((inlet_in-prav)>>record*2);
else
prav=prav+((t[Cnt+table*128]-prav)>>1);

//preset read determinants
int automationRead=(inlet_presetRead+param_presetRead)<<10;
int automationWrite=(inlet_presetWrite+param_presetWrite)<<10;
table=param_tableRead;

//record to table
if(record>0)
{
	c2t=(Cnt-6)&127;
	t[c2t+(table*128)]=(prev6)>>21;}

//saving/loading to table
int save=param_save;
int load=param_load;
allload=inlet_allload+param_allload;
allsave=param_allsave;
//

//single save to table
if((save>0)&&(!(strig==1)))
{
	strig=1;
	for(i=0;i<128;i++)
{attr_table.array[i+automationWrite+(table*128)]=t[i+(table*128)];}}
else if (!(save>0)) {strig=0;}
//

//single load from table
if((allload>0)&&(!(ltrig==1)))
{
	ltrig=1;
	for(i=0;i<1024;i++)
{t[i+(table*128)]=attr_table.array[i+automationRead+(table*128)];}}
else if (!(load>0)) {ltrig=0;}
//


//allsave to table
if((allsave>0)&&(!(astrig==1)))
{
	astrig=1;
	for(i=0;i<1024;i++)
{attr_table.array[i+automationWrite]=t[i];}}
else if (!(allsave>0)) {astrig=0;}
//

//allload from table
if((allload>0)&&(!(altrig==1)))
{
	altrig=1;
	for(i=0;i<1024;i++)
{t[i]=attr_table.array[i+automationRead];}}
else if (!(allload>0)) {altrig=0;}
//


//create scope
if(ctrg>0)
{c1t=(Cnt-6)&127;
disp_scope1[c1t]=t[c1t+(table*128)];
if(param_posplay>0){
disp_scope1[(Cnt-5)&127]=128;}}
//

if(ctrg>0){
prev6=prev5;
prev5=prev4;
prev4=prev3;
prev3=prev2;
prev2=prev1;
prev1=inlet_in;}
cprev=cnt;
aprev=automationRead;

if(record>0)
cat=((cnt-6)&127);
else
cat=cnt;
if(((inlet_hold>0)&&(!(Htrig==1)))||(param_through>0)){
outlet_t1=(int32_t(t[cat]))<<21;
outlet_t2=(int32_t(t[cat+(1<<7)]))<<21;
outlet_t3=(int32_t(t[cat+(2<<7)]))<<21;
outlet_t4=(int32_t(t[cat+(3<<7)]))<<21;
outlet_t5=(int32_t(t[cat+(4<<7)]))<<21;
outlet_t6=(int32_t(t[cat+(5<<7)]))<<21;
outlet_t7=(int32_t(t[cat+(6<<7)]))<<21;
outlet_t8=(int32_t(t[cat+(7<<7)]))<<21;
int var=(inlet_tablevar+param_tablevar)&7;
outlet_var=(int32_t(t[cnt+(var<<7)]))<<21;
Htrig=1;
}
else if(!(inlet_hold>0))
{Htrig=0;}]]></code.krate>
   </obj.normal>
</objdefs>