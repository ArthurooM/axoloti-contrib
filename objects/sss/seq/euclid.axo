<objdefs appVersion="1.0.10">
   <obj.normal id="euclid" uuid="98283bd0-9642-4d37-ad20-d1fe57e5a91e">
      <sDescription>euclidian sequencer</sDescription>
      <author>Remco  van der Most</author>
      <license>BSD</license>
      <inlets>
         <int32 name="count"/>
         <bool32 name="update"/>
      </inlets>
      <outlets>
         <bool32 name="out1"/>
      </outlets>
      <displays>
         <int32.label name="mainstep"/>
         <int32.label name="ratioA"/>
         <int32.label name="ratioB"/>
         <int32.label name="stepsOn"/>
         <int32.label name="maxcount"/>
      </displays>
      <params>
         <int32 name="start1">
            <MinValue i="0"/>
            <MaxValue i="16"/>
         </int32>
         <frac32.u.map name="step1"/>
         <frac32.u.map name="ratio1"/>
         <frac32.u.map name="steps"/>
         <int32 name="countmax">
            <MinValue i="0"/>
            <MaxValue i="10"/>
         </int32>
         <bool32.mom name="update"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t array[1024];
int i;
int32_t prev;
int ttrig;]]></code.declaration>
      <code.krate><![CDATA[uint32_t step1c=___SMMUL(param_step1<<3,((1<<param_countmax)-1)<<2)+1;
uint32_t step1a=___SMMUL(param_ratio1<<3,step1c<<2);
uint32_t step1b=step1c-step1a;
if(((param_update+inlet_update)>0)&&(!(ttrig==1)))
{ttrig=1;
for(i=0;i<(1<<param_countmax);i++){
array[(((((((1<<param_countmax)-1)-i)/2)*step1b)+(((((1<<param_countmax)-1)-i)+1)/2)*step1a)+param_start1)&((1<<param_countmax)-1)]=i>(((1<<param_countmax)-1)-(___SMMUL(param_steps<<3,((1<<param_countmax)-1)<<2)))?1:0;}}
else if(!((param_update+inlet_update)>0)){ttrig=0;}
outlet_out1=array[(inlet_count)&((1<<param_countmax)-1)]&&(!(prev==inlet_count));
prev=inlet_count;
disp_stepsOn=___SMMUL(param_steps<<3,((1<<param_countmax))<<2)+1;
disp_mainstep=step1c;
disp_ratioA=step1a;
disp_ratioB=step1b;
disp_maxcount=1<<param_countmax;]]></code.krate>
   </obj.normal>
</objdefs>