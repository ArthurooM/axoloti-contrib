<objdefs appVersion="1.0.12">
   <obj.normal id="64stp_4ch_Prst_Seq" uuid="6ff4ae81-0512-4c5d-b07f-bd914954d257">
      <sDescription>Trigger sequencer with up to 64 steps.
-&quot;table&quot;: enter the table-name here. (use table save/load to actually save the presets to your SDRAM card! IF YOU DON&apos;T, YOU WILL LOOSE YOUR PROGRAMMED RHYTHM!!!)
-&quot;channel&quot;: 4 (drum) trigger channels to program
-&quot;preset&quot;: depending on table size, you can save lots of rhythm presets.
-&quot;barlength&quot;: sets amount of steps per bar (normal=16)
-selectbar: select which bar you want to edit (1 to 4)
-&quot;bars&quot;: sets max amount of bars (4 max)

inputs&amp;outputs:
-connect a trigger/LFO source to &quot;trig&quot; input and set the desired rate on that module.
-&quot;r&quot; input resets the counter
-&quot;v&quot; input is the value to be entered on a position in the sequence.
-&quot;add&quot; input asks for a trigger to save the v-input value to the selected position in the sequence.
-&quot;select&quot; input selects position in the sequence where the data should be recorded.

For a bit more easy control with entering gates, use the controller object (same map)!

-&quot;maxcount&quot; outputs the maximum count
-o1 to 04 output short triggers (not one-step-long gates!)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>table.axh</helpPatch>
      <rotatedParams>true</rotatedParams>
      <inlets>
         <bool32.rising name="trig"/>
         <bool32 name="r"/>
         <frac32 name="v"/>
         <bool32.rising name="add"/>
         <int32 name="select"/>
      </inlets>
      <outlets>
         <bool32.pulse name="o1"/>
         <bool32.pulse name="o2"/>
         <bool32.pulse name="o3"/>
         <bool32.pulse name="o4"/>
         <int32 name="maxcount"/>
         <int32 name="count"/>
      </outlets>
      <displays>
         <bool32 name="01" noLabel="true"/>
         <bool32 name="02" noLabel="true"/>
         <bool32 name="03" noLabel="true"/>
         <bool32 name="04" noLabel="true"/>
         <bool32 name="05" noLabel="true"/>
         <bool32 name="06" noLabel="true"/>
         <bool32 name="07" noLabel="true"/>
         <bool32 name="08" noLabel="true"/>
         <bool32 name="09" noLabel="true"/>
         <bool32 name="10" noLabel="true"/>
         <bool32 name="11" noLabel="true"/>
         <bool32 name="12" noLabel="true"/>
         <bool32 name="13" noLabel="true"/>
         <bool32 name="14" noLabel="true"/>
         <bool32 name="15" noLabel="true"/>
         <bool32 name="16" noLabel="true"/>
         <int32.bar16 name="position"/>
      </displays>
      <params>
         <int32.hradio name="channel">
            <MaxValue i="4"/>
         </int32.hradio>
         <int32 name="preset">
            <MinValue i="0"/>
            <MaxValue i="16"/>
         </int32>
         <int32 name="barlength">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <int32.hradio name="selectbar">
            <MaxValue i="4"/>
         </int32.hradio>
         <int32 name="bars">
            <MinValue i="1"/>
            <MaxValue i="4"/>
         </int32>
      </params>
      <attribs>
         <objref name="table"/>
      </attribs>
      <code.declaration><![CDATA[int ntrig;
int32_t pcount;
   int strig;
   int rtrig;
   int count;
  int32_t maxcount;]]></code.declaration>
      <code.init><![CDATA[ntrig = 0;
    count=0;
   strig = 0;
   rtrig = 0;]]></code.init>
      <code.krate><![CDATA[maxcount=param_barlength*param_bars;
if ((inlet_trig>0) && !strig) {
   count += 1; if (count>=maxcount) {count = 0;}
   strig=1;
}
else if (!(inlet_trig>0)) strig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;}
else if (!(inlet_r>0)) rtrig=0;

int32_t addbar=(count>>4)<<4;

int TRIG=count!=pcount?1:0;
int32_t bor=param_selectbar*16;
int32_t select=inlet_select+param_channel*64+param_preset*256+bor;
   
   if ((inlet_add>0) && !ntrig) {
      ntrig=1;
      if (select<attr_table.LENGTH)
         attr_table.array[select]=__SSAT(inlet_v,28)>>attr_table.GAIN;
   }
   if (!(inlet_add>0)) ntrig=0;

int32_t readA=count+param_preset*256;
   outlet_o1= (attr_table.array[__USAT(readA,attr_table.LENGTHPOW)]<<attr_table.GAIN) && TRIG;
   outlet_o2= (attr_table.array[__USAT(readA+64,attr_table.LENGTHPOW)]<<attr_table.GAIN) && TRIG;
   outlet_o3= (attr_table.array[__USAT(readA+128,attr_table.LENGTHPOW)]<<attr_table.GAIN) && TRIG;
   outlet_o4= (attr_table.array[__USAT(readA+192,attr_table.LENGTHPOW)]<<attr_table.GAIN) && TRIG;



disp_position=count-addbar;
int32_t readB=param_channel*64+param_preset*256+bor+addbar;
disp_01=attr_table.array[__USAT(readB,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_02=attr_table.array[__USAT(readB+1,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_03=attr_table.array[__USAT(readB+2,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_04=attr_table.array[__USAT(readB+3,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_05=attr_table.array[__USAT(readB+4,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_06=attr_table.array[__USAT(readB+5,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_07=attr_table.array[__USAT(readB+6,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_08=attr_table.array[__USAT(readB+7,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_09=attr_table.array[__USAT(readB+8,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_10=attr_table.array[__USAT(readB+9,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_11=attr_table.array[__USAT(readB+10,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_12=attr_table.array[__USAT(readB+11,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_13=attr_table.array[__USAT(readB+12,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_14=attr_table.array[__USAT(readB+13,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_15=attr_table.array[__USAT(readB+14,attr_table.LENGTHPOW)]<<attr_table.GAIN;
disp_16=attr_table.array[__USAT(readB+15,attr_table.LENGTHPOW)]<<attr_table.GAIN;

pcount=count;
outlet_count=count;]]></code.krate>
   </obj.normal>
</objdefs>