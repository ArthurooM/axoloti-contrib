<objdefs appVersion="1.0.10">
   <obj.normal id="ADloopR" uuid="b14a56b0-c76b-4952-a288-f7420eed3f1f">
      <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
      <author>Johannes Taelman (edited by Remco van der Most)</author>
      <license>BSD</license>
      <helpPatch>env.axh</helpPatch>
      <inlets>
         <bool32.risingfalling name="gate" description="gate"/>
         <frac32.bipolar name="a" description="attack time modulation"/>
         <frac32.bipolar name="d" description="decay time modulation"/>
         <frac32.bipolar name="s1" description="sustail level1 modulation"/>
         <frac32.bipolar name="ds1"/>
         <frac32.bipolar name="s2" description="sustail level2 modulation"/>
         <frac32.bipolar name="ds2"/>
         <frac32.bipolar name="r" description="release time modulation"/>
      </inlets>
      <outlets>
         <frac32.positive name="env" description="envelope output"/>
         <int32 name="stage"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="a"/>
         <frac32.s.map name="d"/>
         <frac32.u.map name="s1"/>
         <frac32.s.map name="ds1"/>
         <frac32.u.map name="s2"/>
         <frac32.s.map name="ds2"/>
         <frac32.s.map name="r"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
      <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
      <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      stage = 2;
   }
} else if (stage == 2) {
   int64_t s1 = __USAT(param_s1 + inlet_s1, 27);
   int32_t de;
   MTOF(- param_d - inlet_d, de);
   de = 0x7FFFFFFF - (de >> 2);
   val = (s1<<4) + (___SMMUL(val - (s1<<4),de)<<1);
   if((val>=((s1<<4)-10000000))&&(val<=((s1<<4)+10000000)))
   {stage=3;}
}
else if (stage == 3) {
   int64_t s2 = __USAT(param_s2 + inlet_s2, 27);
   int32_t ds1;
   MTOF(- param_ds1 - inlet_ds1, ds1);
   ds1 = 0x7FFFFFFF - (ds1 >> 2);
   val = (s2<<4) + (___SMMUL(val - (s2<<4),ds1)<<1);
   if((val>=((s2<<4)-10000000))&&(val<=((s2<<4)+10000000)))
   {stage=4;}
}
else if (stage == 4) {
   int64_t s1 = __USAT(param_s1 + inlet_s1, 27);
   int32_t ds2;
   MTOF(- param_ds2 - inlet_ds2, ds2);
   ds2 = 0x7FFFFFFF - (ds2 >> 2);
   val = (s1<<4) + (___SMMUL(val - (s1<<4),ds2)<<1);
   if((val>=((s1<<4)-10000000))&&(val<=((s1<<4)+10000000)))
   {stage=3;}
}


outlet_env = val>>4;
outlet_stage=stage;]]></code.krate>
   </obj.normal>
</objdefs>