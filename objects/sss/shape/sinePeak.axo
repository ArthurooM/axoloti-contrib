<objdefs appVersion="1.0.11">
   <obj.normal id="sinePeak" uuid="bb25c982-da43-458f-bc58-c565ef1e1797">
      <sDescription>adds a &quot;sined peak&quot; to the phase (incoming signal).
Peak is a triangle converted by an exponential curve (stackable for tighter peak) and then goes through a sine-shaper to round of the peak.
offset: controls the position of the peak
strength: controls the tightness of the peak (the higher, the thinner)
level: controls the hight of the peak.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="in"/>
         <frac32 name="offset"/>
         <frac32 name="strength"/>
         <frac32 name="level"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="offset"/>
         <frac32.u.map name="strength"/>
         <frac32.s.map name="level"/>
         <int32 name="stack">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int i;
int32_t pEXP;
int32_t sEXP;
int32_t pMOD;
int32_t sMOD;
int32_t sOFS;
int32_t pOFS;]]></code.declaration>
      <code.krate><![CDATA[int32_t EXP=param_strength+inlet_strength;
int32_t MOD=param_level+inlet_level;
int32_t OFS=param_offset+inlet_offset;

   sEXP = (EXP - pEXP)>>4;
   int32_t S1 = pEXP;
   pEXP = EXP;
   
   sMOD = (MOD - pMOD)>>4;
   int32_t S2 = pMOD;
   pMOD = MOD;

   sOFS = (OFS - pOFS)>>4;
   int32_t S3 = pOFS;
   pOFS = OFS;]]></code.krate>
      <code.srate><![CDATA[S1 += sEXP;
S2 += sMOD;
S3 += sOFS;


int32_t pos=(inlet_in-S3 )&((1<<27)-1);
pos=pos>(1<<26)?(1<<27)-pos:pos;
pos=pos<<1;
int32_t tmp=pos;
int32_t strength=(1<<27)-S1+___SMMUL(pos<<3,S1<<2);
for(i=0;i<param_stack;i++){
pos=___SMMUL(pos<<3,strength<<2);}

int32_t sine;
SINE2TINTERP((pos<<4)-(1<<30),sine)
pos=(sine>>5)+(1<<26);
outlet_out=inlet_in+___SMMUL(S2<<3,pos<<2);]]></code.srate>
   </obj.normal>
</objdefs>