<objdefs appVersion="1.0.10">
   <obj.normal id="wrapper" uuid="4483220b-db6e-4c10-86cf-8d7670c13c47">
      <sDescription>Folds back the signal when it passes the &quot;width&quot; value and scales back the result to normal range.
&quot;mix&quot; mixes between original and changed signal</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="in"/>
         <frac32 name="width"/>
         <frac32 name="mix"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="width"/>
         <frac32.u.map name="mix"/>
      </params>
      <attribs/>
      <code.krate><![CDATA[float32_t scaleback=((float32_t)(1<<27))/((float32_t)(param_width+inlet_width));
int32_t width0=param_width+inlet_width;
int32_t width1=(param_width+inlet_width)<<1;
int32_t width2=(param_width+inlet_width)<<2;
int32_t mix=(param_mix+inlet_mix);
mix=mix>0?mix:-mix;
mix=mix>(1<<27)?(2<<27)-mix:mix;
int32_t miix=mix<<3;
mix=((1<<27)-mix)<<3;]]></code.krate>
      <code.srate><![CDATA[int32_t shift=inlet_in+width0;
shift=shift>0?shift:-shift;
int32_t wrap=shift-((shift/width2)*width2);
int32_t bounce=wrap>width1?(width2-wrap):wrap;
outlet_out=___SMMUL(miix,((((int32_t)((bounce-width0)*scaleback)))<<2))+___SMMUL(mix,inlet_in<<2);
]]></code.srate>
   </obj.normal>
</objdefs>