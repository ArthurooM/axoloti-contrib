<objdefs appVersion="1.0.12">
   <obj.normal id="SHmix" uuid="621a2cae-c3cb-40e7-8247-6f2c6dc94b5d">
      <sDescription>Mixing S&amp;H modulator
internal phase-oscillator holds the last value on the &quot;in&quot; input when returning to the start of the phase.
While phase goes up, it mixes in the incoming signal.
PW controls the point where the mix-in starts.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>phasor.axh</helpPatch>
      <inlets>
         <frac32 name="pitch" description="pitch"/>
         <frac32buffer name="in" description="phase increment"/>
         <frac32 name="freq"/>
      </inlets>
      <outlets>
         <frac32buffer.positive name="wave" description="phasor wave"/>
         <frac32buffer name="p"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="octave"/>
         <frac32.u.map.squaregain name="morph"/>
         <frac32.u.map name="pw"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[uint32_t Phase;
int32_t SQR;
int32_t val;
uint32_t prv;]]></code.declaration>
      <code.init><![CDATA[Phase = 0;]]></code.init>
      <code.krate><![CDATA[uint32_t freq;
   MTOFEXTENDED(((param_octave>>24)*12<<21) + inlet_pitch,freq);
uint32_t F;
F=___SMMUL(param_morph,param_morph)>>9;
   freq+=inlet_freq+F;
   float32_t ratio;
   int32_t pw=param_pw;
   ratio=(float32_t)(1<<27)/((1<<27)-pw)*32;]]></code.krate>
      <code.srate><![CDATA[Phase += freq ;

uint32_t p2=Phase>>5;
p2=p2>pw?p2-pw:0;
p2=p2*ratio;


if(Phase<prv){
SQR=inlet_in;}
int32_t phasor = SQR+___SMMUL(inlet_in-SQR<<1,p2>>1);
val+=(phasor-val)>>9;
outlet_wave=phasor-val;
prv=Phase;
outlet_p=p2>>4;]]></code.srate>
   </obj.normal>
</objdefs>