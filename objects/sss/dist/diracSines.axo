<objdefs appVersion="1.0.10">
   <obj.normal id="diracSines" uuid="b4034387-bbd8-4c37-b4c7-d5e5b871619a">
      <sDescription>Dual sine generator, using the positive dirac-difference part of the incoming audio for generating a &quot;sine&quot; for output1 and the negative direc-difference for generating a &quot;sine&quot; for output2.

you can mix the outputs with the original audio for sine-based wave-distortion</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>osc.axh</helpPatch>
      <inlets>
         <frac32buffer name="phase" description="phase"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="1" description="sine wave"/>
         <frac32buffer name="2"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="rate">
            <MinValue i="0"/>
            <MaxValue i="21"/>
         </int32>
         <frac32.s.map name="1"/>
         <frac32.s.map name="2"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[uint32_t Phase1;
uint32_t Phase2;
int32_t diff;
int32_t prev;]]></code.declaration>
      <code.krate><![CDATA[
]]></code.krate>
      <code.srate><![CDATA[int32_t in=inlet_phase<<5;
diff=(in-prev)<<param_rate;
Phase1+=diff>0?___SMMUL(diff<<4,param_1<<4):0;
Phase2-=diff<0?___SMMUL(diff<<4,param_2<<4):0;
int32_t r;

SINE2TINTERP(Phase1,r)
outlet_1= r>>5;
SINE2TINTERP(Phase2,r)
outlet_2=(r>>5);
prev=in;]]></code.srate>
   </obj.normal>
</objdefs>