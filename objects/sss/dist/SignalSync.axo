<objdefs appVersion="1.0.12">
   <obj.normal id="signalSync" uuid="32ea311c-54dc-4696-a19b-b4c767d047ad">
      <sDescription>auto-sync modulator
connect the sync-signal (any audio signal going from negative to positive) to the sync-input.
Any signal at the in-input will put into the buffer and it is reminded at which point in the buffer the in-input went from negative to positive.

Whenever the sync input goes positive, the buffer will be read out from the last zero-crossing within the buffer, auto syncing that signal to the sync signal.

Useful for AM-synthesis with signals/oscillators that don&apos;t have a hard-sync.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="wave input"/>
         <frac32buffer name="sync"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
uint32_t cnt;
uint32_t Time;
bool trg;
uint32_t pos;
bool Trg;
uint32_t set;
uint32_t env;
uint32_t form;
int32_t left;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;]]></code.init>
      <code.srate><![CDATA[writepos = (writepos + 1)&LENGTHMASK;
array[writepos] = __SSAT(inlet_in>>14,16);
cnt+=1;
if((inlet_in>0)&&!trg){
	trg=1;
	cnt=0;
}
else if(inlet_in<=0){trg=0;}
env-=env>>2;
left-=left>>3;
if((inlet_sync>0)&&!Trg){
left+=___SMMUL(env,array[(writepos-form)&LENGTHMASK]<<16);
Trg=1;
form=set;
set=cnt;
env=(1<<30);
}
else if(inlet_sync<=0){Trg=0;}

outlet_out=___SMMUL((1<<30)-env,array[(writepos-set)&LENGTHMASK]<<16);
outlet_out+=___SMMUL(env,array[(writepos-form)&LENGTHMASK]<<16)+left;]]></code.srate>
   </obj.normal>
</objdefs>