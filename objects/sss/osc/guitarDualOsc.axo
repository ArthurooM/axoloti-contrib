<objdefs appVersion="1.0.11">
   <obj.normal id="guitarDualOsc" uuid="0ffdcad9-b082-448c-b51b-7cb8d2479648">
      <sDescription>this is the module to use with the guitarTable module in a polyphonic synthesizer.
The guitarTable module will create a complex waveform and this module is able to play that waveform. This was needed, otherwise, in a polyphonic setting, each module would create it&apos;s own table, filling up the available memory really quickly.

-features pulsewidth, start-shift (start) and pick-up (mod) modulation, all extern controllable. (though these are all only approximations to the changes made by the &quot;fixed settings&quot;, reshaping the wavetable)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>osc.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch" description="pitch"/>
         <frac32 name="pwm"/>
         <frac32 name="mod"/>
         <frac32 name="start"/>
         <frac32 name="sync"/>
         <int32 name="rateM"/>
         <int32 name="rateD"/>
         <int32 name="preset1"/>
         <int32 name="preset2"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="wave" description="sine wave"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
         <int32 name="harm2nd">
            <MinValue i="1"/>
            <MaxValue i="64"/>
         </int32>
         <int32 name="rateM">
            <MinValue i="0"/>
            <MaxValue i="64"/>
         </int32>
         <int32 name="rateD">
            <MinValue i="1"/>
            <MaxValue i="64"/>
         </int32>
         <frac32.u.map name="pwm"/>
         <frac32.u.map name="mod"/>
         <frac32.u.map name="start"/>
         <int32 name="preset1">
            <MinValue i="0"/>
            <MaxValue i="1024"/>
         </int32>
         <int32 name="preset2">
            <MinValue i="0"/>
            <MaxValue i="1024"/>
         </int32>
         <bool32.tgl name="link"/>
      </params>
      <attribs>
         <objref name="table"/>
      </attribs>
      <code.declaration><![CDATA[uint32_t phase;
int i;
uint32_t LFO;
int32_t rate;

float32_t A;
float32_t B;
uint32_t PM;
uint32_t Pm;
   int32_t prev1;
   int32_t prev2;
   int32_t prev3;
   float32_t prev4;
   float32_t prev5;
   int32_t step1;
   int32_t step2;
   int32_t step3;
   float32_t step4;
   float32_t step5;
   int strig;
   uint32_t count;
   uint32_t timer;]]></code.declaration>
      <code.init><![CDATA[phase=0;]]></code.init>
      <code.krate><![CDATA[int32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,freq)
PM=param_pwm+inlet_pwm;
PM=PM>0?PM:-PM;
PM=PM&((1<<28)-1);
PM=PM>(1<<27)?(2<<27)-PM:PM;
PM=__USAT(PM+1,27)<<4;
A=((float32_t)(1<<31))/((float32_t)(PM<<1));
B=((float32_t)(1<<31))/((float32_t)(((1<<31)-PM)<<1));
PM=PM<<1;
int32_t mod1=param_mod+inlet_mod;
mod1=mod1>0?mod1:-mod1;
mod1=mod1&((1<<28)-1);
mod1=mod1>(1<<27)?(2<<27)-mod1:mod1;
mod1=mod1<<4;
int32_t mod2;
mod2=mod1*3;

int32_t Start=param_start+inlet_start;
Start=Start>0?Start:-Start;
Start=Start&((1<<28)-1);
Start=Start>(1<<27)?(2<<27)-Start:Start;

   step1 = ((((int32_t)(PM))+(1<<31)) - prev1)>>4;
   int32_t i1 = prev1;
   prev1 = ((int32_t)(PM))+(1<<31);

   step2 = (mod1 - prev2)>>4;
   int32_t i2 = prev2;
   prev2 = mod1;

   step3 = (Start - prev3)>>4;
   int32_t i3 = prev3;
   prev3 = Start;

   step4 = (A - prev4)/(float32_t)16;
   float32_t i4 = prev4;
   prev4 = A;

   step5 = (B - prev5)/(float32_t)16;
   float32_t i5 = prev5;
   prev5 = B;

   int rateM=param_rateM+inlet_rateM;
   int rateD=param_rateD+inlet_rateD;
   int preset1=param_preset1+inlet_preset1;


   int preset2=param_preset2+inlet_preset2+preset1*param_link;
   preset2=preset2-(preset2/attr_table.presets)*attr_table.presets;
   preset2=preset2<0?preset2+attr_table.presets:preset2;
   preset2=preset2*attr_table.LENGTH;
   
   preset1=preset1-(preset1/attr_table.presets)*attr_table.presets;
   preset1=preset1<0?preset1+attr_table.presets:preset1;
   preset1=preset1*attr_table.LENGTH;]]></code.krate>
      <code.srate><![CDATA[if((inlet_sync>0)&&!strig){
	timer=((1<<31)/count)<<1;
	count=0;
	strig=1;
}
else if(inlet_sync<=0){strig=0;}
count+=1;

uint32_t Phase;
phase += freq;
LFO+=timer*rateM/rateD;
uint32_t PHase=phase;
if(phase<(1<<31)){
PHase=___SMMUL(phase,i3<<4)<<2;
}
else{
PHase=(___SMMUL(phase,((1<<27)-i3)<<4)<<2);
}

if(PHase<Pm){
Phase=(1<<31)+((int32_t)(PHase*i4))+i2;}
if(PHase>=Pm){Phase=((uint32_t)((PHase-Pm)*i5-(1<<31)))+i2+(1<<31);}

outlet_wave=attr_table.array[((Phase>>32-attr_table.LENGTHPOW)&attr_table.LENGTHMASK)+preset1];
outlet_wave+=attr_table.array[((((Phase*param_harm2nd)+LFO)>>32-attr_table.LENGTHPOW)&attr_table.LENGTHMASK)+preset2]/(1+(param_harm2nd-1)/2);

   i1 += step1;
   i2 += step2;
   i3 += step3;
   i4 += step4;
   i5 += step5;

Pm=(uint32_t)(i1)+(1<<31);]]></code.srate>
   </obj.normal>
</objdefs>