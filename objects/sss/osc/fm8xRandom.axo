<objdefs appVersion="1.0.10">
   <obj.normal id="fm8xRandom" uuid="c500e8ec-ec5b-4f90-b36b-d04e665bd55d">
      <sDescription>8x sine wave oscillator with internal FM.
generated harmonics and FM routing are random.
Harmonics and FM routing can be independently randomised with the buttons and inputs.
Range sets the maximum harmonic range.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>osc.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch" description="pitch"/>
         <frac32buffer name="freq" description="frequency"/>
         <bool32.rising name="rndFM"/>
         <bool32.rising name="rndHrm"/>
         <frac32buffer name="phase" description="phase"/>
         <frac32 name="fm"/>
         <bool32 name="active"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="wave" description="sine wave"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
         <frac32.s.map name="fm"/>
         <bool32.mom name="rndFM"/>
         <bool32.mom name="rndHrm"/>
         <int32 name="range">
            <MinValue i="1"/>
            <MaxValue i="256"/>
         </int32>
         <int32 name="voices">
            <MinValue i="1"/>
            <MaxValue i="8"/>
         </int32>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t sine[8];
uint32_t phase[8];
int32_t val[8];
int32_t harm[8];
int8_t i;
int32_t freq;
int ntrig;
int strig;]]></code.declaration>
      <code.init><![CDATA[for(i=0;i<8;i++)
{val[i] = (int32_t)(GenerateRandomNumber()% (7));
harm[i] = (int32_t)(GenerateRandomNumber()% (48));}
ntrig = 0;]]></code.init>
      <code.krate><![CDATA[if(inlet_active>0){
if (((param_rndFM+inlet_rndFM)>0) && !ntrig) {
         for(i=0;i<8;i++)
         {val[i] = (int32_t)(GenerateRandomNumber()% (param_voices));}
      ntrig=1;
   }
   else if (!((param_rndFM+inlet_rndFM)>0)) ntrig=0;

if (((param_rndHrm+inlet_rndHrm)>0) && !strig) {
         for(i=0;i<8;i++)
         {harm[i] = (int32_t)(GenerateRandomNumber()% (param_range));}
         harm[0]=0;
      strig=1;
   }
   else if (!((param_rndHrm+inlet_rndHrm)>0)) strig=0;




MTOFEXTENDED(param_pitch+inlet_pitch,freq)
}]]></code.krate>
      <code.srate><![CDATA[if(inlet_active>0){
int32_t sum=0;
phase[0]+=freq+___SMMUL(freq<<3,___SMMUL((param_fm+inlet_fm)<<3,(inlet_freq<<3)+sine[val[0]])<<2);
SINE2TINTERP(phase[0],sine[0])
for(i=1;i<param_voices;i++)
{phase[i]+=(freq*(1+harm[i]))+___SMMUL((freq*(1+harm[i]))<<3,___SMMUL((param_fm+inlet_fm)<<3,inlet_freq+sine[val[i]])<<2);
SINE2TINTERP(phase[i],sine[i])}
for(i=0;i<param_voices;i++)
{sum+=sine[i]>>5;
}

outlet_wave=sum>>3;
//outlet_wave=sum>>3;
}]]></code.srate>
   </obj.normal>
</objdefs>