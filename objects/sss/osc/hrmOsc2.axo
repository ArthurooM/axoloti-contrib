<objdefs appVersion="1.0.12">
   <obj.normal id="hrmOsc2" uuid="e7f2916e-946b-496a-b0bd-c3309a5ede37">
      <sDescription>sort of harmonics-selecting oscillator or something

-quant sets the amount of harmonics used in a single phase-cycle
-offset gives an offset to all harmonic values, selecting a different set of harmonics in a single cycle
-step sets the stepsize for selecting harmonic values
-range sets the range for the highest harmonic that may be used</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>phasor.axh</helpPatch>
      <inlets>
         <frac32 name="pitch" description="pitch"/>
         <frac32buffer name="freq" description="phase increment"/>
         <frac32buffer name="phase"/>
         <int32 name="offset"/>
         <int32 name="step"/>
      </inlets>
      <outlets>
         <frac32buffer.positive name="phasor" description="phasor wave"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
         <frac32.s.map name="fm"/>
         <int32 name="quant">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <int32 name="offset">
            <MinValue i="0"/>
            <MaxValue i="64"/>
         </int32>
         <int32 name="step">
            <MinValue i="1"/>
            <MaxValue i="100"/>
         </int32>
         <int32 name="range">
            <MinValue i="1"/>
            <MaxValue i="64"/>
         </int32>
         <bool32.tgl name="internal"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[uint32_t Phase;
uint64_t P1;
uint64_t P2;
int32_t S1;
int32_t S2;]]></code.declaration>
      <code.init><![CDATA[Phase = 0;]]></code.init>
      <code.krate><![CDATA[uint32_t freq;
   MTOFEXTENDED(param_pitch + inlet_pitch,freq);
   int32_t step=param_step+inlet_step;
   int32_t offset=param_offset+inlet_offset;]]></code.krate>
      <code.srate><![CDATA[Phase += (freq>>0) + ___SMMUL(___SMMUL(inlet_freq<<4,param_fm<<4)<<3,freq<<2);
uint32_t phase=(param_internal>0?Phase/param_quant:0)+(inlet_phase<<5);
P1=phase;
P1=(P1/((1<<30)/(param_quant)))>>2;
P2=((phase-(P1<<2)*(1<<30)/(param_quant))*param_quant)>>5;
int p1=P1;
int p2=1+P1;
p2=p2-(p2/(param_quant))*(param_quant);
p1=(p1+offset)*step;
p2=(p2+offset)*step;
p1=p1-(p1/param_range)*param_range;
p2=p2-(p2/param_range)*param_range;
uint32_t p3=Phase/param_quant;
SINE2TINTERP(Phase*(1+p1),S1)
SINE2TINTERP(Phase*(1+p2),S2)
outlet_phasor =___SMMUL(S1,((1<<27)-P2))+___SMMUL(S2,P2);]]></code.srate>
   </obj.normal>
</objdefs>