<objdefs appVersion="1.0.10">
   <obj.normal id="chaosGuide" uuid="f347825a-d69c-474f-9898-a3dc23e248fa">
      <sDescription>chaotic oscillator, useful for percussion sounds and waveguide sounds with a noisy &quot;pluck&quot; part for as long as the gate is high. X, Y, and Z are the initial &quot;pluck&quot; values when either gate or sync goes high.
Connect an oscillator to the sync input for syncing the waveguide and using it as a timbre-controlled oscillator. Depending on the values of the controls, the timbre can be totally different.
Control the gate&apos;s length to provide different &quot;pluck&quot; times. 

As the sync will be off as long as the gate is high, the oscillator will be in it&apos;s chaotic state.
This state can either be repeating, noise or decay quickly with random quirks.. everything is possible.</sDescription>
      <author>Remco van der most</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="sync"/>
         <bool32 name="gate"/>
         <frac32 name="x"/>
         <frac32 name="y"/>
         <frac32 name="z"/>
         <frac32 name="b"/>
         <frac32 name="r"/>
         <frac32 name="s"/>
         <frac32 name="time"/>
         <frac32 name="LP"/>
         <frac32 name="HP"/>
      </inlets>
      <outlets>
         <frac32buffer name="x"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="b"/>
         <frac32.s.map name="r"/>
         <frac32.s.map name="s"/>
         <frac32.s.map name="time"/>
         <frac32.s.map name="x"/>
         <frac32.s.map name="y"/>
         <frac32.s.map name="z"/>
         <frac32.s.map.pitch name="LP"/>
         <frac32.s.map.pitch name="HP"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t x;
int32_t y;
int32_t z;
float32_t s;
float32_t r;
float32_t b;

int32_t F;
int32_t G;
int32_t X;
int32_t Y;
int32_t Z;

int gtrig;]]></code.declaration>
      <code.krate><![CDATA[int32_t freq;
MTOF(param_HP+inlet_HP,freq)
int32_t fraq;
MTOF(param_LP+inlet_LP,fraq)



float32_t t=param_time+inlet_time;
b=param_b+inlet_b;
r=param_r+inlet_r;
s=param_s+inlet_s;

b=((float32_t)(b)/(float32_t)(1<<24));
r=((float32_t)(r)/(float32_t)(1<<19));
s=((float32_t)(s)/(float32_t)(1<<19));
t=((float32_t)(t)/(float32_t)(1<<31));]]></code.krate>
      <code.srate><![CDATA[if(((inlet_sync+(inlet_gate>0?(1<<27):-(0<<26)))>0)&&!gtrig){
	gtrig=1;
	x=param_x+inlet_x;
	y=param_y+inlet_y;
	z=param_z+inlet_z;
}
else if ((inlet_sync+(inlet_gate>0?(1<<27):-(0<<27)))<=0){gtrig=0;}



X=x;
Y=y;
Z=z;
x+=((int32_t)(s*(Y-X)*t));
y+=((int32_t)((X*(r-Z)-Y)*t));
z+=((int32_t)((X*Y-b*Z)*t));
SINE2TINTERP(x,X)
SINE2TINTERP(y,Y)
SINE2TINTERP(z,Z)
F=___SMMLA((((X+Y+Z)>>5)-F)<<1,freq,F);
G=___SMMLA(((F-((X+Y+Z)>>5))-G)<<1,fraq,G);
outlet_x=G;]]></code.srate>
   </obj.normal>
</objdefs>