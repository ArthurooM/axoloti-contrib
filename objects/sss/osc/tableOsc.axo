<objdefs appVersion="1.0.10">
   <obj.normal id="tableOsc" uuid="89b9aa9a-aacc-45fe-85dd-aac1c6a46b64">
      <sDescription>table oscillator
Can use the tables created by the &quot;sculptor&quot; module or any other &quot;raw&quot; table data.
Inputs (same as corresponding parameters)
&quot;pitch&quot;-&gt;enter your pretty melody data in here ;)
&quot;freq&quot; input for audio rate fm
&quot;Shift&quot; shifts the start readout point through the table.
&quot;size&quot; sets the readout width by the phase
&quot;mix&quot; controls the sine/table mix

&quot;root&quot; sets the harmonic ratio of the sine
&quot;harmonic&quot; sets the harmonic ratio of the table oscillator
&quot;fm&quot; controls fm-width for &quot;freq&quot; input
&quot;p2size&quot; sends pitch data to offset the readout-size
&quot;p2shift&quot; sends pitch data to offset the start position of the readout
&quot;cut&quot; sets the pitch-offset of a 12dB LP-filter in respect to the incoming pitch data to smooth out the table.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>phasor.axh</helpPatch>
      <inlets>
         <frac32 name="pitch" description="pitch"/>
         <frac32buffer name="freq" description="phase increment"/>
         <frac32 name="shift"/>
         <frac32 name="size"/>
         <frac32 name="mix"/>
         <bool32 name="active"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
         <int32 name="root">
            <MinValue i="1"/>
            <MaxValue i="8"/>
         </int32>
         <int32 name="harmonic">
            <MinValue i="1"/>
            <MaxValue i="32"/>
         </int32>
         <frac32.s.map name="fm"/>
         <frac32.s.map name="p2size"/>
         <frac32.s.map name="p2shift"/>
         <frac32.s.map name="size"/>
         <frac32.u.map name="shift"/>
         <frac32.u.map name="cut"/>
      </params>
      <attribs>
         <objref name="table"/>
      </attribs>
      <code.declaration><![CDATA[uint32_t Phase;
int32_t shift;
int32_t tap;
int32_t val1;
int32_t val2;
int32_t out;
int i;
int32_t offset1;
int32_t offset2;
int32_t offset3;
int32_t index;
int32_t mix;
uint32_t freq;
int32_t cut;

]]></code.declaration>
      <code.init><![CDATA[Phase = 0;val1 = 0;val2 = 0;
]]></code.init>
      <code.krate><![CDATA[
   if(inlet_active>0){
   MTOFEXTENDED(param_pitch + inlet_pitch,freq);
   freq=freq;

   MTOF(__USAT(param_pitch+param_cut,27),cut);
   cut=cut*param_harmonic;
offset1=___SMMUL((param_pitch+inlet_pitch+(1<<26))<<3,param_p2shift<<2);
offset2=___SMMUL((param_pitch+inlet_pitch+(24<<21))<<3,param_p2size>>4)+param_size+inlet_size &((1<<27)-1);
   }]]></code.krate>
      <code.srate><![CDATA[if(inlet_active>0){
offset3=offset3+((offset2-offset3)>>8);
mix=mix+((inlet_mix-mix)>>8);
out=0;
Phase += (freq>>0) + ___SMMUL(inlet_freq<<3,param_fm);
shift=shift+((((param_shift<<3)+inlet_shift)-shift)>>8);
index=(___SMMUL(((Phase*param_harmonic)>>9),offset3<<3)+((shift+offset1)>>8))>>11;
tap = attr_table.array[((index)<<5)&((1<<16)-1)];
val1 = ___SMMLA(((tap<<2)-val1)<<1,cut,val1);
val2 = ___SMMLA((val1-val2),cut,val2);
int32_t sine;
SINE2TINTERP(Phase*param_root,sine)
outlet_out=___SMMUL(val2<<3,mix<<3)+___SMMUL((1<<27)-(mix),sine);
}]]></code.srate>
   </obj.normal>
</objdefs>