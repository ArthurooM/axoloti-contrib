<objdefs appVersion="1.0.10">
   <obj.normal id="sculptor" uuid="d2c5b39d-39a3-4bab-99af-63c8259e9d48">
      <sDescription>-sculptor is based on wavetable synthesis and uses a table to save it&apos;s waveforms.

-each waveform is 1024 samples long.

-pressing the &quot;clear&quot; button will clear the current table-&gt;no sound!

-holding &quot;sine&quot; will progressively add sine-waves to the existing table. 
-The &quot;harmonic&quot; box sets the start harmonic the first added sine will be on. 
-Even/odd harmonics have a # degrees phase shift depending on the &quot;phase&quot; box.
-Each higher harmonic will be of a lower volume than the previous lower harmonic (quarter of the volume less then the previous one).
-&quot;jump&quot; sets the harmonic-spreading between each extra sine that&apos;s added while holding down the &quot;sine&quot; button.
-&quot;steps&quot; sets the count-max for the amount of sines you want to add, before the count starts again and just adds the same ros of harmonics again, saturating the volume of these harmonics.
-don&apos;t forget to push &quot;normalise&quot; and &quot;dcRemove&quot; every once in a while, so the waveform doesn&apos;t become too &quot;hot&quot;.

-holding change will progressively add small random shapes to the current waveform.

-pressing the &quot;randomise&quot; button will randomise the waveform.

-though the randomised waveform is full of harmonics, holding the smooth-button will progressively smooth out the waveform by averaging each point in the table with another point that has a selectable offset position to the table-position being avaraged (&quot;with&quot; parameter).

-with the &quot;with&quot; parameter you select with which other position you average the selected table position (which is in a &quot;for-loop&quot;, so all table positions are being recalculated after each other.
So if &quot;with&quot; is set to 1, each point will be averaged with the next one. If set to 5, each point will be averaged with a point 5 steps next to it. The higher you go, the more you alter the harmonic content: notch or upper harmonic creation.

-after sculpting, you can subtract any DC-offset from the table and normalise the waveform.

-if you have your waveform, you save it using the &quot;save&quot; button to any of the available preset-positions (preset box) (depending on the table-size you have set on the allocation module). I set mine to 524288, which allows me to store up to 512 waveforms!

-to load a waveform, select a preset number and press &quot;load&quot;. (REMEMBER!! you need to have a filled table-allocation module to load the waveform from!! If there isn&apos;t one yet, it can&apos;t find anything and thus won&apos;t load anything! In this case (first time you use this module), you first have to make your own table!)

-&quot;morph&quot; sets the rate the current table is morphed into the next selected preset after you hit &quot;load&quot;. This is done by fading between 2 arrays and updating them one by one. NOTE! If you hit &quot;load&quot; before a new table is totally faded in, it will update the other and thus immediately change the sound instead of morphing it! Don&apos;t worry though, it won&apos;t bleep!

NOTE! To be able to actually save your waveforms, you need to add the table-save and table-load modules from the axoloti table folder! This way you can reload your carefully created waveforms after shutdown!

-when you have a preset-file, load it into the table (loud long beep as always) and hit &quot;load&quot; on the &quot;sculptor&quot; oscillator. Now it loads the selected preset from the table WITHOUT A BEEP! For any of your other waveforms, you won&apos;t hear any beep while switching presets as long as you don&apos;t use the &quot;table save/load&quot; mechanism! (keep that for after your recording/liveset/etc)

-&quot;softness&quot; controls a lowpass filter, the higher the value, the more it dampens the sound.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <frac32 name="pitch"/>
         <int32 name="preset" description="connect to some pattern generator?"/>
         <bool32.rising name="load" description="when load goes high, loads current preset-&quot;input+parameter&quot;"/>
         <frac32buffer name="fm" description="connect external signal to do FM"/>
         <frac32buffer name="phase" description="connect external signal to do PM"/>
         <frac32buffer name="sync" description="connect external signal to sync waveform at positive zero-crossing"/>
         <bool32 name="active"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
         <frac32buffer.positive name="phase"/>
      </outlets>
      <displays>
         <int8array128.vbar name="wave" noLabel="true"/>
      </displays>
      <params>
         <frac32.s.map.pitch name="pitch" description="controls oscillator pitch"/>
         <frac32.s.map name="fm" description="controls frequency modulation width"/>
         <frac32.s.map name="pm" description="controls phase modulation width"/>
         <bool32.mom name="clear"/>
         <int32 name="harmonic">
            <MinValue i="1"/>
            <MaxValue i="512"/>
         </int32>
         <int32 name="jump">
            <MinValue i="0"/>
            <MaxValue i="512"/>
         </int32>
         <int32 name="steps">
            <MinValue i="2"/>
            <MaxValue i="32"/>
         </int32>
         <int32 name="phase">
            <MinValue i="0"/>
            <MaxValue i="31"/>
         </int32>
         <bool32.mom name="sine"/>
         <bool32.mom name="change"/>
         <int32 name="with" description="average each point with another point with this offset to the &quot;first point&quot;... get it? hmm..">
            <MinValue i="1"/>
            <MaxValue i="256"/>
         </int32>
         <bool32.mom name="smooth" description="averages/smoothes points"/>
         <bool32.mom name="mirroradd"/>
         <bool32.mom name="randomise" description="small random change to current waveform"/>
         <bool32.mom name="dcRemove" description="removes dc offset of current waveform"/>
         <bool32.mom name="normalise" description="normalises the current selected waveform"/>
         <bool32.mom name="save" description="saves current waveform to selected preset"/>
         <bool32.mom name="load" description="loads selected preset to current waveform"/>
         <int32 name="preset" description="sets preset to load from/save to.">
            <MinValue i="0"/>
            <MaxValue i="512"/>
         </int32>
         <frac32.u.map name="morph" description="morph rate when new preset is selected."/>
         <int32 name="softness" description="LP-filter">
            <MinValue i="1"/>
            <MaxValue i="1024"/>
         </int32>
         <bool32.mom name="update"/>
      </params>
      <attribs>
         <objref name="table"/>
      </attribs>
      <code.declaration><![CDATA[int32_t array[1024];
int32_t arrey[1024];
int i;
int loop;
int ntrig;
int atrig;
int xtrig;
int strig;
int mtrig;
int ctrig;
int itrig;
int ftrig;
int Utrig;
int32_t sine;
uint32_t phase;
uint32_t phose;
int32_t sum;
int32_t sam;
int count;
int caunt;
int ceunt;
int ciunt;
int32_t vol;
int32_t vel;
int32_t vul;
int32_t vil;
int save;
int loadA;
int loadB;
int next;
int LoadA;
int LoadB;
int LOAD;
int trip;
int32_t morph;
int32_t mot;
int32_t ccomp;
int tok;
int32_t x;
int32_t preset;
int32_t mos;
int32_t frq;]]></code.declaration>
      <code.init><![CDATA[for (i=0;i<1024;i++) array[i] = -(1<<27)+((GenerateRandomNumber())>>4);arrey[i] = -(1<<27)+((GenerateRandomNumber())>>4);{}
phose=0;
vil=0;
vel=0;
vol=0;
vil=0;
LoadA=1;
LoadB=(1<<27);]]></code.init>
      <code.krate><![CDATA[if(inlet_active>0){
preset=param_preset+inlet_preset;
LOAD=__USAT(param_load+inlet_load,28);
if(((LOAD)>0) &&(!(trip)))
{trip=1;
next=next>0?0:1;
if(next==0)
{LoadA=LOAD; LoadB=0;}
if(next==1){LoadB=LOAD;LoadA=0;}
}
else if (LOAD<1)
{trip=0;}
   if (((LoadA)>0) && !loadA) {
      loadA=1;
     for(i=0;i<1024;i++)
         {(array[i])=attr_table.array[i+(preset)*1024]<<attr_table.GAIN;}
   }
   if (!((LoadA)>0)) loadA=0;

   if (((LoadB)>0) && !loadB) {
      loadB=1;
     for(i=0;i<1024;i++)
         {(arrey[i])=attr_table.array[i+(preset)*1024]<<attr_table.GAIN;}
   }
   if (!((LoadB)>0)) loadB=0;


if(LoadA>0){

if ((param_clear>0) && (!ctrig)) 
{for (i=0;i<1024;i++) array[i] = 0;{} ctrig=1;}
else if (!(param_clear>0)) {ctrig=0;}

if(param_sine>0)
{ceunt+=1;
ceunt=ceunt & ((1<<7)-1);
if(ceunt==1)
{ciunt+=1;
ciunt=ciunt -(ciunt/param_steps)*param_steps;
}
}
else
{ceunt=0;ciunt=0;}

if ((ceunt>0) && (!itrig)) 
{for (i=0;i<1024;i++) {
	
	int32_t harmonic=(param_harmonic+ciunt*param_jump);
	(SINE2TINTERP((((i)<<22)*(harmonic))+ (((harmonic)&1)<<param_phase),(sine))); array[i] = array[i]+((sine>>9)/(1+((harmonic-1)/2)));
} itrig=1;}
else if (!(ceunt>0)) {itrig=0;}
   
if ((param_randomise>0) && (!ntrig)) 
{for (i=0;i<1024;i++) array[i] = -(1<<25)+((GenerateRandomNumber())>>6);{} ntrig=1;}
else if (!(param_randomise>0)) {ntrig=0;}

if ((param_normalise>0) && (!xtrig)) 
{float32_t norm=(float32_t)(1<<26)/(float32_t)vul;
for (i=0;i<1024;i++) {array[i] = (array[i])*norm;} xtrig=1;}
else if (!(param_normalise>0)) {xtrig=0;}

if ((param_mirroradd>0) && (!mtrig)) 
{for (i=0;i<1024;i++) {arrey[i] = (array[i]+array[1023-i])>>1;} mtrig=1;}
else if (!(param_mirroradd>0)) {mtrig=0;}

if ((param_dcRemove>0) && (!strig)) 
{for (i=0;i<1024;i++) {array[i] = array[i]-vol;} strig=1;}
else if (!(param_dcRemove>0)) {strig=0;}

if(param_change>0)
{caunt+=1;
caunt=caunt & ((1<<6)-1);}
else
{caunt=0;}

if ((caunt==1) && (!ftrig)) 
{for (i=0;i<1024;i++) array[i] = array[i]+ (-(1<<21)+((GenerateRandomNumber())>>10));{} ftrig=1;}
else if (!(count>1)) {ftrig=0;}

if(param_smooth>0)
{count+=1;
count=count & ((1<<6)-1);}
else
{count=0;}

if ((count==1) && (!atrig)) 
{for (i=0;i<1024;i++)	
array[i] = (array[i]+array[(i+param_with)-((i+param_with)/1024)*1024])/2;	
{} atrig=1;}
else if (!(count>1)) {atrig=0;}

if ((param_save>0) && (!save)) {
save=1;
for(i=0;i<1024;i++)
{attr_table.array[i+(preset)*1024]=(array[i])>>attr_table.GAIN;}
}
if (!(param_save>0)) save=0;

if((param_update>0) && (!(Utrig==1)))
{for(i=0;i<128;i++) 
{disp_wave[i]=(array[i*8]+array[i*8+1]+array[i*8+2]+array[i*8+3]+array[i*8+4]+array[i*8+5]+array[i*8+6]+array[i*8+7])>>23;}
Utrig=1;}
else if (!(param_update>0)) {Utrig=0;}
}





if(LoadB>0){
if ((param_clear>0) && (!ctrig)) 
{for (i=0;i<1024;i++) arrey[i] = 0;{} ctrig=1;}
else if (!(param_clear>0)) {ctrig=0;}

if(param_sine>0)
{ceunt+=1;
ceunt=ceunt & ((1<<7)-1);
if(ceunt==1)
{ciunt+=1;
ciunt=ciunt -(ciunt/param_steps)*param_steps;}
}
else
{ceunt=0;ciunt=0;}

if ((ceunt>0) && (!itrig)) 
{for (i=0;i<1024;i++) {
	int32_t harmonic=(param_harmonic+ciunt*param_jump);
	(SINE2TINTERP((((i)<<22)*(harmonic))+ (((harmonic)&1)<<param_phase),(sine))); arrey[i] = arrey[i]+((sine>>9)/(1+((harmonic-1)/2)));
	
} itrig=1;}
else if (!(ceunt>0)) {itrig=0;}
   
if ((param_randomise>0) && (!ntrig)) 
{for (i=0;i<1024;i++) arrey[i] = -(1<<25)+((GenerateRandomNumber())>>6);{} ntrig=1;}
else if (!(param_randomise>0)) {ntrig=0;}

if ((param_mirroradd>0) && (!mtrig)) 
{for (i=0;i<1024;i++) {arrey[i] = (arrey[i]+arrey[1023-i])>>1;} mtrig=1;}
else if (!(param_mirroradd>0)) {mtrig=0;}

if ((param_normalise>0) && (!xtrig)) 
{float32_t norm=(float32_t)(1<<26)/(float32_t)vul;
for (i=0;i<1024;i++) {arrey[i] = (arrey[i])*norm;} xtrig=1;}
else if (!(param_normalise>0)) {xtrig=0;}
   
if ((param_dcRemove>0) && (!strig)) 
{for (i=0;i<1024;i++) {arrey[i] = arrey[i]-vol;} strig=1;}
else if (!(param_dcRemove>0)) {strig=0;}

if(param_change>0)
{caunt+=1;
caunt=caunt & ((1<<6)-1);}
else
{caunt=0;}

if ((caunt==1) && (!ftrig)) 
{for (i=0;i<1024;i++) arrey[i] = arrey[i]+ (-(1<<21)+((GenerateRandomNumber())>>10));{} ftrig=1;}
else if (!(count>1)) {ftrig=0;}

if(param_smooth>0)
{count+=1;
count=count & ((1<<6)-1);}
else
{count=0;}

if ((count==1) && (!atrig)) 
{for (i=0;i<1024;i++)	
arrey[i] = (arrey[i]*2+arrey[(i+param_with)-((i+param_with)/1024)*1024])>>23;	
{} atrig=1;}
else if (!(count>1)) {atrig=0;}


if ((param_save>0) && (!save)) {
save=1;
for(i=0;i<1024;i++)
{attr_table.array[i+(preset)*1024]=(arrey[i])>>attr_table.GAIN;}
}
if (!(param_save>0)) save=0;



if((param_update>0) && (!(Utrig==1)))
{for(i=0;i<128;i++)
{disp_wave[i]=(arrey[i*8]+arrey[i*8+1]+arrey[i*8+2]+arrey[i*8+3]+arrey[i*8+4]+arrey[i*8+5]+arrey[i*8+6]+arrey[i*8+7])>>23;}
Utrig=1;}
else if (!(param_update>0)) {Utrig=0;}

}




  mos=___SMMUL(((1<<27)-param_morph)<<3,((1<<27)-param_morph)<<2);
  mos=___SMMUL(mos<<3,mos<<2);

MTOFEXTENDED(param_pitch+inlet_pitch,frq)
}]]></code.krate>
      <code.srate><![CDATA[if(inlet_active>0){
int32_t FMW=___SMMUL(param_fm<<3,inlet_fm<<2);
if((inlet_sync>0) && (!(tok)))
{phase=0;
tok=1;}
else
{phase+=frq+___SMMUL(frq<<6,FMW<<3); if(inlet_sync<0){tok=0;}}
phose=phase+___SMMUL((inlet_phase<<5),param_pm);
outlet_phase=phose>>5;
phose=phose>>22;
//phise=(phose<<16);
sum=array[phose];
sam=arrey[phose];

morph=morph+(___SMMUL(((next<<27)-morph),mos));
ccomp=(1<<27)-morph;
mot=___SMMUL(ccomp<<3,sum<<2)+___SMMUL(morph<<3,sam<<2);
vil=vil+((mot-vil)/param_softness);
vol=vol+((mot-vol)>>15);
vel=mot>0?mot:-mot;
if(vel>vul)
{vul=vel;}
else
{vul=vul*0.9999;}

outlet_out=vil;
}]]></code.srate>
   </obj.normal>
</objdefs>