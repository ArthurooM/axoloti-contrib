<objdefs appVersion="1.0.10">
   <obj.normal id="tempoSyncedLFO" uuid="75b84958-bc07-418c-b306-9b29a4bdcee1">
      <sDescription>Tempo Synced LFO with multiple waveforms out

Automatically syncs tempo to the incoming clock on sync-input.
Tempo can be multiplied and divided by integers to keep a tight ratio and can also be shifted up/down up to 8 octaves.

phase controls all the waveforms (there is only one phase actually)
PW only controls pulsewidth of the pulse waveform (not bandlimited)

when syncReset is on, LFO will be synced to phase position set by phase parameter and phase input at regular intervals.

A trigger at the &quot;reverse&quot; input will reverse the play direction. Another click will revert it back to normal play direction.

Reset will hard-reset the phase of the LFO</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <bool32.rising name="sync"/>
         <int32 name="multiply"/>
         <int32.positive name="divide"/>
         <int32.bipolar name="octave"/>
         <frac32 name="phase"/>
         <frac32 name="PW"/>
         <bool32.rising name="reverse"/>
         <bool32.rising name="reset"/>
      </inlets>
      <outlets>
         <frac32 name="sine"/>
         <frac32 name="cosine"/>
         <frac32 name="triangle"/>
         <frac32 name="cotriangle"/>
         <frac32 name="saw"/>
         <frac32 name="ramp"/>
         <frac32 name="square"/>
         <frac32 name="pulse"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="multiply">
            <MinValue i="-64"/>
            <MaxValue i="64"/>
         </int32>
         <int32 name="divide">
            <MinValue i="1"/>
            <MaxValue i="64"/>
         </int32>
         <int32 name="octave">
            <MinValue i="-8"/>
            <MaxValue i="8"/>
         </int32>
         <frac32.u.map name="phase"/>
         <frac32.s.map name="PW"/>
         <bool32.tgl name="syncRst"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[uint64_t timer;
uint64_t held;
uint64_t hold;
int ttrig;
int rtrig;
int strig;
int64_t phase;
int32_t count;
int64_t dovide;
int32_t moltiply;
int8_t reverse;]]></code.declaration>
      <code.init><![CDATA[reverse=1;]]></code.init>
      <code.krate><![CDATA[int32_t multiply=inlet_multiply+param_multiply;
int32_t divide=inlet_divide+param_divide;
int32_t octave=inlet_octave+param_octave;
int32_t pulse=((inlet_PW+param_PW)<<5)>>5;
if((inlet_reverse>0)&&!strig)
{strig=1;
reverse=reverse>0?0:1;}
else if(inlet_reverse<=0){strig=0;}

if((inlet_reset>0)&&!rtrig)
{rtrig=1;
phase=0;}
else if(inlet_reset<=0){rtrig=0;}

if((inlet_sync>0)&&!ttrig)
{ttrig=1;
held=timer;
count+=1;
timer=0;
if((count>=dovide)&&param_syncRst)
{phase=0;

count=0;}
}
else if(inlet_sync<1){ttrig=0;}
timer+=1;
dovide=divide<<(-octave<0?0:-octave);
moltiply=multiply<<(octave>0?octave:0);
if(reverse>0)
{phase+=1*moltiply;
phase=phase-(phase/(held*dovide))*(held*dovide);}
else
{phase-=1*moltiply;
phase=phase==0?held*dovide-1:phase;}

hold=((phase)<<32)/(held*dovide);
int32_t sine;
int32_t cosine;
int32_t Phase=inlet_phase+param_phase;
SINE2TINTERP(hold+(Phase<<5),sine)
SINE2TINTERP(hold+(Phase<<5)+(1<<30),cosine)
outlet_sine=sine>>4;
outlet_cosine=cosine>>4;
int32_t hald=(((hold+(1<<30))>>3)+(Phase<<2)) &((1<<29)-1);
hold=((hold>>3)+(Phase<<2)) &((1<<29)-1);
outlet_triangle=((hald>(1<<28)?(2<<28)-hald:hald)-(1<<27));
outlet_cotriangle=-((hold>(1<<28)?(2<<28)-hold:hold)-(1<<27));
outlet_saw=(hold>>1)-(1<<27);
outlet_ramp=-outlet_saw;
outlet_square=outlet_sine>0?(1<<27):-(1<<27);
outlet_pulse=outlet_saw>pulse?(1<<27):-(1<<27);]]></code.krate>
   </obj.normal>
</objdefs>