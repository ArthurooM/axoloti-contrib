<objdefs appVersion="1.0.12">
   <obj.normal id="lfoSLAVE" uuid="3b7a3e7d-a04d-46b0-848e-836c3cae15a3">
      <sDescription>This is the in/output module to be used with the &quot;lfoCORE&quot; module.
This module uses the codes in the core module to calculate it&apos;s waveform.
This way the seperate wave-codes only have to be written once into memory and can then be called upon by multiple lfoSLAVE instances.
Don&apos;t forget to reference to the lfoCORE module!</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <bool32 name="r" description="sync input"/>
         <int32 name="div" description="divides the rate in integer values. eg. useful with my morphing modules providing a &quot;div&quot; output. When not connected, is set to /1"/>
         <int32 name="wave" description="wave select"/>
         <frac32 name="rate" description="rate"/>
         <frac32 name="precision" description="quantize"/>
         <frac32 name="step" description="stepsize/multiplier"/>
         <frac32 name="slope" description="slope"/>
         <frac32 name="phase" description="phase-offset"/>
      </inlets>
      <outlets>
         <frac32 name="w1" description="waveform output"/>
         <bool32 name="snc" description="snc-output (high single-pulse trigger)"/>
      </outlets>
      <displays/>
      <params>
         <bool32.tgl name="snc" description="when on, lfo syncs to r-input"/>
         <frac32.s.map name="rate" description="sets rate based on host tempo (also connect lfoCORE module&apos;s HS-input!)"/>
         <frac32.u.map name="wave" description="selects waveform"/>
         <frac32.u.map name="precision" description="sets quantification of the lfo (in powers of 2 division)"/>
         <frac32.u.map.gain name="step" description="multiplies phase position-&gt; changes steps when precision quantizes the signal, otherwise starts repeating waveform within single cycle"/>
         <frac32.s.map name="slope" description="offsets the mid-position of the phase, changing the waveshapes"/>
         <frac32.s.map.kpitch name="damp" description="dampens the outgoing signal"/>
      </params>
      <attribs>
         <objref name="core"/>
      </attribs>
      <code.declaration><![CDATA[int32_t LP1;
int32_t LP2;
int32_t lfo;
uint32_t P4;
bool rtrg;
bool TRG;
int32_t LFO(uint32_t phase,int32_t rst,int32_t snc,int32_t rate,int Div,int32_t slope,int wave,int32_t precision,int32_t step,int32_t damp){
int32_t dmp;
MTOF(damp,dmp)
dmp=dmp;
attr_core.LFO(P4,phase<<5,rst,snc,rate,Div>0?Div:1,slope,wave,precision,step,rtrg);
LP1=___SMMLA((((attr_core.out>>1)+(1<<26))-LP1)<<1,dmp,LP1);
LP2=___SMMLA((LP1-LP2)<<1,dmp,LP2);
lfo=LP2;
TRG=attr_core.TRG;
P4=attr_core.PHS;
rtrg=attr_core.rtrig;
}]]></code.declaration>
      <code.krate><![CDATA[LFO(inlet_phase,inlet_r,param_snc,param_rate+inlet_rate,inlet_div,param_slope+inlet_slope,(param_wave>>23)+inlet_wave,param_precision+inlet_precision,param_step+inlet_step,param_damp);
outlet_snc=TRG;
outlet_w1=lfo;]]></code.krate>
   </obj.normal>
</objdefs>