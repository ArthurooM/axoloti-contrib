<objdefs appVersion="1.0.12">
   <obj.normal id="livePlayer" uuid="d712bb2e-fe11-4766-815f-212e8ad04ac5">
      <sDescription>live sample player to be used with the liveRecord module.
-play triggers the selected splice to play
-splice selects the splice to play
-when repeat is on, repeats selected splice
-octave offsets the play-rate in octaves
-pitch offsets the playrate in normal semitone pitch
-reverse inverses play direction
-&quot;demix&quot; parameter ducks the &quot;thru&quot; when play goes high</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="delay time (fraction of total delayline size)"/>
         <bool32 name="play" description="when high, plays the selected splice till it ends or till repeat and gate go low"/>
         <int32 name="splice" description="selects splice"/>
         <bool32 name="repeat" description="when high, will repeat the slice while gate is high"/>
         <int32 name="octave" description="offsets the playrate in octaves"/>
         <frac32 name="pitch" description="normal semitone control to control sample playrate"/>
         <bool32 name="reverse" description="when high, reverses the play direction of the splice"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="wave"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="pitch" description="offsets the playrate of the splice (0=normal rate)"/>
         <frac32.u.map.gain name="demix" description="when high, mixes out the dry signal when play goes high"/>
      </params>
      <attribs>
         <objref name="samples" description="this should refer to a 16bit table allocator (sdram)"/>
         <objref name="starts" description="this should refer to a 32bit table allocator"/>
      </attribs>
      <code.declaration><![CDATA[int splice;
int32_t phs;
bool play;
uint32_t width;
uint32_t offset;
uint32_t frq;
uint32_t base;
float32_t r1;]]></code.declaration>
      <code.krate><![CDATA[int spls=attr_starts.array[0];
if(spls>0){
splice=inlet_splice;
splice=splice-splice/spls*spls;
splice+=(splice<0?spls:0)+1;

if((inlet_play>0)&&!play){
	play=1;
	phs=0;
}
else if(inlet_play==0){play=0;}

width=attr_starts.array[splice]-(splice>1?attr_starts.array[splice-1]:0)<<1;
offset=(splice>1?attr_starts.array[splice-1]:0);

MTOFEXTENDED(param_pitch+inlet_pitch,frq)

MTOFEXTENDED(0,base)

r1=(float32_t)frq/base;

frq=((int64_t)1<<32)/width*r1;
frq=inlet_octave>0?frq<<inlet_octave:frq>>-inlet_octave;
}]]></code.krate>
      <code.srate><![CDATA[if(spls>0){
      int32_t tmp_r=0;
      if((inlet_play>0)&&(phs>=0)){
      phs+=frq;
      uint32_t pos=___SMMUL(inlet_reverse>0?(1<<31)-phs:phs,width)+offset;
      tmp_r= attr_samples.array[pos&attr_samples.LENGTHMASK]<<14;
      if(inlet_repeat>0){
      phs=phs<0?0:phs;
      }
      }

      outlet_out= inlet_in+(___SMMUL(inlet_play<<30,tmp_r-___SMMUL(inlet_in<<1,param_demix))<<2);
      }
      else {outlet_out=inlet_in;}]]></code.srate>
   </obj.normal>
</objdefs>