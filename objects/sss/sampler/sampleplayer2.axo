<objdefs appVersion="1.0.12">
   <obj.normal id="sampleplayer2" uuid="fabc0948-1e0c-4b3f-a934-d3f3980eaaab">
      <sDescription>a simple sample player to play 4 independent samples from a samplebank made by the loadtrain modules.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>table.axh</helpPatch>
      <inlets>
         <bool32 name="gate1" description="trigger for sample 1"/>
         <bool32 name="gate2" description="trigger for sample 2"/>
         <bool32 name="gate3" description="trigger for sample3"/>
         <bool32 name="gate4" description="trigger for sample4"/>
         <frac32 name="pitch1" description="pitch for sample 1"/>
         <frac32 name="pitch2" description="pitch for sample 2"/>
         <frac32 name="pitch3" description="pitch for sample 3"/>
         <frac32 name="pitch4" description="pitch for sample 4"/>
         <int32 name="sample1" description="sample 1 select"/>
         <int32 name="sample2" description="sample 2 select"/>
         <int32 name="sample3" description="sample 3 select"/>
         <int32 name="sample4" description="sample 4 select"/>
         <int32 name="first"/>
         <int32 name="samples"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="table[a]"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="pitch" description="offsets the pitch for all samplers" noLabel="true"/>
      </params>
      <attribs>
         <objref name="samples" description="this should refer to a 16bit table allocator (sdram)"/>
         <objref name="starts" description="this should refer to a 32bit table allocator"/>
      </attribs>
      <code.declaration><![CDATA[bool gate[4];
uint32_t pos[4];
int32_t frq[4];
int32_t G[4];
int i;
int32_t v30=1<<30;
int32_t v29=1<<29;
int32_t P[4];
int32_t p[4];
int16_t S[4];
int16_t IS[4];
uint32_t width[4];
uint32_t sStart[4];]]></code.declaration>
      <code.init><![CDATA[for(i=0;i<4;i++){
pos[i]=-1<<30;
S[i]=0;
}]]></code.init>
      <code.krate><![CDATA[G[0]=inlet_gate1;
G[1]=inlet_gate2;
G[2]=inlet_gate3;
G[3]=inlet_gate4;

IS[0]=inlet_sample1;
IS[1]=inlet_sample2;
IS[2]=inlet_sample3;
IS[3]=inlet_sample4;

p[0]=inlet_pitch1+param_pitch;
p[1]=inlet_pitch2+param_pitch;
p[2]=inlet_pitch3+param_pitch;
p[3]=inlet_pitch4+param_pitch;

for(i=0;i<4;i++){
if((G[i]>0)&&!gate[i]){
	gate[i]=1;
	P[i]=0;
	S[i]=IS[i]-IS[i]/inlet_samples*inlet_samples;
	S[i]+=((S[i]<0?inlet_samples:0)+inlet_first);
	S[i]=S[i]&attr_starts.LENGTHMASK;
}
else if(G[i]==0){gate[i]=0;}
sStart[i]=attr_starts.array[S[i]];
width[i]=(attr_starts.array[S[i]+1])-sStart[i];
uint32_t base;
float32_t r1;
MTOFEXTENDED(p[i],frq[i])
MTOFEXTENDED(0,base)
r1=(float32_t)frq[i]/base;
frq[i]=((int64_t)1<<32)/width[i]*r1;

}]]></code.krate>
      <code.srate><![CDATA[//P1=P1>PE?-8:P1;
outlet_out=0;
for(i=0;i<4;i++){
pos[i]=___SMMUL(width[i]<<1,P[i]);
if((pos[i]<width[i])&&(pos[i]>=0)){
	outlet_out+=attr_samples.array[pos[i]+sStart[i]]<<12;
	P[i]+=frq[i];
}
}]]></code.srate>
   </obj.normal>
</objdefs>