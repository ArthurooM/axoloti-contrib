<objdefs appVersion="1.0.12">
   <obj.normal id="loadtrain2" uuid="03276144-996f-40f4-9830-d42ef1a44566">
      <sDescription>load samples from sdcard using into 2 table allocators (samples=16bit,starts=32bit)
samples can be either .tab, .wav or .raw, all 16bit.
You can load either a consecutive order of indexed samples when you&apos;ve saved drumkits in consecutive order
(eg. sample000.raw,sample001.raw,sample002.rar,etc)
or set maximum and minimum index number to randomly load a set of samples between these index numbers
(eg. sample053.raw,sample952.raw,sample002.raw,etc) For this, the rndLoad input has to be high.
A randomisation can be skipped if the &quot;new&quot; input is low.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>table.axh</helpPatch>
      <inlets>
         <bool32.rising name="load" description="send trigger for loading samples from sampleStart up to sampleEnd"/>
         <int32 name="index" description="offsets the sample loading index (sampleStart and SampleEnd)"/>
         <bool32 name="rndLoad" description="when high and trigger goes high, uses the random-load-settings instead of sampleStart/sampleEnd settings"/>
         <bool32 name="new" description="when low, keeps the old random selection, this way you can randomise only parts of the sampletrain if you&apos;re happy with some random loaded samples"/>
         <int32 name="offset" description="connects to the former loadtrain module to get the sample-loading offset. FIRST MODULE DOESN&apos;T NEED AN OFFSET!"/>
         <int32 name="remsize" description="connects to the former loadtrain module to get the sample-loading remaining size. FIRST MODULE DOESN&apos;T NEED AN REMSIZE OFFSET!"/>
      </inlets>
      <outlets>
         <bool32 name="load" description="when the module is finished loading samples, outputs a pulse for the next sample-load module"/>
         <int32 name="offset" description="outputs the start-offset of the array, CONNECT THIS TO THE NEXT MODULE THAT&apos;S LOADING SAMPLES!"/>
         <int32 name="remsize" description="outputs the remaining size of the array, CONNECT THIS TO THE NEXT MODULE THAT&apos;S LOADING SAMPLES!"/>
         <int32 name="first" description="outputs the first sample index of the samples being loaded by the module"/>
         <int32 name="samples" description="outputs the amount of samples being loaded by this module"/>
      </outlets>
      <displays>
         <int32.label name="offset" description="shows bit starting offset (good for seeing whether your samples can actually fit in the array or that the array could be made smaller)"/>
         <int32.label name="first" description="shows first index position of loaded samples"/>
         <int32.label name="last" description="shows last index position of loaded samples (last module shows wrong value though!)"/>
         <int32.label name="samplesize" description="shows the samplesize of the samples being loaded (probably skips small samples as these load a bit to fast for the update rate)"/>
      </displays>
      <params>
         <int32 name="sampleStart" description="select first sample to be loaded">
            <MinValue i="0"/>
            <MaxValue i="999"/>
         </int32>
         <int32 name="sampleEnd" description="selects last sample to be loaded (all samples in-between will be loaded)">
            <MinValue i="0"/>
            <MaxValue i="999"/>
         </int32>
         <int32 name="rndMax" description="select maximum index selection for random load">
            <MinValue i="0"/>
            <MaxValue i="999"/>
         </int32>
         <int32 name="rndMin" description="select minimum index selection for random load">
            <MinValue i="0"/>
            <MaxValue i="999"/>
         </int32>
         <int32 name="rndSamples" description="selects how many random samples will be loaded">
            <MinValue i="0"/>
            <MaxValue i="999"/>
         </int32>
      </params>
      <attribs>
         <objref name="samples" description="refer to table allocator for samples (16bit SDRAM!)"/>
         <objref name="starts" description="refer to table allocator for start-times of samples (32bit SDram!)"/>
         <table name="prefix" description="enter (directory/..) sample prefix of samples to be loaded  eg.  /drumsamples/BD/bd"/>
         <table name="suffix" description="enter sample file suffix  eg. wav/raw"/>
         <combo name="first" description="select &quot;yes&quot; if this is the first module in line of the sampletrain load, otherwise set it to &quot;no&quot;">
            <MenuEntries>
               <string>no</string>
               <string>yes</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
            </CEntries>
         </combo>
      </attribs>
      <includes>
         <include>chibios/ext/fatfs/src/ff.h</include>
      </includes>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[int ntrig;
int32_t rnd[64];
char c[64];
int ofs;
int pval;
int j;
int offset = 0;
int32_t s1;
int32_t s2;
bool rst;
int32_t LN;
int m;
int rem_sz;]]></code.declaration>
      <code.init><![CDATA[ntrig = 0;
strcpy(&c[0],"attr_prefix000attr_suffix");
ofs = strlen("attr_prefix");
pval = 0;
LN=0;]]></code.init>
      <code.krate><![CDATA[/*
if((inlet_rst>0)&&!rst){
	rst=1;
	for(j=0;j<attr_samples.LENGTH;j++){
		attr_samples.array[j]=0;
	}
	for(j=0;j<attr_starts.LENGTH;j++){
		attr_starts.array[j]=0;
	}
	s2=0;
	s1=0;
}
else if(inlet_rst==0){rst=0;}
*/
outlet_load=0;
int trig=inlet_load;
if ((trig>0) && !ntrig) {
	if(attr_first>0){
		for(j=0;j<attr_samples.LENGTH;j++){
		attr_samples.array[j]=0;
	}
	for(j=0;j<attr_starts.LENGTH;j++){
		attr_starts.array[j]=0;
	}
	}
	bool R=inlet_rndLoad;
	ntrig=1;
	int I=1;
	int l=0;
while(attr_starts.array[I]>0){
	s1=attr_starts.array[I];
	s2=I;
	I+=1;
}
    offset = inlet_offset;
   j=param_sampleStart;
   int k=s2;
   disp_first=k;
   if(inlet_new>0){
   	for(j=0;j<64;j++){
   	rnd[j]=param_rndMin+___SMMUL((int32_t)(GenerateRandomNumber()>>1),param_rndMax-param_rndMin<<1);
   	}
   }

   if(attr_first>0){
rem_sz = sizeof(*attr_samples.array)*attr_samples.LENGTH;}
else{rem_sz=inlet_remsize;}
while((R>0?(l<=param_rndSamples):((j>=param_sampleStart)&&(j<=param_sampleEnd)))&&(rem_sz>0))
{   
	//if(k>0){
    //attr_starts.array[k]+=attr_starts.array[k-1] ;
    //attr_starts.array[k]=offset>>4;
    //} 
	FIL FileObject;
    FRESULT err;
    UINT bytes_read;
    codec_clearbuffer();
int i = inlet_index+(R>0?rnd[l]:j);
int i0 = i/10;
   c[ofs+2] = '0'+i-10*i0;
   i = i0; i0 = i/10;
   c[ofs+1] = '0'+i-10*i0;
   i = i0; i0 = i/10;
   c[ofs+0] = '0'+i-10*i0;

    
    err = f_open(&FileObject, &c[0], FA_READ | FA_OPEN_EXISTING);
    if (err != FR_OK) { report_fatfs_error(err,&c[0]); return;}
       
    
    while (rem_sz>0) {
    	LN+=1;
      if (rem_sz>sizeof(fbuff)) {
        err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
        if (bytes_read == 0) break;
        memcpy((char *)(&attr_samples.array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz -= bytes_read;
        offset += bytes_read;
        
      } else {
        err = f_read(&FileObject, fbuff, rem_sz,&bytes_read);
        memcpy((char *)(&attr_samples.array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz = 0;
        
      }
    }    if (err != FR_OK) { report_fatfs_error(err,&c[0]); return;};
    err = f_close(&FileObject);
    if (err != FR_OK) { report_fatfs_error(err,&c[0]); return;};
    
    //attr_starts.array[k]=f_size( &FileObject ); 
    //attr_starts.array[k]=attr_starts.array[k]>>2;
    //if(k>0){
    //attr_starts.array[k]+=attr_starts.array[k-1] ;
    //attr_starts.array[k]=offset;
    //}
	m=attr_samples.LENGTHMASK;
	while((attr_samples.array[m]==0)&&(m>0)){
		m-=1;
	}
	
	attr_starts.array[k]=m;
	disp_samplesize=m-(k>0?attr_starts.array[k-1]:0);
	
    j+=param_sampleStart<param_sampleEnd?1:-1;
   //if(k<1){
   // 	int32_t TP=sizeof(fbuff);
   // 	disp_samplesize=offset/TP;
   // }
    k=k<attr_starts.LENGTHMASK?k+1:attr_starts.LENGTHMASK;
    l+=1;
}

  disp_last=k-(k<63?2:0);
  outlet_load=1;
  }
  else if (!(trig>0)) ntrig=0;
  disp_offset=s1;
  outlet_offset=offset;
  outlet_remsize=rem_sz;
  outlet_first=disp_first;
  outlet_samples=disp_last-disp_first+1;]]></code.krate>
   </obj.normal>
</objdefs>