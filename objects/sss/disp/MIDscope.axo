<objdefs appVersion="1.0.12">
   <obj.normal id="MIDscope" uuid="e22193bf-a8b3-4166-b583-f3bb50c1b0ee">
      <sDescription>bipolar audio rate signal oscilloscope (time domain), showing 128 consecutive samples after the signal becomes positive.

this module has outputs to link several scopes behind each other for a big scope</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>scope.axh</helpPatch>
      <rotatedParams>true</rotatedParams>
      <inlets>
         <frac32buffer.bipolar name="in" description="input"/>
         <bool32 name="hold" description="hold"/>
         <frac32buffer.positive name="syncIn"/>
      </inlets>
      <outlets>
         <frac32buffer name="thru"/>
         <frac32buffer name="syncOut"/>
      </outlets>
      <displays>
         <int8array128.vbar name="1" noLabel="true"/>
         <int8array128.vbar name="2" noLabel="true"/>
         <int8array128.vbar name="3" noLabel="true"/>
         <int8array128.vbar name="4" noLabel="true"/>
      </displays>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[int8_t t[1024];
int index;
int32_t pval;
int32_t write;
int32_t array[1024];]]></code.declaration>
      <code.init><![CDATA[int i;
for(i=0;i<1024;i++) t[i]=0;
index = 0;
pval = 0;]]></code.init>
      <code.krate><![CDATA[int i;
int32_t val;
if (index<0) {
   for(i=0;i<16;i++){
   	
      val = (inlet_syncIn[i]-(512))>(1<<19);
      if (val&&(!pval)){
      	
         index=0; break;
      }
      pval = val;
   }
   if (index == 0){
      for(;i<16;i++){
         t[index++]=(uint8_t)(inlet_in[i]>>21);
      }
   }
} else {    for(i=0;i<16;i++){
      if(index==512) {

         index=-1;
         break;
      }
      t[index++]=(uint8_t)(inlet_in[i]>>21);
   }
   if ((index==-1)&&(!inlet_hold)){
     for(i=0;i<512;i++)
     if(i<128){
       disp_1[i]=t[i];}
       else if(i<256){disp_2[i-128]=t[i];}
       else if(i<384){disp_3[i-256]=t[i];}
       else if(i<512){disp_4[i-384]=t[i];}

     pval = (inlet_syncIn[BUFSIZE-1]-(1<<10))>(1<<19);
   }
}
for(i=0;i<16;i++){
	outlet_thru[i]=inlet_in[i];
}]]></code.krate>
      <code.srate><![CDATA[write+=1;
write=write&127;
outlet_syncOut=array[(write)];
array[write]=(val&&(!pval))>0?1<<27:-1<<27;]]></code.srate>
   </obj.normal>
</objdefs>