<objdefs appVersion="1.0.10">
   <obj.normal id="sRndEuclidPatt" uuid="2a6c4c9c-e535-4c03-b570-56d245a77c63">
      <sDescription>random gate pattern generator
connect &quot;COUNT&quot; to a counter (sss-logic)
connect &quot;LENGTH&quot; to the max-count control
width1 sets the width of the random sequence
REPEAT sets an euclidian division over the entire length. The smaller the value, the smaller the steps-&gt;more gates.
Width sets the width of the gates, being added to the random sequence.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <int32 name="count"/>
         <int32 name="length"/>
         <bool32.rising name="rnd"/>
      </inlets>
      <outlets>
         <frac32 name="rand"/>
      </outlets>
      <displays/>
      <params>
         <bool32.mom name="rand"/>
         <frac32.s.map name="width1"/>
         <frac32.u.map name="repeat"/>
         <frac32.s.map name="width2"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t _val[128];
int32_t vol;
int ntrig;
int8_t lng;
int i;]]></code.declaration>
      <code.init><![CDATA[for(i=0;i<64;i++) _val[i] = (GenerateRandomNumber())>>4;{}
ntrig=0;]]></code.init>
      <code.krate><![CDATA[int32_t repeat=___SMMUL(param_repeat<<3,inlet_length<<2);
int32_t gtrig=inlet_count-((inlet_count/repeat)*repeat);
gtrig=gtrig==0?(1<<27):0;

lng=inlet_length;
if(((param_rand+inlet_rnd)>0)&&(!(ntrig)))
{
for(i=0;i<lng;i++) _val[i] = (GenerateRandomNumber())>>4;
{}
ntrig=1;
}
else if(!((param_rand+inlet_rnd)>0))
{ntrig=0;}
   vol=_val[inlet_count];
   outlet_rand=___SMMUL(vol<<2,param_width1<<2)+___SMMUL(gtrig<<3,param_width2<<2);
]]></code.krate>
   </obj.normal>
</objdefs>