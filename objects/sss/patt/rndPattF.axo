<objdefs appVersion="1.0.12">
   <obj.normal id="rndPattF" uuid="51e68084-34f7-4ce7-b29e-6d2fb66a8b71">
      <sDescription>random generated pattern
each time a trigger is received, positions of the pattern will be randomised or not, depending on the change parameter (in percentage, so 100 is randomising the whole pattern when triggered).

Connect a control to the &quot;length&quot; input to set the total length of the incoming count (eg use my counter, where the max-control is controlled externally and use that max-control to control both modules&apos; length).

With the length-parameter you can set a division of the total length, repeating only a part of the random values.
eg. set max to 8 and the length-knob to about 21.00 and you&apos;ll get a 1,2,3,1,2,3,1,2 repetition.

The chance-parameter sets the chance that any position in the pattern will be randomised when a random-trigger is received.

The pattern will be newly randomised each time you start up your axoloti.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <bool32.rising name="rnd" description="when triggered steps in the array get randomised controlled by chance/change settings"/>
         <int32 name="count" description="input for the counter (logic-&gt;counter)"/>
         <int32 name="length" description="maximum count (eg. use my counter modules as these have in/outs for the length set)"/>
         <int32 name="chance" description="external randomise chance input"/>
         <frac32 name="change" description="external change size input"/>
         <frac32 name="max" description="external control for max output value"/>
         <frac32 name="min" description="external control for min output value"/>
      </inlets>
      <outlets>
         <frac32 name="v"/>
         <bool32.pulse name="rnd"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="repeat" description="sets a repeat length within zero and the &quot;length&quot; input/max array size. 32 would be half way the length. 22 would select 1/3 of the length input/max array size."/>
         <int32 name="chance" description="chance that steps get randomised when a trigger is received at the input">
            <MinValue i="0"/>
            <MaxValue i="100"/>
         </int32>
         <frac32.u.map name="change" description="change-size from current value when a step  is randomised"/>
         <frac32.u.map name="nonMemRnd" description="Sets a chance of a random offset added to the pattern. This offset is not put into the memory and occurs only once."/>
         <frac32.u.map name="size" description="Sets the size of the random offset away from the repeating pattern."/>
         <frac32.u.map name="freeze" description="Sets the chance that the output freezes for a random amount of counts"/>
         <frac32.u.map name="maxFreeze" description="Sets the maximum amount of counts that the output can be frozen"/>
         <bool32.mom name="rnd" description="press to randomise pattern"/>
         <frac32.u.map name="CV" description="move the CV knob to auto-record the values of the knob to the pattern"/>
         <frac32.s.map name="max" description="maximum output value"/>
         <frac32.s.map name="min" description="minimum output value"/>
      </params>
      <attribs>
         <spinner name="maxSteps" MinValue="1" MaxValue="1024" DefaultValue="0"/>
      </attribs>
      <code.declaration><![CDATA[int get[attr_maxSteps];
uint32_t val[attr_maxSteps];
int ntrig;
int count;
int32_t length;
int i;
int on;
int prev;
int32_t Gen;
uint32_t pv;
int upd;
uint32_t Tmp;]]></code.declaration>
      <code.init><![CDATA[on=1;
ntrig = 0;]]></code.init>
      <code.krate><![CDATA[int chance=param_chance+inlet_chance;
int32_t change=param_change+inlet_change;
chance=chance<0?0:chance;
chance=chance>100?100:chance;
int trig=inlet_rnd+param_rnd;
int32_t width=param_max+inlet_max-param_min-inlet_min;

if(inlet_length>0){
length=___SMMUL(param_repeat<<3,inlet_length+1<<2);}
else length=param_repeat>>21;
int TRIG=0;
   if ((trig>0) && !ntrig) {
   	TRIG=1;
   	int32_t size=change<<3;
      for(i=0;i<attr_maxSteps;i++){
         get[i] = (int32_t)(GenerateRandomNumber()% (100));
         if(get[i]<=chance){
         val[i] += (___SMMUL((uint32_t)(GenerateRandomNumber()&((1<<31)-1)),size)<<2)-size;
         val[i]=val[i]&((1<<31)-1);
         val[i]= val[i]>(1<<30)?(1<<31)-val[i]:val[i];   
         }

         }
      ntrig=1;
   }
   else if (!(trig>0)) ntrig=0;
   count=inlet_count-(inlet_count/length)*length;
   
if(!(count==pv)){
	upd=__USAT(upd-1,28);
	Gen=((uint32_t)(GenerateRandomNumber())>>5)<param_nonMemRnd?1:0;
	if(Gen==1){
		Gen=___SMMUL(param_size,(int32_t)GenerateRandomNumber())<<5;
	}
	if(upd==0){
	upd=((uint32_t)(GenerateRandomNumber())>>5)<param_freeze?param_maxFreeze>>23:0;
	}
}
if(!(param_CV==prev)){
	val[count]=param_CV<<3;
}
if(upd==0){
Tmp=val[count]+Gen;
Tmp=Tmp&((1<<30)-1);
}

   outlet_v = (___SMMUL(Tmp>>1,width)<<3)+param_min+inlet_min;
if(on>0){
	for(i=0;i<attr_maxSteps;i++){
         val[i] = (uint32_t)(GenerateRandomNumber()>>2);}
}

on=0;
outlet_rnd=TRIG;
prev=param_CV;

pv=count;]]></code.krate>
   </obj.normal>
</objdefs>