<objdefs appVersion="1.0.10">
   <obj.normal id="autoCurve" uuid="51207049-c4d6-40a1-b2ef-2968a743fdc6">
      <sDescription>controlled curved automation module

feed the new &quot;goal&quot; value into the &quot;newValue&quot; input
at each new gate, the envelope will fade from the current position to the new one at the specified rate.

For an exponential curve, dial the &quot;start&quot; and &quot;end&quot; knobs to the left.
For an inverse-exponential curve, dial the &quot;start&quot; and &quot;end&quot; knobs to the right.
For an S-curve, dial &quot;start&quot; to the left and &quot;end&quot; to the right
For an inversed S-curve, dial &quot;start&quot; to the right and &quot;end&quot; to the left.
&quot;mix&quot; let&apos;s you choose whether the start or end curve has the dominant position (start=left, end=right).

&quot;M&quot; multiplies the rate (faster slope)
&quot;D&quot; divides the rate (slower slope)
rate is calculated based upen the ksamples output of the clock2time module (see my timers folder) to sync to host tempo or LFO.


extra info:

-----Note that if &quot;D&quot; is higher then M, the rate is lower then host tempo. If the incoming gate-tempo is faster, it will never reach it&apos;s goal. Instead it will try to go from it&apos;s latest position to it&apos;s new goal, though again at the given rate. If the tempo is still below gate-tempo, it also won&apos;t make the new goal. If, instead, the rate is higher then the gate-tempo, it will reach the new goal.-----

the curving is done using the start,end and mix parameters.
Each of these parameters are controls for exponential (left), linear(center) and inverse-exponential(right) curving of the envelope.
Maximum exponential is x^3;
(for the &quot;mix&quot; slider, this would be top-center-bottom respectively).
The &quot;mix&quot; envelope will crossfade from the &quot;start&quot; envelope to the &quot;end&quot; envelope.

so, to make an S-curve:
if &quot;start&quot; is set to exponential (counter-clockwise)
&quot;end&quot; is set to inv-exponential (clockwise)
&quot;mix&quot; is set to linear (center)

then the curve will start slowely, speed up to half of it&apos;s goal half-way and slows down when it nears it&apos;s goal.

if instead &quot;mix&quot; is set to exponential, with the other parameters remaining the same, it will be half way it&apos;s goal later.
So it slowly starts changing and if times almost up, it quickly goes to it&apos;s goal and quickly fades it in (because it&apos;s mixed to the inverse-exponential)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <int32 name="ksamples"/>
         <bool32 name="gate"/>
         <frac32 name="newValue"/>
         <int32 name="M"/>
         <int32 name="D"/>
         <frac32 name="start"/>
         <frac32 name="end"/>
         <frac32 name="mix"/>
      </inlets>
      <outlets>
         <frac32 name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="start"/>
         <frac32.s.map name="mix"/>
         <frac32.s.map name="end"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[uint32_t env;
int gtrig;
int atrig;
int dtrig;
int32_t prev;
int32_t current;
int32_t goal;
int32_t EXPO;
int32_t ENV;
int inv;
int32_t expo(int32_t value,int32_t expa){
	if(expa<0){
	value=(1<<27)-value;
	expa=-expa;
	inv=1;
	}
	else{inv=0;}
	int32_t comp=(1<<27)-expa;
	EXPO=___SMMUL(value<<3,(comp+___SMMUL(expa<<3,value<<2))<<2);
	EXPO=___SMMUL(EXPO<<3,(comp+___SMMUL(expa<<3,EXPO<<2))<<2);
	EXPO=___SMMUL(EXPO<<3,(comp+___SMMUL(expa<<3,EXPO<<2))<<2);
	if(inv==1){EXPO=(1<<27)-EXPO;}
}
int32_t M;
int32_t D;
int32_t start;
int32_t end;
int32_t mix;]]></code.declaration>
      <code.init><![CDATA[M=1;
D=1;]]></code.init>
      <code.krate><![CDATA[start=__SSAT(inlet_start+param_start,27);
end=__SSAT(inlet_end+param_end,27);
mix=__SSAT(inlet_mix+param_mix,27);



if((inlet_gate>0)&&!gtrig){

     prev=current;
     goal=inlet_newValue-prev;
     env=0;
     M=inlet_M;
     D=inlet_D;
     M=M>0?M:1;
     D=D>0?D:1;
     gtrig=1;
}
else if (!(inlet_gate>0)){gtrig=0;}

env=env<(1<<31)?(1<<30)/(inlet_ksamples>>5)*M/D+env:(1<<31);

expo(env>>4,-mix);
int32_t varC=EXPO;

expo(env>>4,-(___SMMUL(((1<<27)-EXPO)<<3,start<<2)+___SMMUL(EXPO<<3,end<<2)));
int32_t varA=EXPO;


int32_t outcome=varA;
current=prev+(___SMMUL(outcome<<3,goal<<2));
outlet_out=current;
]]></code.krate>
   </obj.normal>
</objdefs>