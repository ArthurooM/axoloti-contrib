<objdefs appVersion="1.0.12">
   <obj.normal id="gateSpreader" uuid="715a4e6f-8f1c-4c2d-ab10-ed532154a90d">
      <sDescription>This module generates an x-amount of steps within the given max-count (input). Use my &quot;countExt&quot; or &quot;polyCount&quot; module to connect the &quot;max&quot; input/output.
After hitting &quot;generate&quot; it will generate new gates one by one, each time checking which distance between gates is the longest and then randomly divides this distance into 2 gates.

The maximum amount of gates being generated is set by the &quot;gates&quot; selector and their timing can be quantised with the &quot;qnt&quot; selector (powers of 2!).

The amount of gates ACTUALLY TO BE PLAYED depends on the &quot;gates&quot; input which is scaled to the &quot;gates&quot; selector (which just sets the maximum amount of gates to be generated in the array).
When the &quot;gate&quot; input is 0, no gate will be generated.
When &quot;gate&quot; input goes higher, it adds the gates in the order they were created, making smaller and smaller sections by adding gates in the longest &quot;pauzes&quot;. Up to the amount of gates set by the &quot;gate&quot; selector.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <int32 name="count"/>
         <int32 name="max"/>
         <bool32 name="generate"/>
         <frac32 name="gates"/>
      </inlets>
      <outlets>
         <bool32 name="gate"/>
         <int32 name="gates"/>
      </outlets>
      <displays/>
      <params>
         <bool32.mom name="generate"/>
         <int32 name="gates">
            <MinValue i="1"/>
            <MaxValue i="32"/>
         </int32>
         <int32 name="qnt">
            <MinValue i="0"/>
            <MaxValue i="3"/>
         </int32>
      </params>
      <attribs/>
      <code.declaration><![CDATA[//     number & start/length
int16_t data[32][2];
int i;
int j;
bool gen;
int prv;
bool GEN=1;
int gates;]]></code.declaration>
      <code.krate><![CDATA[if((GEN>0)&&!gen){
	gen=1;
	gates=param_gates;//___SMMUL(param_gates<<3,inlet_gates<<2);
	for(i=0;i<32;i++){
	data[i][0]=0;
	data[i][0]=0;
	}
	data[0][1]=inlet_max;
	for(i=0;i<(gates-1);i++)
	{
		int16_t max=0;
		int pos=0;
		for(j=0;j<(i+1);j++)
		{
			if(data[j][1]>max)
			{
				max=data[j][1];
				pos=j;
			}
		}
		int16_t tmp=___SMMUL((int32_t)(data[pos][1]-(1<<param_qnt))<<2,(int32_t)(GenerateRandomNumber()&((1<<30-param_qnt)-1)))+1<<param_qnt;
		data[i+1][1]=data[pos][1]-tmp;
		data[i+1][0]=data[pos][0]+tmp;
		data[pos][1]=tmp;	
	}
}
else if(GEN==0)
{
	gen=0;
}

outlet_gate=0;

if(!(inlet_count==prv))
{
	for(i=0;i<___SMMUL(gates<<3,inlet_gates<<2);i++)
	{
		if(inlet_count==data[i][0])//(___SMMUL((int32_t)(data[i][0])<<14,inlet_max<<3)))
		{
			outlet_gate=1;
		}
	}
}
prv=inlet_count;
outlet_gates=gates;
GEN=param_generate+inlet_generate;]]></code.krate>
   </obj.normal>
</objdefs>