<objdefs appVersion="1.0.12">
   <obj.normal id="melGen1x" uuid="ebe3dfff-255f-4a5d-a0ce-5b26b6e46d63">
      <sDescription>stackable melody generator
Each stacked generator can add it&apos;s own note change to the entire sequence
Together they create an entire sequence with multiple layers to connect your oscillators to.
Each bar a &quot;fill&quot; is generated which starts from the &quot;start&quot; minus the shift parameter for the length of &quot;barlenght-start&quot;(what&apos;s left). The fill goes around the semitone scale toward the next note in the bars-sequence in steps based on chord scaling (2 steps within the scale each time) and holds this new note until the bar restarts (and then it is the actual current note).
Stacking several of them with first a couple short, quick sequences with not many octaves and semitones in it, followed by a couple of slower ones, provides a really nice start to experiment.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>counter.axh</helpPatch>
      <inlets>
         <bool32.rising name="trig" description="trigger to advance sequence"/>
         <bool32.rising name="r" description="reset sequencer"/>
         <int32 name="semi" description="connect to former stacked semi output (inlet acts as INDEX!! selector for notes within a chord!)"/>
         <int32 name="oct" description="connect to former stacked oct output (octave index as in +1,+2,+3,etc)"/>
      </inlets>
      <outlets>
         <bool32.pulse name="restartbar" description="carry pulse of bar restart"/>
         <bool32.pulse name="restartbars" description="carry pulse of bar repeat restart"/>
         <int32 name="semi" description="connect to semi-input of next stacked module (outputs semitone INDEX!! for 7 semitones in a scale, thus not actual semitone pitch!)"/>
         <int32 name="oct" description="connect to octi-input of next stacked module (outputs the octave value as +1/+2 etc)"/>
         <int32 name="self" description="outputs it&apos;s own internal sequence (in actual pitch info)"/>
         <int32 name="sum" description="outputs the sum of external and internal sequences (in actual pitch info)"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="bar" description="bar count length">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="bars" description="amount of bar repeats">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <frac32.u.map name="start" description="startpoint of fill in relation to bar length (length=barlength-start)"/>
         <frac32.u.map name="shift" description="shifts the start of the fill forward"/>
         <int32 name="octaves" description="maximum amount of octaves">
            <MinValue i="1"/>
            <MaxValue i="6"/>
         </int32>
         <int32 name="semis" description="amount of semi tones present (above 1 is multiplied by two and only selecting within scale to select notes in standard chords)">
            <MinValue i="1"/>
            <MaxValue i="7"/>
         </int32>
         <bool32.tgl name="integrate" description="integrates the external semi and octave inputs into it&apos;s  own limitators"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>2</string>
               <string>4</string>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
               <string>128</string>
               <string>256</string>
               <string>512</string>
               <string>1024</string>
               <string>2048</string>
               <string>4096</string>
               <string>8192</string>
               <string>16384</string>
               <string>32768</string>
               <string>65536</string>
               <string>131072</string>
               <string>262144</string>
               <string>524288</string>
               <string>1048576</string>
               <string>2097152</string>
               <string>4194304</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
               <string>22</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;

static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
static const uint32_t BITS = 8;
static const uint32_t GAIN = 20;
int8_t *array;
int32_t cnt;
int note[7]={0,2,4,5,7,9,11};
int stp,ofs;]]></code.declaration>
      <code.init><![CDATA[count=0;
   ntrig = 0;
   rtrig = 0;
static int8_t _array[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
{ 
  int i;
  array[0]=0;
  for(i=1;i<LENGTH;i++){
  	int chg=(int32_t)(GenerateRandomNumber()%21);
  	chg+=(chg%7)==0?1:0;
  	array[i]=array[i-1]+chg;
  }
}
stp=(int32_t)GenerateRandomNumber()%14;
stp+=(stp%7)==0?1:0;]]></code.init>
      <code.krate><![CDATA[outlet_restartbar=0;
outlet_restartbars=0;
int s1,s2,o1,o2;

if(param_integrate){
	s1=o1=0;
	s2=inlet_semi;
	o2=inlet_oct*7;
}
else{
	s2=o2=0;
	s1=inlet_semi;
	o1=inlet_oct;
}
if ((inlet_trig>0) && !ntrig) {
   count += 1; 
   if(count>=param_bar)
   { ofs=0;
   	count = 0;
   	outlet_restartbar = 1;
   	cnt+=1;
   	stp=(int32_t)GenerateRandomNumber()%8;
   	stp+=(stp%7)==0?1:0;
   	if(cnt>=param_bars)
   	{
   		cnt=0;
   		outlet_restartbars=1;
   	}
   	
   }
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; cnt=0;rtrig = 1;outlet_restartbar=1;}
else if (!(inlet_r>0)) rtrig=0;
int shft=___SMMUL(param_shift,param_bar<<5);
int ct=(count+shft)%param_bar;
int start=___SMMUL(param_bar<<5,param_start);
int left=__USAT(count-start,28);
ct=cnt;
if(left>0){
	left=(param_bar-start-left)*stp;
	ofs=1;
}
int mem=(array[ct+ofs&LENGTHMASK]+left);
left=mem+s2+o2;

int oct=left/param_semis;
if((left<0)&&(left>-param_semis)){oct-=1;}
left=left%param_semis;
left+=left<0?param_semis:0;
left*=2;
left+=s1;
left=left%7;
left+=left<0?7:0;

oct=oct%param_octaves;
oct+=(oct<0?param_octaves:0)+o1;
outlet_sum= note[left]+oct*12;
outlet_semi=left;
outlet_oct=oct;


left=mem;
oct=left/param_semis;
if((left<0)&&(left>-param_semis)){oct-=1;}
left=left%param_semis;
left+=left<0?param_semis:0;
left*=2;
left=left%7;
left+=left<0?7:0;
outlet_self=note[left]+oct*12;]]></code.krate>
   </obj.normal>
</objdefs>