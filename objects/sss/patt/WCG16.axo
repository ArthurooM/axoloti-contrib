<objdefs appVersion="1.0.11">
   <obj.normal id="WCG16" uuid="207c143e-27e9-4f97-8e27-9233bfc81c2d">
      <sDescription>WCG12 calculates the chance that certain notes will follow up on previous played notes.
(you can also use other data, but remember the note-input should be between 0 and 11 (12 notes), for a width of 16, use the WCG16.

The internal array can be set externally with the WCR12 or WCM12 modules (use WCR16 and WCM16 for the WCG16).
WITHOUT ONE OF THESE, THE MODULE WON&apos;T WORK AS LONG AS YOU HAVEN&apos;T RECORDED A CHANCETABLE BEFORE AND SAVED IT!

Sending note and gate data to the WCR12 will record for each note which notes have a chance to follow up on it (each time a note is played after teo previous notes, the weight of that sequence gets +1).

Each sequence can be manually edited by the WCM12/WCM16 by selecting the previous 2 notes and setting the chance for each note that they will follow up on this 2-note sequence.

Sending a gate/trigger to this module (WCG12/WCG16) will make it step through notes each time re-calculating the next possible note that could follow up on the two previous ones.

2 external (ext1/ext2) inputs are added to override the &quot;previous notes&quot; and will be selected when the ext1/ext2 switches as &quot;on&quot;. Ext1 will override the oldest previous note and ext2 will override the last previous note.

Again, you don&apos;t need to use note-information. You can also record velocity (divide it to fit in a width of 12 or 16 -&gt;WCG12 or WCG16), gate-length or rhythmic values (use a counter that repeats after x-amount of steps and record the chance that certain count-lengths follow up on each other)-&gt;see demo

The chance-array can be saved to a preset-index and will be saved under a fixed filename+presetindex.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>table.axh</helpPatch>
      <inlets>
         <bool32 name="trig"/>
         <bool32 name="save"/>
         <bool32 name="load"/>
         <int32 name="preset"/>
         <int32 name="ext1"/>
         <int32 name="ext2"/>
      </inlets>
      <outlets>
         <int32 name="note"/>
      </outlets>
      <displays/>
      <params>
         <bool32.mom name="save"/>
         <bool32.mom name="load"/>
         <int32 name="preset">
            <MinValue i="0"/>
            <MaxValue i="999"/>
         </int32>
         <bool32.tgl name="ext1"/>
         <bool32.tgl name="ext2"/>
      </params>
      <attribs/>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[static const uint32_t LENGTH = 4096;
int16_t *array;
int note;
int i;
int32_t prev;
int ntrig;
int32_t max;
int32_t chance;
int select;
int T;
int strig;
int ltrig;
char c[64];
int offset;
int pval;
int load;
int NT;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[LENGTH] __attribute__ ((section (".sdram")));
array = &_array[0];

strcpy(&c[0],"0:/ch16000.tab");
offset = strlen("0:/ch16");
pval = 0;

//for(i=0;i<LENGTH;i++){
//	array[i]=0;
//}]]></code.init>
      <code.krate><![CDATA[int16_t preset=param_preset+inlet_preset;
if (preset != pval){   pval = preset;
   int i = preset;   int i0 = i/10;
   c[offset+2] = '0'+i-10*i0;
   i = i0; i0 = i/10;
   c[offset+1] = '0'+i-10*i0;
   i = i0; i0 = i/10;
   c[offset+0] = '0'+i-10*i0;
}

int save=inlet_save+param_save;
load=inlet_load+param_load;
  if ((save>0) && !strig) {
    strig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_written;
    err = f_open(&FileObject, &c[0], FA_WRITE | FA_CREATE_ALWAYS);
    if (err != FR_OK) {report_fatfs_error(err,&c[0]); return;}
    int rem_sz = sizeof(*array)*LENGTH;
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        memcpy((char *)fbuff,(char *)(&array[0]) + offset, sizeof(fbuff));
        err = f_write(&FileObject, fbuff, sizeof(fbuff),&bytes_written);
        rem_sz -= sizeof(fbuff);
        offset += sizeof(fbuff);
      } else {
        memcpy((char *)fbuff,(char *)(&array[0]) + offset, rem_sz);
        err = f_write(&FileObject, fbuff, rem_sz, &bytes_written);
        rem_sz = 0;
      }
    }    if (err != FR_OK) report_fatfs_error(err,&c[0]);
    err = f_close(&FileObject);
    if (err != FR_OK) report_fatfs_error(err,&c[0]);
  }
  else if (!(save>0)) strig=0;


  if ((load>0) && !ltrig) {
    ltrig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_read;
    err = f_open(&FileObject, &c[0], FA_READ | FA_OPEN_EXISTING);
    if (err != FR_OK) { report_fatfs_error(err,&c[0]); return;}
    int rem_sz = sizeof(*array)*LENGTH;
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
        if (bytes_read == 0) break;
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz -= bytes_read;
        offset += bytes_read;
      } else {
        err = f_read(&FileObject, fbuff, rem_sz,&bytes_read);
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz = 0;
      }
    }    if (err != FR_OK) { report_fatfs_error(err,&c[0]); return;};
    err = f_close(&FileObject);
    if (err != FR_OK) { report_fatfs_error(err,&c[0]); return;};
  }
  else if (!(load>0)) ltrig=0;


if((inlet_trig>0)&&!ntrig){
	
int first=inlet_ext1;
first=first-first/16*16;
first=first<0?first+16:first;

int sec=inlet_ext2;
sec=sec-sec/16*16;
sec=sec<0?sec+16:sec;

ntrig=1;
max=array[prev*256+note*16+15];
max=max>0?max:1;
chance=(int32_t)(GenerateRandomNumber()>>5);
chance=chance-chance/max*max;
chance=chance<0?chance+max:chance;

T=-1;
if(param_ext1==1){prev=first;}
if(param_ext2==1){note=sec;}

	for(i=0;i<16;i++){
	if(T==-1){
	T=(array[prev*256+note*16+i]>=chance)?i:-1;
	}
	}
prev=NT;
note=T;
note=note-note/16*16;
note=note<0?note+16:note;
NT=note;

}
else if(inlet_trig==0){ntrig=0;}

outlet_note=note;]]></code.krate>
   </obj.normal>
</objdefs>