<objdefs appVersion="1.0.11">
   <obj.normal id="rndWeightPatt" uuid="b62f0b2e-fb1f-4e35-9ca7-c5396a86a6b6">
      <sDescription>Weighted random pattern generator
Based on the RndWeidthNote module (earlier version to be more precise), but without the ability to save multiple chance tables.
This does mean that it&apos;s still fixed to the 12 possible possitions of the 12 notes/octave.
So it can be used as a note generator, but also as a random value generator.
when using as a kind random value generator for 8 possible positions, just leave the last 4 controls to zero.</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <rotatedParams>true</rotatedParams>
      <inlets>
         <bool32 name="trig"/>
         <bool32 name="rnd"/>
         <int32 name="count"/>
         <int32 name="length"/>
         <int32 name="maxOct"/>
         <int32 name="minOct"/>
         <int32 name="pattern"/>
      </inlets>
      <outlets>
         <frac32 name="random"/>
         <frac32 name="repeating"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.mapvsl name="C" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="64.0"/>
         </frac32.u.mapvsl>
         <frac32.u.mapvsl name="cis" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="64.0"/>
         </frac32.u.mapvsl>
         <frac32.u.mapvsl name="D" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="64.0"/>
         </frac32.u.mapvsl>
         <frac32.u.mapvsl name="dis" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="64.0"/>
         </frac32.u.mapvsl>
         <frac32.u.mapvsl name="E" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="64.0"/>
         </frac32.u.mapvsl>
         <frac32.u.mapvsl name="F" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="64.0"/>
         </frac32.u.mapvsl>
         <frac32.u.mapvsl name="fis" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="64.0"/>
         </frac32.u.mapvsl>
         <frac32.u.mapvsl name="G" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="64.0"/>
         </frac32.u.mapvsl>
         <frac32.u.mapvsl name="gis" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="64.0"/>
         </frac32.u.mapvsl>
         <frac32.u.mapvsl name="A" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="64.0"/>
         </frac32.u.mapvsl>
         <frac32.u.mapvsl name="ais" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="64.0"/>
         </frac32.u.mapvsl>
         <frac32.u.mapvsl name="B" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="64.0"/>
         </frac32.u.mapvsl>
      </params>
      <attribs>
         <spinner name="maxlength" MinValue="1" MaxValue="64" DefaultValue="16"/>
         <spinner name="maxpatterns" MinValue="1" MaxValue="16" DefaultValue="0"/>
      </attribs>
      <code.declaration><![CDATA[uint32_t chance[13];
uint32_t melody[attr_maxpatterns][attr_maxlength];
int i;
int j;
int gtrig;
int32_t select;
int32_t note;
int count;
int rtrig;
int32_t Melody;
int oct[attr_maxpatterns][attr_maxlength];
int prev;
int init;]]></code.declaration>
      <code.init><![CDATA[init=1;]]></code.init>
      <code.krate><![CDATA[chance[0]=0;
chance[1]=param_C;
chance[2]=param_cis;
chance[3]=param_D;
chance[4]=param_dis;
chance[5]=param_E;
chance[6]=param_F;
chance[7]=param_fis;
chance[8]=param_G;
chance[9]=param_gis;
chance[10]=param_A;
chance[11]=param_ais;
chance[12]=param_B;

int length=inlet_length>attr_maxlength?attr_maxlength:inlet_length;
count=inlet_count-(inlet_count/length)*length;
count=count<0?count+length:count;

int pattern=inlet_pattern-(inlet_pattern/attr_maxpatterns)*attr_maxpatterns;
pattern=pattern<0?pattern+attr_maxpatterns:pattern;




int32_t total=0;
for(i=0;i<13;i++){
	total+=chance[i];
}
for(i=2;i<13;i++){
	chance[i]=chance[i]+chance[i-1];
}
if((inlet_trig)&&!gtrig){
	select=___SMMUL(((uint32_t)(GenerateRandomNumber()))>>1,total)<<1;
}


int diff=inlet_maxOct-inlet_minOct;
if((inlet_rnd>0)&&!rtrig)
{
	rtrig=1;
	for(i=0;i<length;i++)
	{
		melody[pattern][i]=___SMMUL(((uint32_t)(GenerateRandomNumber()))>>1,total<<1);
		oct[pattern][i]=inlet_minOct*12+(___SMMUL(((uint32_t)(GenerateRandomNumber()))>>1,(diff<<1)+1))*12;
	}
}
else if(inlet_rnd==0){rtrig=0;}

if(init>0){
for(j=0;j<attr_maxpatterns;j++){
for(i=0;i<attr_maxlength;i++){
	melody[j][i]=___SMMUL(((uint32_t)(GenerateRandomNumber()))>>1,total<<1);
	oct[j][i]=inlet_minOct*12+(___SMMUL(((uint32_t)(GenerateRandomNumber()))>>1,(diff<<1)+1))*12;
	}}}
init=0;


if((inlet_trig)&&!gtrig)
{
	gtrig=1;
	for(i=11;i>=0;i--)
	{
		note=((select>=chance[i])&&(select<chance[i+1]))>0?i:note;
	}
	note+=inlet_minOct*12+(___SMMUL(((uint32_t)(GenerateRandomNumber()))>>1,(diff<<1)+1))*12;
}
else if(inlet_trig==0){gtrig=0;}

if(!(prev==count))
{
	for(i=11;i>=0;i--)
	{
		Melody=((melody[pattern][count]>=chance[i])&&(melody[pattern][count]<chance[i+1]))>0?i:Melody;
	}
	Melody+=oct[pattern][count];
}

outlet_random=note<<21;
outlet_repeating=Melody<<21;
prev=count;]]></code.krate>
   </obj.normal>
</objdefs>