<objdefs appVersion="1.0.9">
   <obj.normal id="16mod_recorder" uuid="2e2fa587-5a05-4c7a-9ff6-2c2fa08a58ba">
      <sDescription>16 output modulation recorder</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>table.axh</helpPatch>
      <inlets>
         <int32.positive name="read01"/>
         <int32.positive name="read02"/>
         <int32.positive name="read03"/>
         <int32.positive name="read04"/>
         <int32.positive name="read05"/>
         <int32.positive name="read06"/>
         <int32.positive name="read07"/>
         <int32.positive name="read08"/>
         <int32.positive name="read09"/>
         <int32.positive name="read10"/>
         <int32.positive name="read11"/>
         <int32.positive name="read12"/>
         <int32.positive name="read13"/>
         <int32.positive name="read14"/>
         <int32.positive name="read15"/>
         <int32.positive name="read16"/>
         <int32.positive name="write" description="index (integer, not fraction)"/>
         <frac32 name="v" description="value"/>
         <int32 name="sel"/>
         <bool32.rising name="trig" description="trigger"/>
      </inlets>
      <outlets>
         <frac32 name="01"/>
         <frac32 name="02"/>
         <frac32 name="03"/>
         <frac32 name="04"/>
         <frac32 name="05"/>
         <frac32 name="06"/>
         <frac32 name="07"/>
         <frac32 name="08"/>
         <frac32 name="09"/>
         <frac32 name="10"/>
         <frac32 name="11"/>
         <frac32 name="12"/>
         <frac32 name="13"/>
         <frac32 name="14"/>
         <frac32 name="15"/>
         <frac32 name="16"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <objref name="table01"/>
         <objref name="table02"/>
         <objref name="table03"/>
         <objref name="table04"/>
         <objref name="table05"/>
         <objref name="table06"/>
         <objref name="table07"/>
         <objref name="table08"/>
         <objref name="table09"/>
         <objref name="table10"/>
         <objref name="table11"/>
         <objref name="table12"/>
         <objref name="table13"/>
         <objref name="table14"/>
         <objref name="table15"/>
         <objref name="table16"/>
      </attribs>
      <code.declaration><![CDATA[   int ntrig;
]]></code.declaration>
      <code.init><![CDATA[   int ntrig = 0;
]]></code.init>
      <code.krate><![CDATA[

   switch(inlet_sel>0?inlet_sel:0){
   
   case 0:
      
      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table01.LENGTH)
         attr_table01.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table01.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
   
   break;
   case 1:
   
      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table02.LENGTH)
         attr_table02.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table02.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0; 
      
   break;
   case 2: 
   
      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table03.LENGTH)
         attr_table03.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table03.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
   
   break;
   case 3:

      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table04.LENGTH)
         attr_table04.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table04.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
    
   break;
   case 4: 

      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table05.LENGTH)
         attr_table05.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table05.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
   
   break;
   case 5: 

      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table06.LENGTH)
         attr_table06.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table06.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
   
   break;
   case 6: 

      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table07.LENGTH)
         attr_table07.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table07.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
   
   break;
   case 7: 

      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table08.LENGTH)
         attr_table08.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table08.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
   
   break;
    case 8:
      
      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table09.LENGTH)
         attr_table09.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table09.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
   
   break;
   case 9:
   
      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table10.LENGTH)
         attr_table10.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table10.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0; 
      
   break;
   case 10: 
   
      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table11.LENGTH)
         attr_table11.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table11.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
   
   break;
   case 11:

      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table12.LENGTH)
         attr_table12.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table12.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
    
   break;
   case 12: 

      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table13.LENGTH)
         attr_table13.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table13.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
   
   break;
   case 13: 

      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table14.LENGTH)
         attr_table14.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table14.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
   
   break;
   case 14: 

      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table15.LENGTH)
         attr_table15.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table15.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
   
   break;
   case 15: 

      if ((inlet_trig>0) && !ntrig) {
      ntrig=1;
      if (inlet_write<attr_table16.LENGTH)
         attr_table16.array[inlet_write]=__SSAT(inlet_v,28)>>attr_table16.GAIN;
      }
      if (!(inlet_trig>0)) ntrig=0;
   
   break;
   default: break;


   }

   outlet_01= attr_table01.array[__USAT(inlet_read01,attr_table01.LENGTHPOW)]<<attr_table01.GAIN;
   outlet_02= attr_table02.array[__USAT(inlet_read02,attr_table02.LENGTHPOW)]<<attr_table02.GAIN;
   outlet_03= attr_table03.array[__USAT(inlet_read03,attr_table03.LENGTHPOW)]<<attr_table03.GAIN;
   outlet_04= attr_table04.array[__USAT(inlet_read04,attr_table04.LENGTHPOW)]<<attr_table04.GAIN;
   outlet_05= attr_table05.array[__USAT(inlet_read05,attr_table05.LENGTHPOW)]<<attr_table05.GAIN;
   outlet_06= attr_table06.array[__USAT(inlet_read06,attr_table06.LENGTHPOW)]<<attr_table06.GAIN;
   outlet_07= attr_table07.array[__USAT(inlet_read07,attr_table07.LENGTHPOW)]<<attr_table07.GAIN;
   outlet_08= attr_table08.array[__USAT(inlet_read08,attr_table08.LENGTHPOW)]<<attr_table08.GAIN;
   outlet_09= attr_table09.array[__USAT(inlet_read09,attr_table09.LENGTHPOW)]<<attr_table09.GAIN;
   outlet_10= attr_table10.array[__USAT(inlet_read10,attr_table10.LENGTHPOW)]<<attr_table10.GAIN;
   outlet_11= attr_table11.array[__USAT(inlet_read11,attr_table11.LENGTHPOW)]<<attr_table11.GAIN;
   outlet_12= attr_table12.array[__USAT(inlet_read12,attr_table12.LENGTHPOW)]<<attr_table12.GAIN;
   outlet_13= attr_table13.array[__USAT(inlet_read13,attr_table13.LENGTHPOW)]<<attr_table13.GAIN;
   outlet_14= attr_table14.array[__USAT(inlet_read14,attr_table14.LENGTHPOW)]<<attr_table14.GAIN;
   outlet_15= attr_table15.array[__USAT(inlet_read15,attr_table16.LENGTHPOW)]<<attr_table15.GAIN;
   outlet_16= attr_table16.array[__USAT(inlet_read16,attr_table16.LENGTHPOW)]<<attr_table16.GAIN;

]]></code.krate>
   </obj.normal>
</objdefs>