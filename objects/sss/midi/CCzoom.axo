<objdefs appVersion="1.0.12">
   <obj.normal id="CCzoom" uuid="a536984f-a758-4c17-93f1-5b1cf946d215">
      <sDescription>Receives Midi Continuous Controller messages
Has a CC-entry for setting a &quot;zoom&quot; function. This bitshifts the incoming midiCC and only updates the part of the internal value that fits the zoom-bit-depth. This allows for a &quot;universal zoom setting&quot;, so every parameter can be controlled up to the tiniest precision.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>midi_in.axh</helpPatch>
      <inlets/>
      <outlets>
         <frac32.positive name="midiCC" description="midi CC 0-63.5"/>
         <bool32.pulse name="trig" description="trigger output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <spinner name="cc" MinValue="0" MaxValue="127" DefaultValue="0"/>
         <spinner name="default" MinValue="0" MaxValue="127" DefaultValue="0"/>
         <spinner name="zoomcc" MinValue="0" MaxValue="127" DefaultValue="0"/>
      </attribs>
      <code.declaration><![CDATA[int32_t ccv;
int32_t ntrig;
int zoom;
int32_t vi27=(1<<27)-1;]]></code.declaration>
      <code.init><![CDATA[ccv = attr_default << 20;
zoom=0;]]></code.init>
      <code.krate><![CDATA[outlet_midiCC= ccv;
outlet_trig = ntrig;
ntrig = 0;]]></code.krate>
      <code.midihandler><![CDATA[if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc)) {
	int32_t tmp1=((ccv<<zoom+8)&vi27)>>zoom+8;
	int32_t tmp2=(ccv>>27-zoom)<<27-zoom;
	ccv = tmp1+(data2<<20-zoom)+tmp2; ntrig = 1;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_zoomcc)) { zoom = data2>>3; ntrig = 1;}]]></code.midihandler>
   </obj.normal>
</objdefs>