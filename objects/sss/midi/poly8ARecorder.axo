<objdefs appVersion="1.0.12">
   <obj.normal id="poly8ARecorder" uuid="c72af715-9725-4175-9682-a60852453d62">
      <sDescription>Midi 8-voice input recorder with polyphonic aftertouch record.
Aftertouch is recorded at the same rate of the count input.
Notes are recorded 1/6 of the rate of the count input.

Multiple voice allocation modes using the &quot;poly&quot; switch:
1= monophonic, notes will be recorded to the selected channel (&quot;select&quot; switch)
2= internal count steps through the 8 voices for each incoming midi note
3= checks the lowest empty channel and records incoming midi notes to that channel
4= polyphonic, uses the polyphonic index to write to certain channel (needs to be in a polyphonic subpatch for this to work!!)

-set the size(maximum length) of the pattern-table before start
-set the length of the pattern during playtime with &quot;length&quot;
-connect a counter or the pos24ppq of the midi clock to the count-input. Notes will be recorded at pos4ppq rate and aftertouch on pos24ppq.
-connect the &quot;active&quot; output of the midi counter or a switch to the &quot;active&quot; input, otherwise nothing will be played!-&gt; only plays when active is high!
-to record, press the &quot;rec&quot; button

-to save your recorded pattern, add a string/indexed to the filename input.
-press save for saving the pattern to your SDcard
-press load to load a pattern from your SDcard
When there is still audio playing, a short bleep will sound when you load/save a pattern. To avoid this, (automatically) mute the audio out when pattern is loaded/saved.

Each channel can send on it&apos;s own midichannel, allowing you to play different synthesizers from this single midi recorder.

This module pairs very well with the arturia beatstep pro. Finally an aftertouch recorder!</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>midi_in.axh</helpPatch>
      <inlets>
         <bool32 name="active"/>
         <int32 name="count"/>
         <charptr32 name="filename"/>
         <bool32 name="load"/>
      </inlets>
      <outlets/>
      <displays/>
      <params>
         <int32 name="midichannelIn">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <int32 name="channelOut1">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <int32 name="channelOut2">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <int32 name="channelOut3">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <int32 name="channelOut4">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <int32 name="channelOut5">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <int32 name="channelOut6">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <int32 name="channelOut7">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <int32 name="channelOut8">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <bool32.tgl name="rec"/>
         <int32 name="length">
            <MinValue i="4"/>
            <MaxValue i="512"/>
         </int32>
         <int32.hradio name="poly">
            <MaxValue i="4"/>
         </int32.hradio>
         <int32.hradio name="selectHi">
            <MaxValue i="8"/>
         </int32.hradio>
         <int32.hradio name="selectLow">
            <MaxValue i="8"/>
         </int32.hradio>
         <bool32.mom name="clear"/>
         <bool32.mom name="load"/>
         <bool32.mom name="save"/>
      </params>
      <attribs>
         <spinner name="size" MinValue="8" MaxValue="512" DefaultValue="16"/>
      </attribs>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[static const uint32_t LENGTH = (attr_size<<3)*9;
int8_t *array;



int8_t _note;
int _gate;
uint8_t _velo;
uint8_t _rvelo;
uint32_t _touch;

unsigned int G[8];
uint32_t N[8];
uint32_t V[8];
int32_t T[8];
int pchannel;
int32_t i;
int midichannelIn;
int channel[8];
int count;
int cntFast;
int cntSlow;
int rec;
uint32_t pN[8];
int index;
int poly;
int select;
int Select;
int ctrig;
int strig;
int ltrig;
int32_t val[8];
int ntrig[8];
int mtrig;
int lastnote[8];
int fast;
int note;
int find;
int gtrig[8];
int POLYINDEX;]]></code.declaration>
      <code.init><![CDATA[static int8_t _array[LENGTH] __attribute__ ((section (".sdram")));
array = &_array[0];



count=0;
_gate = 0;
_note = 0;
_touch = 0;]]></code.init>
      <code.krate><![CDATA[int load=param_load+inlet_load;
if((param_save>0)&&!strig){
    strig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_written;
    err = f_open(&FileObject, inlet_filename, FA_WRITE | FA_CREATE_ALWAYS);
    if (err != FR_OK) {report_fatfs_error(err,"inlet_filename"); return;}
    int rem_sz = sizeof(*array)*(LENGTH);
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        memcpy((char *)fbuff,(char *)(&array[0]) + offset, sizeof(fbuff));
        err = f_write(&FileObject, fbuff, sizeof(fbuff),&bytes_written);
        rem_sz -= sizeof(fbuff);
        offset += sizeof(fbuff);
      } else {
        memcpy((char *)fbuff,(char *)(&array[0]) + offset, rem_sz);
        err = f_write(&FileObject, fbuff, rem_sz, &bytes_written);
        rem_sz = 0;
      }
    }    if (err != FR_OK) report_fatfs_error(err,"inlet_filename");
    err = f_close(&FileObject);
    if (err != FR_OK) report_fatfs_error(err,"inlet_filename");
  }
  else if(!(param_save>0)){strig=0;}

  if((load>0)&&!ltrig){
    ltrig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_read;
    err = f_open(&FileObject, inlet_filename, FA_READ | FA_OPEN_EXISTING);
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;}
    int rem_sz = sizeof(*array)*(LENGTH);
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
        if (bytes_read == 0) break;
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz -= bytes_read;
        offset += bytes_read;
      } else {
        err = f_read(&FileObject, fbuff, rem_sz,&bytes_read);
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz = 0;
      }
    }    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;};
    err = f_close(&FileObject);
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;};
  }
  else if(!(load>0)){ltrig=0;}



if((param_clear>0)&&!ctrig){
	ctrig=1;
	for(i=0;i<LENGTH;i++){
		array[i]=0;
	}
}
else if(param_clear==0){ctrig=0;}

  if((_gate>0)&&!mtrig){
  count=(count+1)&7;
  find=8;
  for(i=0;i<8;i++){if(array[cntSlow+((7-i)*attr_size)]==0){find=7-i;}}
  find=find==8?((int32_t)(GenerateRandomNumber()))&7:find;
  mtrig=1;}
  else if(_gate==0){mtrig=0;}
  


poly=param_poly;
select=param_selectLow;
Select=param_selectHi;

if(poly==3){index=parent->polyIndex;}
if(poly==2){index=find;}
if(poly==1){index=count;}
if(poly==0){index=select;}
index=index-select;
index=index-(index/Select)*Select+select;
rec=param_rec;
int32_t fastlength=param_length*6;
cntFast=inlet_count-(inlet_count/(fastlength))*fastlength;
cntSlow=inlet_count/6;
cntSlow=cntSlow-(cntSlow/param_length)*param_length;

midichannelIn=param_midichannelIn-1;
channel[0]=param_channelOut1;
channel[1]=param_channelOut2;
channel[2]=param_channelOut3;
channel[3]=param_channelOut4;
channel[4]=param_channelOut5;
channel[5]=param_channelOut6;
channel[6]=param_channelOut7;
channel[7]=param_channelOut8;
int Ctrig=0;
if(!(pchannel==midichannelIn)){
	for(i=0;i<8;i++){
		G[i]=0;
	}
}

if(param_rec>0){
if(G[index]){
	gtrig[index]=1;
	array[cntSlow+(index)*attr_size]=G[index];
	array[cntSlow+(index+8)*attr_size]=N[index];
	array[cntSlow+(index+16)*attr_size]=V[index];
	array[cntFast+(index*6+24)*attr_size]=T[index];}
else if((G[index]==0)&&(gtrig[index])){
	array[cntSlow+(index)*attr_size]=G[index];
	gtrig[index]=0;
}
}


	G[0]=array[cntSlow];
	G[1]=array[cntSlow+attr_size];
	G[2]=array[cntSlow+attr_size*2];
	G[3]=array[cntSlow+attr_size*3];
	G[4]=array[cntSlow+attr_size*4];
	G[5]=array[cntSlow+attr_size*5];
	G[6]=array[cntSlow+attr_size*6];
	G[7]=array[cntSlow+attr_size*7];
	N[0]=array[cntSlow+attr_size*8];
	N[1]=array[cntSlow+attr_size*9];
	N[2]=array[cntSlow+attr_size*10];
	N[3]=array[cntSlow+attr_size*11];
	N[4]=array[cntSlow+attr_size*12];
	N[5]=array[cntSlow+attr_size*13];
	N[6]=array[cntSlow+attr_size*14];
	N[7]=array[cntSlow+attr_size*15];
	V[0]=array[cntSlow+attr_size*16];
	V[1]=array[cntSlow+attr_size*17];
	V[2]=array[cntSlow+attr_size*18];
	V[3]=array[cntSlow+attr_size*19];
	V[4]=array[cntSlow+attr_size*20];
	V[5]=array[cntSlow+attr_size*21];
	V[6]=array[cntSlow+attr_size*22];
	V[7]=array[cntSlow+attr_size*23];
	T[0]=array[cntFast+attr_size*24];
	T[1]=array[cntFast+attr_size*30];
	T[2]=array[cntFast+attr_size*36];
	T[3]=array[cntFast+attr_size*42];
	T[4]=array[cntFast+attr_size*48];
	T[5]=array[cntFast+attr_size*54];
	T[6]=array[cntFast+attr_size*60];
	T[7]=array[cntFast+attr_size*66];


for(i=0;i<8;i++){
	pN[i]=(!(N[i]==pN[i]))?1:0;
}

if(inlet_active==0){
	count=0;
	for(i=0;i<8;i++){G[i]=0;}
}

for(i=0;i<8;i++){
if ((G[i]-pN[i]>0) && !ntrig[i]) {
lastnote[i] = (N[i])&0x7F;
PatchMidiInHandler(MIDI_DEVICE_INTERNAL,0,MIDI_NOTE_ON + (channel[i]-1),lastnote[i],V[i]);  ntrig[i]=1;
}
if (!(G[i]-pN[i]>0) && ntrig[i]) {PatchMidiInHandler((midi_device_t) 0,0,MIDI_NOTE_OFF + (channel[i]-1),lastnote[i],__USAT(V[i],7)); ntrig[i]=0;}
}


for(i=0;i<8;i++){
if (G[i]>0){
if(!(fast==cntFast)){
note = (N[i])&0x7F;
PatchMidiInHandler(MIDI_DEVICE_INTERNAL, 0,MIDI_POLY_PRESSURE + (channel[i]-1),note,T[i]);
}
}
}

for(i=0;i<8;i++){
	pN[i]=N[i];
}

pchannel=midichannelIn;
fast=cntFast;]]></code.krate>
      <code.midihandler><![CDATA[if(poly==3){index=parent->polyIndex;}
if(poly==2){index=find;}
if(poly==1){index=count;}
if(poly==0){index=select;}
index=index-select;
index=index-(index/Select)*Select+select;

if(rec>0){
if ((status == MIDI_NOTE_ON + midichannelIn) && (data2)) {

  _velo = data2;
  _note = data1;
  _gate = 1;
N[index]= _note;
G[index]= _gate;
V[index]= _velo;
T[index]= ___SMMUL(_touch<<23,_touch<<22)>>20;
} else if (((status == MIDI_NOTE_ON + midichannelIn) && (!data2))||
          (status == MIDI_NOTE_OFF + midichannelIn)) {
  if (_note == data1) {
    _gate = 0;
    G[index]= _gate;
    
  }
} else if ((status == midichannelIn + MIDI_POLY_PRESSURE)&&(data1 == _note)) {
  _touch = data2;
  T[index]= _touch;
} else if ((status == midichannelIn + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
  _gate = 0;
  G[index]= _gate;
  
}
}]]></code.midihandler>
   </obj.normal>
</objdefs>