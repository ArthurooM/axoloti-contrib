<objdefs appVersion="1.0.12">
   <obj.normal id="QuNeoMIDI2CV" uuid="3433bb61-6bfb-45ad-a3fb-a80912875f48">
      <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity to use with the QuNeo midicontroller.
The module sorts out the 2 extra X/Y midicontrols that are send with each note and outputs these a 2 extra polyphonic controls next to the pressure output.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>midi_in.axh</helpPatch>
      <inlets/>
      <outlets>
         <frac32.bipolar name="note" description="midi note number (-64..63)"/>
         <bool32 name="gate" description="key pressed, no retrigger legato"/>
         <bool32 name="gate2" description="key pressed, retrigger on legato"/>
         <frac32.positive name="velocity" description="note-on velocity"/>
         <frac32.positive name="releaseVelocity" description="note-off velocity"/>
         <frac32 name="pressure"/>
         <frac32 name="CV1"/>
         <frac32 name="CV2"/>
         <int32 name="polyindex"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[int8_t _note;
int32_t _gate;
int32_t _gate2;
uint8_t _velo;
uint8_t _rvelo;
int32_t ccv0[128];
int32_t ccv1[128];
int32_t ccv2[128];
int8_t _tmp;]]></code.declaration>
      <code.init><![CDATA[_gate = 0;
_note = 0;]]></code.init>
      <code.krate><![CDATA[outlet_note= _note<<21;
outlet_gate= _gate;
outlet_gate2= _gate2;
_gate2 = _gate;
outlet_velocity= _velo<<20;
outlet_releaseVelocity= _rvelo<<20;
outlet_pressure=ccv0[_tmp];
outlet_CV1=ccv1[_tmp+1];
outlet_CV2=ccv2[_tmp+2];
outlet_polyindex=parent->polyIndex;]]></code.krate>
      <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + attr_midichannel) && (data2)) {
  _velo = data2;
  _note = data1-64;
  _gate = 1<<27;
  _gate2 = 0;
  //_tmp=((data1-36)&15)*3;
_tmp=(data1-36);
_tmp=(_tmp-_tmp/16*16)*3;
} else if (((status == MIDI_NOTE_ON + attr_midichannel) && (!data2))||
          (status == MIDI_NOTE_OFF + attr_midichannel)) {
  if (_note == data1-64) {
    _rvelo = data2;
    _gate = 0;
  }
} else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
  _gate = 0;
}

 if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == (_tmp+23))&&(_gate)) { ccv0[_tmp] = data2<<20;}
 if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == (_tmp+24))&&(_gate)) { ccv1[_tmp+1] = data2<<20;}
 if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == (_tmp+25))&&(_gate)) { ccv2[_tmp+2] = data2<<20;}]]></code.midihandler>
   </obj.normal>
</objdefs>