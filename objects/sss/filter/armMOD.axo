<objdefs appVersion="1.0.12">
   <obj.normal id="armMOD" uuid="5af8a641-2710-4b35-9c64-17414fe9a70c">
      <sDescription>Audio rate modulator meant to be used with an audio-rate modulatable filter
phase input reads from internal interpolated table so a waveform (eg. my complexSH oscillitor)can be filtered differently over the course of it&apos;s phase to further alter the spectral content of the waveform.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>table.axh</helpPatch>
      <inlets>
         <frac32buffer name="phase" description="connect to phase output of an oscillator (or add to the S-rate code: outlet_phase=Phase&gt;&gt;5; and add an audio outlet called &quot;phase&quot;)"/>
         <frac32 name="pitch" description="connect to the pitch of the oscillator to enable pitch-tracking (or velocity whatever..)"/>
         <bool32 name="rnd" description="randomises modulation table"/>
         <frac32buffer name="offset" description="offsets the phase readout (eg. use an envelope or lfo for slow modulation)"/>
         <frac32 name="length" description="external control of table length in powers of 2 (same as knob)"/>
      </inlets>
      <outlets>
         <frac32buffer name="o"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map.gain name="mw" description="modulation output width"/>
         <frac32.u.map.gain name="track" description="adds the pitch input to the output"/>
         <frac32.u.map name="length" description="controls table readout length in power of 2. smallest size is 2 steps (single pulse), biggest size is max table size"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>2</string>
               <string>4</string>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
               <string>128</string>
               <string>256</string>
               <string>512</string>
               <string>1024</string>
               <string>2048</string>
               <string>4096</string>
               <string>8192</string>
               <string>16384</string>
               <string>32768</string>
               <string>65536</string>
               <string>131072</string>
               <string>262144</string>
               <string>524288</string>
               <string>1048576</string>
               <string>2097152</string>
               <string>4194304</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
               <string>22</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
static const uint32_t BITS = 16;
static const uint32_t GAIN = 12;
int16_t *array;
int rnd;
int32_t hp;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
{ 
  int i;
  for(i=0;i<LENGTH;i++) {array[i]=(int32_t)(GenerateRandomNumber())>>16;}
}]]></code.init>
      <code.krate><![CDATA[if(inlet_rnd&&!rnd){
	rnd=1;
	for(int i=0;i<LENGTH;i++) {
		array[i]=(int32_t)(GenerateRandomNumber())>>16;
		
		}
}
else if(!inlet_rnd){rnd=0;}
int32_t LP=1+___SMMUL(__USAT(param_length+inlet_length,27)<<4,attr_size<<1);
int32_t LM=(1<<LP)-1;]]></code.krate>
      <code.srate><![CDATA[uint32_t asat =(inlet_phase+inlet_offset)&((1<<27)-1);
    int index = asat>>(27-LP);
   int32_t y1 = array[index]<<12;
   int32_t y2 = array[(index+1)&LM]<<12;
   int frac = (asat - (index<<(27-LP)))<<(LP+3);
  int32_t rr;
  rr = ___SMMUL(y1,(1<<30)-frac);
  rr = ___SMMLA(y2,frac,rr);
rr=___SMMUL(param_mw,(rr<<3));
hp+=rr-hp>>9;
  
outlet_o= rr-hp+___SMMUL(inlet_pitch<<1,param_track);]]></code.srate>
   </obj.normal>
</objdefs>