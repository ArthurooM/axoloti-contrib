<objdefs appVersion="1.0.10">
   <obj.normal id="Bandpass_amplitude" uuid="26e764d3-258f-4d79-bb09-bba25b52fbdd">
      <sDescription>Dual bandpass filter, state-variable type, modulation inputs.

A version without resonance in subtracted from a version WITH resonance, leaving mostly the resonance.
Then both the filter without resonance and the resonance-only signal&apos;s amplitude get multiplied by respectively presence and emphasis.
You have thus independent control over the amplitude of the filtered signal as well as the resonance!
Resonance path has saturation, creating grit here and there.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>filter.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="filter input"/>
         <frac32 name="pitch" description="pitch"/>
         <frac32 name="presence"/>
         <frac32 name="reso" description="resonance"/>
         <frac32 name="emphasis"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="filter output"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch"/>
         <frac32.s.map name="presence"/>
         <frac32.u.map.filterq name="reso"/>
         <frac32.s.map name="emphasis"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t low1;
int32_t band1;
int32_t low2;
int32_t band2;
int32_t frac;]]></code.declaration>
      <code.init><![CDATA[low1 = 0;
band1 = 0;
low2 = 0;
band2 = 0;]]></code.init>
      <code.krate><![CDATA[int32_t damp1 = (0x80<<24) - (__USAT(inlet_reso + param_reso,27)<<4);
damp1 = ___SMMUL(damp1,damp1);
int32_t alpha;
int32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,alpha);
SINE2TINTERP(alpha,freq);

int32_t damp2 = (0x80<<24) - (10<<25);
damp2 = ___SMMUL(damp2,damp2);
]]></code.krate>
      <code.srate><![CDATA[frac=frac+((freq-frac)>>8);
int32_t resonance1=__SSAT((___SMMUL(damp1,band1)>>1),28);
int32_t notch1 = __SSAT(inlet_in - resonance1,28);
low1 = __SSAT(low1 + (___SMMUL(frac,band1)<<1),28);
int32_t high1  = __SSAT(notch1 - low1,28);
band1 = (___SMMUL(frac,high1)<<1) + band1;
int32_t out1 = band1;

int32_t resonance2=__SSAT((___SMMUL(damp2,band2)>>1),28);
int32_t notch2 = __SSAT(inlet_in - resonance2,28);
low2 = __SSAT(low2 + (___SMMUL(frac,band2)<<1),28);
int32_t high2  = __SSAT(notch2 - low2,28);
band2 = (___SMMUL(frac,high2)<<1) + band2;
int32_t out2 = band2;

int32_t resa = out1-out2;
outlet_out=___SMMUL(-out2<<3,(param_presence+inlet_presence)<<2)+___SMMUL(resa<<3,(param_emphasis+inlet_emphasis)<<2);
]]></code.srate>
   </obj.normal>
</objdefs>