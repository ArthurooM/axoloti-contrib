<objdefs appVersion="1.0.12">
   <obj.normal id="bppSVF" uuid="ec7ed15a-1d30-42de-8965-e89dc6f11079">
      <sDescription>3x 2-pole resonant filters (SVF)
1 LP and 1 HP to create a band-width-controllable BP filter and a 3rd filter in BP mode which is added as an extra peak inside the set band (&quot;center&quot; cutoff range is normalised to bandwidth of LP and HP filters).</sDescription>
      <author>Remco van der most</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="in"/>
         <frac32 name="cutoff"/>
         <frac32 name="reso"/>
         <frac32 name="center"/>
         <frac32 name="width"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="cutoff"/>
         <frac32.s.map name="center"/>
         <frac32.u.map name="width"/>
         <frac32.u.map.filterq name="resoHP"/>
         <frac32.u.map.filterq name="resoLP"/>
         <frac32.u.map.filterq name="resoPeak"/>
         <frac32.s.map name="peak"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t out;
int32_t low[3];
int32_t band[3];
int32_t notch;
int32_t high;
int32_t freq[3];
int32_t res[3];
int32_t COEF(int32_t F,int32_t R,int I){
res[I] = (0x80<<24) - (R<<4);
res[I] = ___SMMUL(res[I],res[I]);
int32_t alpha;
MTOFEXTENDED(F,alpha);
SINE2TINTERP(alpha,freq[I]);
}

int32_t SVF(int32_t IN,int I){
band[I]-=___SMMUL(___SMMUL(band[I]<<2,band[I]<<2),band[I]<<2);
notch = IN - (___SMMUL(res[I],band[I])<<1);
low[I] = low[I] + (___SMMUL(freq[I],band[I])<<1);
high  = notch - low[I];
band[I] = (___SMMUL(freq[I],high)<<1) + band[I];
}


int32_t SOFT(int32_t in){
int32_t ts = __SSAT(in,28);
int32_t tsq31 = ts<<3;
int32_t tsq31p3 = ___SMMUL(tsq31,___SMMUL(tsq31,tsq31));
return out = ts + (ts>>1) - (tsq31p3);
}]]></code.declaration>
      <code.krate><![CDATA[int32_t width=__SSAT(inlet_width+param_width,28);
int32_t cutoff=param_cutoff+inlet_cutoff;
COEF(__SSAT(cutoff+(___SMMUL(__SSAT(param_center+inlet_center,28),width)<<5),28),param_resoPeak,0);
COEF(__SSAT(cutoff+width,28),param_resoLP,1);
COEF(__SSAT(cutoff-width,28),param_resoHP,2);]]></code.krate>
      <code.srate><![CDATA[SVF(inlet_in>>1,0);
SVF(SOFT((inlet_in>>1)+(___SMMUL(band[0],param_peak<<4)<<1)),1);
SVF(SOFT(low[1]),2);
outlet_out=SOFT(high);]]></code.srate>
   </obj.normal>
</objdefs>