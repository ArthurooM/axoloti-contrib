<objdefs appVersion="1.0.11">
   <obj.normal id="combinor" uuid="b57f1e8a-da1a-47e4-abef-a68d99638e3f">
      <sDescription>2 combfilters combined with a differential LP/HP filter.
used to mix 4 different signals, 2 for low frequencies and 2 for high frequencies. Due to use of differential subtractions of the filters from the original inputs, each input will fill up different parts of the audio spectrum.

combfilter 1 has input 1 and 2 as inputs, but input 2 is subtracted, creating a positive combfilter response for input 1 while having a negative combfilter response for input 2. (when the volume of one&apos;s peaks is high, the other&apos;s peaks will be low).
The same is done for combfilter 2, but this uses input 3 and 4. Here, 4 will be the negative combfilter response.

The two combfilters are then fed to a Lowpass filter after which the 2nd combfilter will be subtracted to get a HP response for this channel. So the 1st combfilter only has the low part of the spectrum and the 2nd combfilter will be in the high part spectrum.

The combfilter frequencies are controlled with &quot;pitch1&quot; and &quot;pitch2&quot; respectively
The LP/HP filter cutoff frequency is controlled with &quot;cut&quot;

Both the combfilters as well as the filter have feedback control:

-The feedback of the combfilters is controlled with feed1 and feed2 respecively.

The filter resonance can be added to two positions:
-before the combfilter, creating lots of resonance and weird harmonic-shifting behavior-&gt;res1 control
-after the combfilter, back into the filter itself-&gt; res2 control</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="in1" description="delay time (fraction of total delayline size)"/>
         <frac32buffer name="in2"/>
         <frac32buffer name="in3"/>
         <frac32buffer name="in4"/>
         <frac32 name="pitch1"/>
         <frac32 name="pitch2"/>
         <frac32 name="cut"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch1"/>
         <frac32.s.map.pitch name="pitch2"/>
         <frac32.s.map.pitch name="cut"/>
         <frac32.s.map name="feed1"/>
         <frac32.s.map name="feed2"/>
         <frac32.s.map name="res1"/>
         <frac32.s.map name="res2"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int32_t *array1;
int32_t *array2;
uint32_t writepos;


int32_t Time1;
int32_t prev1;
int32_t step1;
int32_t Time2;
int32_t prev2;
int32_t step2;
int32_t out1;
int32_t out2;
int32_t val;
int32_t res;
int32_t Res;]]></code.declaration>
      <code.init><![CDATA[static int32_t _array1[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
static int32_t _array2[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array1 = &_array1[parent->polyIndex][0];
array2 = &_array2[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++){ array1[i] = 0;array2[i] = 0;}]]></code.init>
      <code.krate><![CDATA[int32_t fraq1;
   MTOF(-param_pitch1 - inlet_pitch1,fraq1);
   int32_t fraq2;
   MTOF(-param_pitch2 - inlet_pitch2,fraq2);
   int32_t times1=__USAT(fraq1>>4,27);
   step1 = (times1 - prev1)>>4;
   Time1 = prev1;
   prev1 = times1;
   int32_t times2=__USAT(fraq2>>4,27);
   step2 = (times2 - prev2)>>4;
   Time2 = prev2;
   prev2 = times2;

   int32_t freq;
   MTOF(param_cut+inlet_cut,freq)]]></code.krate>
      <code.srate><![CDATA[Time1+=step1;
Time2+=step2;
  writepos = (writepos + 1)&LENGTHMASK;
   array1[writepos] = __SSAT(inlet_in1+inlet_in2+___SMMUL(out1<<3,param_feed1<<4),30)+Res;
   array2[writepos] = __SSAT(inlet_in3+inlet_in4+___SMMUL(out2<<3,param_feed2<<4),30)+Res;
   //array1[writepos] = __SSAT(inlet_in1+inlet_in2+___SMMUL(Res<<3,param_feed<<4),30);
   //array2[writepos] = __SSAT(inlet_in3+inlet_in4+___SMMUL(Res<<3,param_feed<<4),30);   
      uint32_t tmp_d =  Time1;
      uint32_t tmp_di = writepos - (tmp_d>>(27-LENGTHPOW));
      uint32_t tmp_w1 = (tmp_d<<(LENGTHPOW+3)) & 0x3FFFFFFF;
      uint32_t tmp_w2 = (1<<30) - tmp_w1;
      int32_t tmp_a1 = array1[tmp_di&LENGTHMASK];
      int32_t tmp_a2 = array1[(tmp_di+1)&LENGTHMASK];
      int32_t tmp_r = ___SMMUL(tmp_a1,tmp_w1);
      tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r);
      out1= tmp_r+inlet_in1-inlet_in2+___SMMUL(Res<<3,param_res2);

      tmp_d =  Time2;
      tmp_di = writepos - (tmp_d>>(27-LENGTHPOW));
      tmp_w1 = (tmp_d<<(LENGTHPOW+3)) & 0x3FFFFFFF;
      tmp_w2 = (1<<30) - tmp_w1;
      tmp_a1 = array2[tmp_di&LENGTHMASK];
      tmp_a2 = array2[(tmp_di+1)&LENGTHMASK];
      tmp_r = ___SMMUL(tmp_a1,tmp_w1);
      tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r);
      out2= tmp_r+inlet_in3-inlet_in4-___SMMUL(Res<<3,param_res2);
      int32_t sum;
      sum=out1+out2;
val=___SMMLA((sum-val)<<1,freq,val);
res=___SMMLA((val-out2-res)<<1,freq,res);
      outlet_out=val-out2>>1;
      Res=__SSAT(___SMMUL(val-out2-res<<3,param_res1<<2),25)<<1;]]></code.srate>
   </obj.normal>
</objdefs>