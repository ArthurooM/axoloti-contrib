<objdefs appVersion="1.0.10">
   <obj.normal id="6dBresLP" uuid="0369535a-03ed-4efa-a79e-9f29ef191f5e">
      <sDescription>6dB Lowpass filter with extra lowpass and highpass filters in the resonance path (creating a bandpass filter).
The resonance-frequency can be offset respective to the cutoff frequency
The resonance bandwidth can be set with the &quot;width&quot; control.

Seperate inputs for pitch, envelope and lfo are added to allow for different responses to these signals for both cutoff and resonance.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>filter.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="input"/>
         <frac32 name="pitch"/>
         <frac32 name="env"/>
         <frac32 name="LFO"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="output"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="gain"/>
         <frac32.s.map.pitch name="freq" noLabel="true"/>
         <frac32.s.map name="envCut"/>
         <frac32.s.map name="lfoCut"/>
         <frac32.s.map name="res"/>
         <frac32.s.map name="envRes"/>
         <frac32.s.map name="lfoRes"/>
         <frac32.s.map name="offset"/>
         <frac32.s.map name="width"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t val1;
int32_t val2;
int32_t val3;
int32_t val4;
]]></code.declaration>
      <code.init><![CDATA[val1 = 0;
val2 = 0;
val3 = 0;]]></code.init>
      <code.krate><![CDATA[int32_t f;
int32_t g;
int32_t h;
int32_t Freq;
Freq=__SSAT(param_freq+inlet_pitch+___SMMUL(param_envCut<<3,inlet_env<<3)+___SMMUL(inlet_LFO<<3,param_lfoCut<<2),28);
   MTOF(Freq,f);
   MTOF(Freq+param_offset-(param_width>>2),g);
   MTOF(Freq+param_offset+(param_width>>2),h);
//int32_t res=param_res>0?param_res>>1:param_res;
int32_t res=param_res+___SMMUL(param_envRes<<3,inlet_env<<2)+___SMMUL(param_lfoRes<<3,inlet_LFO<<2);]]></code.krate>
      <code.srate><![CDATA[val2=___SMMLA((val4-val2)<<1,g,val2);
val3=___SMMLA((val4-val2-val3)<<1,h,val3);
int32_t sat=__SSAT(val3,27);
int32_t gain=inlet_in+___SMMUL(res<<3,sat<<3);
gain+=+___SMMUL(gain<<4,param_gain<<4);
gain=__SSAT(gain,27);
   val1 = ___SMMLA((gain-val1)<<1,f,val1);
   val4 = ___SMMLA((val1-val4)<<1,f,val4);
   outlet_out= val4;
]]></code.srate>
   </obj.normal>
</objdefs>