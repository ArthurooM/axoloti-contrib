<objdefs appVersion="1.0.11">
   <obj.normal id="dirtSVF" uuid="14c89b00-6e7f-42ee-9eff-fbe3db15fc76">
      <sDescription>multimode filter, state-variable type.
&quot;mode&quot; morphs through the filter types circularly, while &quot;width&quot; controls the distance from center mix.
&quot;x&quot; and &quot;y&quot; inputs can offset the circular motion.
bandpass gain can be increased, forcing it to clip the signal.
&quot;Spread&quot; creates a difference between cutoff frequencies when incoming signal is higher or lower then the output signal.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>filter.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="filter input"/>
         <frac32 name="cut"/>
         <frac32 name="reso"/>
         <frac32 name="mode"/>
         <frac32 name="width"/>
         <frac32 name="x"/>
         <frac32 name="y"/>
         <frac32 name="gain"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="filter output"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="cut"/>
         <frac32.s.map name="spread"/>
         <frac32.u.map.filterq name="reso"/>
         <frac32.u.map name="gain"/>
         <frac32.u.map name="mode"/>
         <frac32.s.map name="width"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t low;
int32_t band;
int32_t ratio;
float32_t R;
int32_t out1;]]></code.declaration>
      <code.init><![CDATA[low = 0;
band = 0;

SINE2TINTERP(1<<29,ratio)
R=(float32_t)(1<<27)/(ratio>>4);]]></code.init>
      <code.krate><![CDATA[int32_t damp = (0x80<<24) - (param_reso+inlet_reso<<4);
damp = ___SMMUL(damp,damp);
int32_t alpha;
int32_t freq;
MTOFEXTENDED(param_cut+inlet_cut-(param_spread>>3),alpha);
SINE2TINTERP(alpha,freq);
int32_t Alpha;
int32_t Freq;
MTOFEXTENDED(param_cut+inlet_cut+(param_spread>>5),Alpha);
SINE2TINTERP(Alpha,Freq);

int32_t x;
int32_t y;
SINE2TINTERP(param_mode+inlet_mode-(1<<25)<<5,x)
SINE2TINTERP(param_mode+inlet_mode<<5,y)
int32_t width=param_width+inlet_width;
x=__SSAT((inlet_x<<3)+___SMMUL(x,R*(width<<4)),31)+(1<<30)>>1;
y=__SSAT((inlet_y<<3)+___SMMUL(y,R*(width<<4)),31)+(1<<30)>>1;
int32_t X=(1<<30)-x;
int32_t Y=(1<<30)-y;
int32_t gain=inlet_gain+param_gain;]]></code.krate>
      <code.srate><![CDATA[int32_t in1 = inlet_in;
int32_t FREQ=inlet_in>out1?freq:Freq;
band=band+___SMMUL(band<<2,___SMMUL(gain<<4,alpha)<<2);
int32_t notch = __SSAT(inlet_in - (___SMMUL(damp,band)<<1),28);
low = __SSAT(low + (___SMMUL(FREQ,band)<<1),28);
int32_t high  = __SSAT(notch - low,28);
band = __SSAT((___SMMUL(FREQ,high)<<1) + band,28);
out1 = ___SMMUL(___SMMUL(high,x)+___SMMUL(band,X)<<2,y);
out1 += ___SMMUL(___SMMUL(notch,x)+___SMMUL(low,X)<<2,Y);
outlet_out = out1<<2;]]></code.srate>
   </obj.normal>
</objdefs>