<objdefs appVersion="1.0.12">
   <obj.normal id="firRND" uuid="8bb837c4-bfff-4c80-9c98-57278f930689">
      <sDescription>Generates random FIR-coëfficients for the FIR filter</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>math.axh</helpPatch>
      <inlets>
         <int32 name="seq" description="selects out of 16 randomised presets"/>
         <bool32 name="rnd" description="randomises internal random sequence"/>
      </inlets>
      <outlets>
         <frac32buffer name="coefs" description="outputs coÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â«fficients for FIR filter"/>
      </outlets>
      <displays/>
      <params>
         <bool32.mom name="rnd" description="randomises internal pattern"/>
         <frac32.u.map name="update" description="chance of new random value when value is within the &quot;diff&quot; range of the goal value"/>
         <frac32.s.map name="rate" description="base random morph rate"/>
         <frac32.u.map name="width" description="random rate width"/>
         <frac32.u.map name="change" description="mixes between sequential and morphing random values"/>
         <frac32.s.map name="smooth" description="smooths the sequential random values"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t val[16];
int32_t Val[16];
int32_t seq[16][16];
int32_t rnd[16];
int32_t rate[16];
int i;
int32_t prv;
int32_t v30=1<<30;
bool rd;
int32_t lp[BUFSIZE];]]></code.declaration>
      <code.init><![CDATA[for(i=0;i<16;i++){
	Val[i]=0;
}
Val[0]=1<<30;

for(i=0;i<16;i++){
		for(int j=0;j<16;j++){
		seq[i][j]=(int32_t)(GenerateRandomNumber())>>3;
	}}]]></code.init>
      <code.krate><![CDATA[int sel=inlet_seq&15;
bool RND=param_rnd||inlet_rnd;
if(RND&&!rd){
	rd=1;
	for(i=0;i<16;i++){
		for(int j=0;j<16;j++){
		seq[i][j]=(int32_t)(GenerateRandomNumber())>>3;
		}
	}
}
else if(!RND){rd=0;}
int32_t update=param_update;;
update=___SMMUL(update<<3,update<<2);
update=___SMMUL(update<<3,update<<2);
int32_t smth;
MTOF(param_smooth,smth)
smth=smth>>2;
for(i=0;i<16;i++){
int diff=rnd[i]-val[i];
diff=diff>0?diff:-diff;
if(((int32_t)(GenerateRandomNumber()>>5)<update)&&(diff<(1<<19))){
	rnd[i]=(int32_t)(GenerateRandomNumber())>>3;	
	MTOF(param_rate+___SMMUL((int32_t)GenerateRandomNumber(),param_width<<1),rate[i])
	rate[i]=rate[i]>>2;
}


val[i]+=___SMMUL(rnd[i]-val[i],rate[i]);
int32_t a=seq[sel][i];
lp[i]+=___SMMUL(smth,a-lp[i]);
a=lp[i];
int32_t b=val[i];
a+=___SMMUL(b-a,param_change<<4)<<1;



outlet_coefs[i]=a<<1;
}]]></code.krate>
   </obj.normal>
</objdefs>