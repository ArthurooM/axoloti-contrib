<objdefs appVersion="1.0.12">
   <obj.normal id="bppBIQ" uuid="d3f12625-e48b-4da5-9018-73bfe35fae9f">
      <sDescription>3x 2-pole resonant filters (biquad)
1 LP and 1 HP to create a band-width-controllable BP filter and a 3rd filter in BP mode which is added as an extra peak inside the set band (&quot;center&quot; cutoff range is normalised to bandwidth of LP and HP filters).

Uses &quot;object oriÃ«nted&quot; coding, allowing the user to easily create his own filter.
If you want to add more filters, don&apos;t forget to add buffers for each extra filter:
as shown in local data-&gt;  int32_t tmp1[BUFSIZE]  for the first filter)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>filter.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="filter input"/>
         <frac32 name="pitch" description="pitch"/>
         <frac32 name="reso" description="filter resonance"/>
         <frac32 name="center"/>
         <frac32 name="width"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="filter output"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="cutoff"/>
         <frac32.s.map name="center"/>
         <frac32.u.map name="width"/>
         <frac32.u.map.filterq name="resoHP"/>
         <frac32.u.map.filterq name="resoLP"/>
         <frac32.u.map.filterq name="resoC"/>
         <frac32.u.map.gain name="peak"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[biquad_state bs[3];biquad_coefficients bc[3];
int32_t tmp1[BUFSIZE];
int32_t tmp2[BUFSIZE];
int32_t tmp3[BUFSIZE];
int i;]]></code.declaration>
      <code.init><![CDATA[for(i=0;i<3;i++){
biquad_clearstate(&bs[i]);
}]]></code.init>
      <code.krate><![CDATA[int32_t freq;
int32_t width=__SSAT(inlet_width+param_width,28);
	 MTOF(param_cutoff + inlet_pitch+___SMMUL(param_center+inlet_center<<2,width<<3),freq);
      biquad_bp_coefs(&bc[0],freq,INT_MAX - (__USAT(inlet_reso + param_resoC,27)<<4));
      biquad_dsp(&bs[0],&bc[0],inlet_in,tmp1);

	 for(i=0;i<BUFSIZE;i++){
	 	tmp1[i]=__SSAT(inlet_in[i],28)+(___SMMUL(__SSAT(tmp1[i],28),param_peak)<<2);
	 }
	 
      MTOF(param_cutoff-width + inlet_pitch,freq);
      biquad_hp_coefs(&bc[1],freq,INT_MAX - (__USAT(inlet_reso + param_resoHP,27)<<4));
      biquad_dsp(&bs[1],&bc[1],tmp1,tmp2);

      MTOF(param_cutoff+width + inlet_pitch,freq);
      biquad_lp_coefs(&bc[2],freq,INT_MAX - (__USAT(inlet_reso + param_resoLP,27)<<4));
      biquad_dsp(&bs[2],&bc[2],tmp2,outlet_out);]]></code.krate>
   </obj.normal>
</objdefs>