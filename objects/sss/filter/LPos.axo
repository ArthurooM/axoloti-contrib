<objdefs appVersion="1.0.11">
   <obj.normal id="LPos" uuid="82f8e740-c072-45ff-af2c-57f176c0eadd">
      <sDescription>oversampled 2nd order LP filter.
2 modes for resonance:
off=normal
on=resonance is ringmodulated with itself (kind of resonance octaver)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>filter.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="input"/>
         <frac32 name="cut" description="cutoff frequency"/>
         <frac32 name="res"/>
         <bool32 name="mode"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="output"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="cut"/>
         <frac32.s.map name="res"/>
         <bool32.tgl name="mode"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t val;
int32_t vol;
int32_t prev;
int32_t prav;
int32_t priv;
int i;
int32_t res;
int32_t HP;
int32_t sat;]]></code.declaration>
      <code.init><![CDATA[val = 0;
]]></code.init>
      <code.krate><![CDATA[int32_t f;
   MTOF(param_cut+(inlet_cut<<1),f);
int mode=(param_mode+inlet_mode)&1;]]></code.krate>
      <code.srate><![CDATA[int32_t in=inlet_in+sat;
   val = ___SMMLA(((in+prev>>1)-val)<<1,f>>1,val);
   val = ___SMMLA((in-val)<<1,f>>1,val);
   vol = ___SMMLA(((val+prev>>1)-vol)<<1,f>>1,vol);
   vol = ___SMMLA((val-vol)<<1,f>>1,vol);
   
   outlet_out= val;
   int32_t temp;
   if(mode==0){temp=vol;}
   if(mode==1){temp=___SMMUL(vol<<3,vol<<3);}
   res=___SMMLA(((temp+priv>>1)-res)<<1,f>>1,res);
   res=___SMMLA(((temp)-res)<<1,f>>1,res);
   sat=__SSAT(___SMMUL(temp-res<<4,(param_res+inlet_res)<<4),27);
prev=inlet_in;
prav=val;
priv=temp;]]></code.srate>
   </obj.normal>
</objdefs>