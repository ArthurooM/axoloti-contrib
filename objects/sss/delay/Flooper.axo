<objdefs appVersion="1.0.12">
   <obj.normal id="Flooper" uuid="747c9c78-d3ac-43c4-8e09-abbe8be8ad94">
      <sDescription>Friendly 4 channel looper module with seperate ins/outs/triggers/looptime
BPM-syncable with global overdub mode.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="in1" description="audio input for channel 1"/>
         <frac32buffer name="in2" description="audio input for channel 2"/>
         <frac32buffer name="in3" description="audio input for channel 3"/>
         <frac32buffer name="in4" description="audio input for channel 4"/>
         <bool32 name="tap1" description="records in1 to channel 1 buffer when high"/>
         <bool32 name="tap2" description="records in2 to channel 2 buffer when high"/>
         <bool32 name="tap3" description="records in3 to channel 3 buffer when high"/>
         <bool32 name="tap4" description="records in4 to channel 4 buffer when high"/>
         <bool32 name="overdub" description="when high, goes in &quot;overdub&quot; mode (length stays the same as first recording)"/>
         <bool32 name="syncOn" description="when high, syncs to host BPM (syncIn inlet)"/>
         <bool32 name="syncIn" description="connect clock to sync"/>
      </inlets>
      <outlets>
         <frac32buffer name="out1" description="audio output for channel 1"/>
         <frac32buffer name="out2" description="audio output for channel 2"/>
         <frac32buffer name="out3" description="audio output for channel 3"/>
         <frac32buffer name="out4" description="audio output for channel 4"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
uint32_t L2=LENGTH<<1;
uint32_t L3=LENGTH*3;
int32_t *array;
int i;

uint32_t writepos[4];
uint32_t countmax[4];
bool ttrg[4];
int32_t in[4];
uint32_t cnt;
bool ttrig;
uint32_t timer;
uint32_t ttmp[4];]]></code.declaration>
      <code.init><![CDATA[static int32_t _array[LENGTH*4]  __attribute__ ((section (".sdram")));
array = &_array[0];
for(i=0;i<4;i++){
   writepos[i] = 0;}
   for(i=0;i<LENGTH;i++) array[i] = 0;]]></code.init>
      <code.krate><![CDATA[bool tap[4];
tap[0]=inlet_tap1;
tap[1]=inlet_tap2;
tap[2]=inlet_tap3;
tap[3]=inlet_tap4;
for(i=0;i<4;i++){
if((tap[i]>0)&&!ttrg[i]){
	ttrg[i]=1;	
	if(inlet_overdub==0){
	writepos[i]=0;}
}
else if((tap[i]==0)&&ttrg[i]){ttrg[i]=0;if(inlet_overdub==0){countmax[i]=writepos[i];
	writepos[i]=0;}}

if(inlet_syncOn>0){
	ttmp[i]=countmax[i]/timer*timer;
}
else{
	ttmp[i]=countmax[i];
}
}]]></code.krate>
      <code.srate><![CDATA[if((inlet_syncIn>0)&&(!(ttrig)))
{ttrig=1;
timer=cnt;
cnt=0;}
else if (!(inlet_syncIn>0)){ttrig=0;}
cnt+=1;


in[0]=inlet_in1;
in[1]=inlet_in2;
in[2]=inlet_in3;
in[3]=inlet_in4;
for(i=0;i<4;i++){
writepos[i]+=1;
if(tap[i]==1){
	if(inlet_overdub==0){array[writepos[i]+i*LENGTH]=in[i];}
	if(inlet_overdub==1){array[writepos[i]+i*LENGTH]=__SSAT(in[i]+array[writepos[i]+i*LENGTH],30);writepos[i]=writepos[i]>=ttmp[i]?0:writepos[i];}
}
else if(tap[i]==0){
	writepos[i]=writepos[i]>=ttmp[i]?0:writepos[i];
}}
outlet_out1=array[writepos[0]];
outlet_out2=array[writepos[1]+LENGTH];
outlet_out3=array[writepos[2]+L2];
outlet_out4=array[writepos[3]+L3];]]></code.srate>
   </obj.normal>
</objdefs>