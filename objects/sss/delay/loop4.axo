<objdefs appVersion="1.0.11">
   <obj.normal id="loop4" uuid="a9e0c21d-87bd-4e6f-bdfa-351c5e255414">
      <sDescription>16bit 4 channel audio looper with channel &quot;summing2one&quot;
Allows you to record 4 seperate audio loops.
Syncs to external clocks.
Recorded loops can be saved/loaded to/from SDcard.
Channels can be combined using the combine-function.

-rstCount: send a trigger to this input to restart the audio loop. This resets the counter for recording/reading the audio buffer to zero.
-playChnl1 to 4: mute/unmute the audio for this channel.
-EditChnl: input between 0 and 3, selects the internal channel-buffer to save the incoming audio to.
-rec: overwrites the current buffer-position of the selected channel with the incoming audio.
-dub: sums to the current buffer-position of the selected channel with the incoming audio.
-delete:  deletes the current buffer-position of the selected channel.
-clear: clears the whole channel, though at a low rate to prevent hick-ups. This can cause the channel to still sound until it re-loops again.
-combine2channel: selects to which channel the current selected edit-channel will be summed to. (0, 1, 2 or 3)
-combine: combines the selected channels into the combine2Chnl-channel.
-save: saves the current audio buffers to your SDcard.
-load: loads a saved buffer from your SDcard into the audio-buffer
-filename: use this to set the filename of your audioloop-file

the next two are for adjusting the play-position or to shuffle the loop by an external CV-pattern
-offset: this enables you to quick-offset the reading position.
-size: this sets the division/quantification of the offset. Higher numbers will divide the total loop-length (of the rstCount-timing) into smaller parts, allowing you to offset the audio in smaller steps. So, setting this to 4, while &quot;offset&quot; is 1, will offset the read-out of the audio-buffer a quarter of it&apos;s looping length.

-size attribute: sets the maximum size of a single channel. Total table-size will be 4 times this big!</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>table.axh</helpPatch>
      <inlets>
         <bool32 name="active"/>
         <frac32buffer name="in"/>
         <bool32 name="rstCount"/>
         <bool32 name="playChnl1"/>
         <bool32 name="playChnl2"/>
         <bool32 name="playChnl3"/>
         <bool32 name="playChnl4"/>
         <int32 name="EditChnl"/>
         <bool32 name="rec"/>
         <bool32 name="dub"/>
         <bool32 name="delete"/>
         <bool32 name="clear"/>
         <int32 name="Combine2Chnl"/>
         <bool32 name="combine"/>
         <bool32 name="save"/>
         <bool32 name="load"/>
         <charptr32 name="filename"/>
         <int32 name="offset"/>
         <int32 name="size"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="fade" noLabel="true"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = attr_size;
static const uint32_t LENGTH = 1<<attr_size;
static const uint32_t LENGTHMASK = (1<<attr_size)-1;

int16_t *array;
uint32_t writepos;
uint32_t playpos;
int rtrig;
int Rtrig;
int ptrig;
int ctrig;
int Dtrig;
int strig;
int ltrig;
int32_t rec;
int32_t dub;
int32_t out;
int32_t temp;
uint32_t end[48];
uint32_t tmp1;
uint32_t tmp2;
int i;
uint32_t count;
uint32_t Count;
int combine;
int Delete;
int32_t offset;
int Cnt1;
int Cnt2;
int Cnt3;
int Cnt4;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[LENGTH*4] __attribute__ ((section (".sdram")));
array = &_array[0];
out=0;
for(i=0;i<(LENGTH*4);i++){array[i]=0;}]]></code.init>
      <code.krate><![CDATA[int32_t fade=param_fade>>4;

if ((inlet_save>0) && !strig) {
    strig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_written;
    err = f_open(&FileObject, inlet_filename, FA_WRITE | FA_CREATE_ALWAYS);
    if (err != FR_OK) {report_fatfs_error(err,"inlet_filename"); return;}
    int rem_sz = sizeof(*array)*(4<<attr_size);
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        memcpy((char *)fbuff,(char *)(&array[0]) + offset, sizeof(fbuff));
        err = f_write(&FileObject, fbuff, sizeof(fbuff),&bytes_written);
        rem_sz -= sizeof(fbuff);
        offset += sizeof(fbuff);
      } else {
        memcpy((char *)fbuff,(char *)(&array[0]) + offset, rem_sz);
        err = f_write(&FileObject, fbuff, rem_sz, &bytes_written);
        rem_sz = 0;
      }
    }    if (err != FR_OK) report_fatfs_error(err,"inlet_filename");
    err = f_close(&FileObject);
    if (err != FR_OK) report_fatfs_error(err,"inlet_filename");
  }
  else if (!(inlet_save>0)) strig=0;


  if ((inlet_load>0) && !ltrig) {
    ltrig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_read;
    err = f_open(&FileObject, inlet_filename, FA_READ | FA_OPEN_EXISTING);
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;}
    int rem_sz = sizeof(*array)*(4<<attr_size);
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
        if (bytes_read == 0) break;
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz -= bytes_read;
        offset += bytes_read;
      } else {
        err = f_read(&FileObject, fbuff, rem_sz,&bytes_read);
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz = 0;
      }
    }    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;};
    err = f_close(&FileObject);
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;};
  }
  else if (!(inlet_load>0)) ltrig=0;

  offset=(tmp1>>inlet_size)*inlet_offset;]]></code.krate>
      <code.srate><![CDATA[if(inlet_active>0){
if((inlet_rstCount>0)&&!Rtrig){
Rtrig=1;
tmp1=writepos;
writepos=-1;
}
else if((inlet_rstCount==0)&&(Rtrig>0)){Rtrig=0;}
writepos+=1;
out=0;
if(offset>0){
tmp2=writepos-offset;
tmp1=tmp1>0?tmp1:1;
tmp2=tmp2-(tmp2/tmp1)*tmp1;
}
else{tmp2=writepos;}


//play
if(inlet_playChnl1>0){out+=array[((tmp2)&LENGTHMASK)]<<15;}
if(inlet_playChnl2>0){out+=array[((tmp2)&LENGTHMASK)+(1<<attr_size)]<<15;}
if(inlet_playChnl3>0){out+=array[((tmp2)&LENGTHMASK)+(2<<attr_size)]<<15;}
if(inlet_playChnl4>0){out+=array[((tmp2)&LENGTHMASK)+(3<<attr_size)]<<15;}
outlet_out=out+inlet_in;


//recording
if(inlet_rec>0){
rec=__USAT(rec+fade,30);
}
else{
rec=__USAT(rec-fade,30);
}
if(rec>0){
array[writepos+(inlet_EditChnl<<attr_size)]=___SMMUL(__SSAT(inlet_in>>16,16)<<2,rec);
}

//dubbing
if(inlet_dub>0){
dub=__USAT(dub+param_fade,30);
}
else{
dub=__USAT(dub-param_fade,30);
}
if(dub>0){
array[writepos+(inlet_EditChnl<<attr_size)]+=___SMMUL(__SSAT(inlet_in>>16,16)<<2,dub);
}

//combine
if((inlet_combine>0)&&!ctrig){ctrig=1;combine=1;count=0;}
else if(inlet_combine==0){ctrig=0;}

if(combine>0){
array[count+(inlet_Combine2Chnl<<attr_size)]=__SSAT(array[count+(inlet_Combine2Chnl<<attr_size)]+array[count+(inlet_EditChnl<<attr_size)],16);
array[count+(inlet_EditChnl<<attr_size)]=0;
count+=1;
combine=count>=(1<<attr_size)?0:combine;
}
//delete part
if(inlet_delete>0){
array[writepos+(inlet_EditChnl<<attr_size)]=0;
}

//clear channel
if((inlet_clear>0)&&!Dtrig){Dtrig=1;Delete=1;Count=0;}
else if(inlet_clear==0){Dtrig=0;}

if(Delete>0){
array[Count+(inlet_EditChnl<<attr_size)]=0;
Count+=1;
Delete=Count>(1<<attr_size)?0:Delete;
}

}
else{outlet_out=0;}]]></code.srate>
   </obj.normal>
</objdefs>