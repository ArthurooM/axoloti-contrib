<objdefs appVersion="1.0.11">
   <obj.normal id="taildelay" uuid="53f616e2-4323-4fd4-98c4-b2ecd1aefde3">
      <sDescription>Delay with a precise feedback-time control.
delay-time functions the same as the other normal delays, but..
the tailtime is a direct representation of the time (in seconds) the feedback will take to die out, whatever the delaytime. So when you set to control to 30, it will take 30 seconds die out, whether it&apos;s at a delaytime of 100ms or 2 seconds..</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="delay time (fraction of total delayline size)"/>
         <frac32 name="time"/>
         <frac32 name="tailtime"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="wave"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="time"/>
         <frac32.u.map name="tailtime"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int32_t *array;
uint32_t writepos;
int32_t feed;
int32_t Time;
int32_t val1;
int32_t val2;
int32_t T1ime;]]></code.declaration>
      <code.init><![CDATA[static int32_t _array[1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;]]></code.init>
      <code.krate><![CDATA[int32_t TMP=__USAT(inlet_time+param_time,27);
Time=TMP>>27-LENGTHPOW;
int32_t tailtime=__USAT(param_tailtime+inlet_tailtime,27)>>5;
float32_t ratio=(float32_t)(Time<<2)/(float32_t)(tailtime*7);
float32_t dB=(float32_t)(-10)*ratio;
dB=powf(2,dB)*4;
uint32_t tmp_w1 = (TMP<<(LENGTHPOW+3)) & 0x3FFFFFFF;
uint32_t tmp_w2 = (1<<30) - tmp_w1;]]></code.krate>
      <code.srate><![CDATA[writepos = (writepos + 1)&LENGTHMASK;   
uint32_t tmp_di1 = writepos - (Time) -1;
int32_t tmp_a1 = array[tmp_di1&LENGTHMASK];
int32_t tmp_a2 = array[(tmp_di1+1)&LENGTHMASK];
int32_t tmp_r = ___SMMUL(tmp_a1,tmp_w1);
tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r);
int32_t lp=tmp_r*dB;
array[writepos] = -lp+inlet_in;     
outlet_out=-lp+inlet_in;]]></code.srate>
   </obj.normal>
</objdefs>