<objdefs appVersion="1.0.10">
   <obj.normal id="HQ_PitchedDelay" uuid="2fe57e4d-8b95-4c3c-ab6f-f1270ee2720a">
      <sDescription>HQ mod-delay&amp;pitchshifter
Combines the HQ pitchshifter with an extra pre-delay.
Delay-in time responds to the normal range, so the clock2timing module can be used to sync the delay to host tempo (use ratioVCA to make subdivisions like 3/4*host tempo).

-Length sets window-size used for pitchshifter
-semitone offsets pitch in semitones (well..duh). So 12 is +1 octave.
-harmshift offsets the pitch in harmonics based on normal play speed. This is ADDED to the semitone and ratio settings (unlike the ratio parameter, which is in relation to the semitone parameter.)
When offset forces pitchshift into negative frequencies, output comes out reversed. Harmshift has a wide range: +1 is +1x base playbackrate(1). So when harmshift=-1, thus base playbackrate-1-&gt; 1-1=playbackrate=zero.
-ratioshift sets the ratio based on semitone. When set to 8, playback ratio is 1:1. When set to zero, playbackrate is (near) zero. When set to -8, playback will be reversed. When set to 16, playbackrate will be doubled (+1 octave). Also reacts on semitone offset! So when semitone=+1 and ratioshift=-16, it will be one semitone and one octave higher, but reversed.
NOTE the difference with harmshift with this last example:
(harmshift will be -2 compared to ratioshift scaling (ratio= 1:8), this would be the same rate-change, if they worked the same.. but they don&apos;t). SO, example...
When semitone=+1 and harmshift=-2, the playback rate will be shifted up one semitone, then shifted down twice the base playback rate., thus -1 semitones and reversed. The harmonic shift of -2 reverses the play direction(negative frequency), but the semitone still adds a positive 1 semitone to the negative value.

I&apos;m making this so much harder to understand then I should.... haha</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>phasor.axh</helpPatch>
      <inlets>
         <frac32 name="length"/>
         <frac32.bipolar name="semitone"/>
         <frac32.bipolar name="harmshift"/>
         <frac32.bipolar name="ratioshift"/>
         <int32 name="samplelength"/>
         <frac32 name="delay"/>
      </inlets>
      <outlets>
         <frac32buffer name="HQ"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="MinimumLength" noLabel="true">
            <MinValue i="0"/>
            <MaxValue i="8"/>
         </int32>
      </params>
      <attribs>
         <objref name="delayname"/>
      </attribs>
      <code.declaration><![CDATA[uint64_t Phase;
uint64_t Phose;
int64_t Phise;
int64_t Phese;
uint64_t Phrase;
int64_t phasorHQ;
int64_t phasor1;
int64_t phasor2;
int64_t phasor3;
int64_t phasor4;
int64_t phasarHQ;
int64_t phasar1;
int64_t phasar2;
int64_t phasar3;
int64_t phasar4;
int64_t out1;
int64_t out2;
int64_t out3;
int64_t out4;
int64_t out5;
int64_t out6;
int64_t outa1;
int64_t outa2;
int64_t outa3;
int64_t outa4;
int64_t outa5;
int64_t outa6;
int64_t ccomp;
int64_t ccamp;
int64_t HQ1;
int64_t HQ2;
int64_t HQ3;
int64_t HQ4;
int64_t HQ5;
int64_t HQ6;
int64_t HQ7;
int64_t HQ8;
int64_t freq;
int64_t freh;
int64_t friq;
int32_t delay;]]></code.declaration>
      <code.init><![CDATA[Phase = 0;]]></code.init>
      <code.krate><![CDATA[
int32_t f;
int32_t sami=inlet_semitone>0?0:inlet_semitone;
   MTOF((1<<27)+sami,f);


]]></code.krate>
      <code.srate><![CDATA[int32_t ratioshift;

ratioshift=inlet_ratioshift;
int32_t Length=param_MinimumLength+___SMMUL(inlet_length<<3,(inlet_samplelength-param_MinimumLength)<<2);
int32_t result;
int32_t ar=(inlet_semitone*8/12);
int8_t s = (ar>>24)+4;
uint8_t ei = ar>>16;
if (s>=0)
     result = ((expt[ei]<<s)<<2)-(1<<21);
else result = ((expt[ei]>>(-s)))-(1<<21);

int64_t frac=(1<<25+(11-Length));
freq=frac;
freh=___SMMUL(freq<<3,inlet_harmshift)<<6;
freq=___SMMUL(result<<3,freq<<2)<<4;


int64_t fras=((freq+freh)>>2);

int64_t ratoo=___SMMUL((ratioshift-(1<<24))<<1,(fras+frac)<<2)<<1;
fras=(ratioshift>0)?fras:-fras;

delay=(__USAT(inlet_delay,27)>>(27-(inlet_samplelength)))-(1<<(Length+param_MinimumLength));


Phase += ((-(fras+ratoo)<<32)-(fras+ratoo));
//modulator 1 (2nd inverted and 
phasor1 = Phase>>(64-(Length));
phasorHQ=(Phase-(phasor1<<(64-(Length))))>>(33-(Length));
ccomp=(1<<31)-((phasorHQ) & ((1<<31)-1));
if(!((phasor1)==phasor2))
{    phasor4=phasor3;
	phasor3=phasor2;}
phasor2=phasor1;

//modulator2 
phasar1=(phasor1 +(1<<(Length-1))) & ((1<<Length)-1);
if(!((phasar1)==phasar2))
{    phasar4=phasar3;
	phasar3=phasar2;}
phasar2=phasar1;
//side-morph
int64_t sine;
SINE2TINTERP((Phase>>32)+(1<<30),sine)
sine=((sine>>1)+(1<<30));
int32_t ccimp;
ccimp=(-sine+(1<<31));

      uint32_t delay1 = attr_delayname.writepos - phasor2 - delay - BUFSIZE + buffer_index;
      out1= attr_delayname.array[delay1 & attr_delayname.LENGTHMASK]<<14;
      uint32_t delay2 = attr_delayname.writepos - phasor3 - delay - BUFSIZE + buffer_index;
      out2= attr_delayname.array[delay2 & attr_delayname.LENGTHMASK]<<14;
      uint32_t delay3 = attr_delayname.writepos - phasor4 - delay - BUFSIZE + buffer_index;
      out5= attr_delayname.array[delay3 & attr_delayname.LENGTHMASK]<<14;
  HQ1 = (___SMMUL(ccomp,out3)+___SMMUL(phasorHQ,out6)+out4)>>1; 


      uint32_t delaya1 = attr_delayname.writepos - phasar2 - delay - BUFSIZE + buffer_index;
      outa1= attr_delayname.array[delaya1 & attr_delayname.LENGTHMASK]<<14;
      uint32_t delaya2 = attr_delayname.writepos - phasar3 - delay - BUFSIZE + buffer_index;
      outa2= attr_delayname.array[delaya2 & attr_delayname.LENGTHMASK]<<14;
      uint32_t delaya3 = attr_delayname.writepos - phasar4 - delay - BUFSIZE + buffer_index;
      outa5= attr_delayname.array[delaya3 & attr_delayname.LENGTHMASK]<<14;
  HQ2 = (___SMMUL(ccomp,outa3)+___SMMUL(phasorHQ,outa6)+outa4)>>1;   
  
  HQ3=ccimp*(HQ1>>1)+sine*(HQ2>>1);
  HQ4=HQ4+((HQ3-HQ4)>>1);
  HQ5=HQ5+((HQ4-HQ5)>>1);
  HQ6=HQ6+((HQ5-HQ6)>>12);
  outlet_HQ=(HQ5-HQ6)>>29;
  





 
out3=out1;
out4=out2;
out6=out5;

outa3=outa1;
outa4=outa2;
outa6=outa5;

]]></code.srate>
   </obj.normal>
</objdefs>