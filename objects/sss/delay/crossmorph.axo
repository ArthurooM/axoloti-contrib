<objdefs appVersion="1.0.12">
   <obj.normal id="crossmorph" uuid="039f6853-4fa3-421e-b180-bcd5109e97a9">
      <sDescription>Time Crossmophing delay
Connect &quot;base&quot; to the basedelay output of the BPMext module.
Mix crossfades through the timings.

-&quot;quant&quot; sets the amount of timings for the mix input/parameter, which goes from 0-64 and then rewraps back to 0.
-&quot;step&quot; multiplies the the timing-step (multiplying the base-delay time)
-&quot;over&quot; adds an offset to the timing-step when it went over maximum time (still host-tempo synced), this will create some more variation in the crossmorph.
-basedelay time could be divided/multiplied before this module to enable polyrithmic delays (eg triplets)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="wave input"/>
         <frac32 name="mix" description="connects to a positive 0-64 modulation"/>
         <frac32 name="base" description="connects to &quot;basedelay&quot; output on BPMext module"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
         <int32 name="div" description="connects to a LFO that&apos;s connected to the waveinput. (check my LFO&apos;s) This can divide the LFO&apos;s rate, so it stays the same rate no matter how many steps the quantizer is set to."/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="mix"/>
         <int32 name="quant" description="sets the amount of timing-steps in the 0-64 range of the &quot;mix&quot;">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="step" description="multiplies the steps so the morph selects different timings each next timing">
            <MinValue i="1"/>
            <MaxValue i="512"/>
         </int32>
         <int32 name="over" description="when the steps pass the maximum delaytime, it wraps and adds an offset to prevent playing the same row of timings">
            <MinValue i="0"/>
            <MaxValue i="512"/>
         </int32>
         <frac32.s.map name="feed" description="feedback amount"/>
         <frac32.u.map.gain name="wet" description="wet amount"/>
         <frac32.u.map.gain name="dry" description="dry amount"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int32_t out;
int32_t feed;
int32_t vi27=((1<<27)-1);
int32_t READ(int32_t T){
	 uint32_t tmp_d =  __USAT(T,27);
      uint32_t tmp_di = writepos - (tmp_d>>(27-LENGTHPOW)) -1;
      uint32_t tmp_w1 = (tmp_d<<(LENGTHPOW+3)) & 0x3FFFFFFF;
      uint32_t tmp_w2 = (1<<30) - tmp_w1;
      int32_t tmp_a1 = array[tmp_di&LENGTHMASK]<<16;
      int32_t tmp_a2 = array[(tmp_di+1)&LENGTHMASK]<<16;
      int32_t tmp_r = ___SMMUL(tmp_a1,tmp_w1);
      tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r);
      return out= tmp_r;
}
int32_t hp;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;]]></code.init>
      <code.krate><![CDATA[int32_t rt=(1<<27)/inlet_base;

int32_t qnt=param_quant;
int32_t step=param_step;

int32_t mix=(param_mix+inlet_mix)&vi27;
int32_t sel1;
int32_t sel2;
sel1=(int64_t)mix*qnt>>27;

sel2=sel1+1;
sel2=sel2-sel2/qnt*qnt;
mix=(mix-((int64_t)((int64_t)sel1<<27)/qnt))*qnt;
sel1=sel1*step;
sel2=sel2*step;
sel1+=sel1/rt*param_over;
sel2+=sel2/rt*param_over;
sel1=(sel1*inlet_base);
sel2=(sel2*inlet_base);
rt=(rt-1)*inlet_base;
sel1=sel1-sel1/rt*rt+inlet_base;
sel2=sel2-sel2/rt*rt+inlet_base;
outlet_div=qnt;]]></code.krate>
      <code.srate><![CDATA[writepos = (writepos + 1)&LENGTHMASK;
   array[writepos] = __SSAT(inlet_in+feed>>14,16);
   int32_t tmp=READ(sel1);
   feed=___SMMUL(param_feed<<4,tmp+___SMMUL(READ(sel2)-tmp<<2,mix<<3))<<1;
   hp+=feed-hp>>9;
   feed-=hp;
outlet_out=___SMMUL(inlet_in<<1,param_dry)+___SMMUL(feed<<2,param_wet);]]></code.srate>
   </obj.normal>
</objdefs>