<objdefs appVersion="1.0.10">
   <obj.normal id="rottenDelay" uuid="347db9ad-7272-434e-8ebd-2b83167aba88">
      <sDescription>dirty rotten delayline with delaytime, feedback, samplerate, bits, LP damp, wet and dry control</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="wave input"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="time"/>
         <frac32.s.map name="feedback"/>
         <frac32.s.map.pitch name="damp"/>
         <int32 name="rate">
            <MinValue i="1"/>
            <MaxValue i="8000"/>
         </int32>
         <int32 name="bits">
            <MinValue i="4"/>
            <MaxValue i="32"/>
         </int32>
         <frac32.s.map name="wet"/>
         <frac32.s.map name="dry"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int32_t *array;
uint32_t writepos;
int32_t feedback;
int32_t HP;
int32_t count;
int32_t out;]]></code.declaration>
      <code.init><![CDATA[static int32_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
]]></code.init>
      <code.krate><![CDATA[int32_t f;
MTOF(param_damp,f)
int32_t h;
MTOF(-10<<21,h)]]></code.krate>
      <code.srate><![CDATA[count+=1;
count=count-(count/param_rate)*param_rate;
if(count==0){
  writepos = (writepos + 1)&LENGTHMASK;
   array[writepos] = ((inlet_in+___SMMUL(param_feedback<<3,feedback)+1)<<2)>>32-(param_bits);
if(param_bits<31){
out=array[writepos-(param_time>>27-LENGTHPOW)&LENGTHMASK]<<32-param_bits;}
if(param_bits>30){
out=array[writepos-(param_time>>27-LENGTHPOW)&LENGTHMASK]>>-32+param_bits;}
}
out=__SSAT(out,27);
HP=___SMMLA((out-HP)<<1,h,HP);
feedback=___SMMLA((out-HP-feedback)<<1,f,feedback);
outlet_out=___SMMUL(out<<3,param_wet<<2)+___SMMUL(inlet_in<<3,param_dry<<2);]]></code.srate>
   </obj.normal>
</objdefs>