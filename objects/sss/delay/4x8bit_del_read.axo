<objdefs appVersion="1.0.10">
   <obj.normal id="4x8bit_del_read" uuid="70c88dd9-718e-4e84-a4ec-f5e19ba4fe34">
      <sDescription>4 channel 8bit delay read.
Converts the 8bit channels back to four seperate, filtered 32bit channels</sDescription>
      <author>Remco van der most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32 name="time" description="delay time (fraction of total delayline size)"/>
      </inlets>
      <outlets>
         <frac32buffer name="1" description="wave"/>
         <frac32buffer name="2"/>
         <frac32buffer name="3"/>
         <frac32buffer name="4"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="time" noLabel="true"/>
      </params>
      <attribs>
         <objref name="delayname"/>
      </attribs>
      <code.declaration><![CDATA[int32_t val1;
int32_t val2;
int32_t val3;
int32_t val4;]]></code.declaration>
      <code.krate><![CDATA[   uint32_t delay = attr_delayname.writepos - (__USAT(param_time + inlet_time,27)>>(27-attr_delayname.LENGTHPOW)) - BUFSIZE;
]]></code.krate>
      <code.srate><![CDATA[int32_t outA= attr_delayname.array[(delay++) & attr_delayname.LENGTHMASK];

int32_t out1=(outA>>24)<<24;
int32_t out2=((outA-out1)>>16)<<16;
int32_t out3=((outA-out1-out2)>>8)<<8;
int32_t out4=(outA-out1-out2-out3);
val1=val1+((out1-val1)>>2);
val2=val2+(((out2<<8)-val2)>>2);
val3=val3+(((out3<<16)-val3)>>2);
val4=val4+(((out4<<24)-val4)>>2);

outlet_1=val1>>4;
outlet_2=val2>>4;
outlet_3=val3>>4;
outlet_4=val4>>4;]]></code.srate>
   </obj.normal>
</objdefs>