<objdefs appVersion="1.0.12">
   <obj.normal id="Factotum" uuid="978d597e-b90a-49b5-bff2-81589ba76968">
      <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
      <author>Remco van der most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="audio input"/>
         <bool32 name="rec" description="when high, records to buffer"/>
         <bool32 name="sync" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
         <frac32 name="phase" description="sets start-phase when sync-input goes high."/>
         <bool32 name="dir" description="controls the playback direction in direction mode 3 (see on-module &quot;dir&quot; control)"/>
         <frac32 name="length" description="sets the playback length in relation to the recorded buffer. If set to 0.5x, only plays half the buffer."/>
         <frac32.bipolar name="playspeed" description="controls the playback speed, bot stretches and pitchshifts as normal tape-behavior. normal semitone response"/>
         <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
         <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
         <frac32 name="rate" description="controls the playrate linearly. Set rate-control to x1 for normal response."/>
         <frac32 name="window" description="sets the window size of the pitchshifter/stretcher. Small window have faster response, but generate more distortion and pitching errors. Long windows will create delayed repeats."/>
         <frac32.bipolar name="shiftsize" description="controls the rate of the grain-offset generator. This one does NOT have a semitone response-&gt;negative is backwards shifting, positive is forwards shifting."/>
         <int32 name="ratedivisor" description="divides the rate at which the grainshift will be applied. (base rate is controlled by stretch/pitchshift controls, NOT the playspeed control!)"/>
         <int32 name="qnt" description="quantizes the grain-offset in power of 2. 0=no offset, 1=2 positions, 2=4 positions, 3=8 positions, etc"/>
         <int32 name="step1" description="multiplies the grain-offset-position of the first of the two delay-lines after quantification"/>
         <int32 name="step2" description="multiplies the grain-offset-position of the second of the two delay-lines after quantification"/>
         <bool32 name="overwrite" description="when high, records the input continuously. There has to be a recorded buffer already! That one sets the buffersize!"/>
         <frac32.bipolar name="feedback" description="sets the amount of feedback when in &quot;overwrite&quot; mode."/>
         <frac32 name="wet"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="fade" description="sets crossfade length for de-clicking (has to be smaller then total recorded time)">
            <MinValue i="10"/>
            <MaxValue i="16"/>
         </int32>
         <frac32.u.map.gain name="phase" description="sets start-phase when sync-input goes high."/>
         <frac32.u.map.gain name="length" description="sets the playback length in relation to the recorded buffer. If set to 0.5x, only plays half the buffer."/>
         <int32.hradio name="dir" description="sets direction-mode: 0=normal, 1=reverse, 2=external control">
            <MaxValue i="3"/>
         </int32.hradio>
         <frac32.s.map.pitch name="playspeed" description="controls the playback speed, bot stretches and pitchshifts as normal tape-behavior. normal semitone response"/>
         <frac32.s.map.pitch name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
         <frac32.s.map.pitch name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
         <frac32.s.map name="rate" description="controls the playrate linearly. Set rate-control to x1 for normal response."/>
         <frac32.u.map.gain name="window" description="sets the window size of the pitchshifter/stretcher. Small window have faster response, but generate more distortion and pitching errors. Long windows will create delayed repeats."/>
         <frac32.s.map name="shiftsize" description="controls the rate of the grain-offset generator. This one does NOT have a semitone response-&gt;negative is backwards shifting, positive is forwards shifting."/>
         <int32 name="ratedivisor" description="divides the rate at which the grainshift will be applied. (base rate is controlled by stretch/pitchshift controls, NOT the playspeed control!)">
            <MinValue i="0"/>
            <MaxValue i="1024"/>
         </int32>
         <int32 name="qnt" description="quantizes the grain-offset in power of 2. 0=no offset, 1=2 positions, 2=4 positions, 3=8 positions, etc">
            <MinValue i="0"/>
            <MaxValue i="32"/>
         </int32>
         <int32 name="step1" description="multiplies the grain-offset-position of the first of the two delay-lines after quantification">
            <MinValue i="1"/>
            <MaxValue i="64"/>
         </int32>
         <int32 name="step2" description="multiplies the grain-offset-position of the second of the two delay-lines after quantification">
            <MinValue i="1"/>
            <MaxValue i="64"/>
         </int32>
         <bool32.tgl name="overwrite" description="when high, records the input continuously. There has to be a recorded buffer already! That one sets the buffersize!"/>
         <frac32.s.map name="feedback" description="sets the amount of feedback when in &quot;overwrite&quot; mode."/>
         <frac32.u.map.gain name="dry" description="sets dry input signal amount to output"/>
         <frac32.u.map.gain name="wet" description="sets wet effect signal amount to output"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int32_t out;
uint32_t phase;
uint32_t phs;
bool rec;
int32_t rate;
uint32_t length;
int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;
int dir;
int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      uint32_t tmp_di = T/R;
      uint32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = array[tmp_di];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(array[(tmp_di+1)]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = array[tmp_di+L];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(array[(tmp_di+1)+L]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
bool Dr;
uint32_t grain1;
uint32_t grain2;
uint32_t CNT;
int32_t FD;
bool snc;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
   dir=1;]]></code.init>
      <code.krate><![CDATA[fade=1<<param_fade;
fd=param_fade;
int32_t playspeed=param_playspeed+inlet_playspeed;
int32_t stretch=param_stretch+inlet_stretch;
int32_t pitchshift=param_pitchshift+inlet_pitchshift;
int32_t LnG=__USAT((param_length>>1)+(inlet_length<<3),30)<<1;
int32_t Window=__USAT((param_window>>1)+(inlet_window<<3),30)<<1;
int32_t shiftsize=param_shiftsize+inlet_shiftsize;
int32_t ratedivisor=param_ratedivisor+inlet_ratedivisor;
int32_t step1=param_step1+inlet_step1;
int32_t step2=param_step2+inlet_step2;
bool overwrite=param_overwrite||inlet_overwrite;
uint32_t PHS=__USAT((inlet_phase<<3)+(param_phase>>1),30)<<1;
int32_t RT=__SSAT(param_rate+inlet_rate,29);
if((inlet_sync>0)&&!snc){
phase=PHS;
phs=0;
snc=1;
}
else if(inlet_sync==0){snc=0;}

MTOFEXTENDED(0,fBase);
MTOFEXTENDED(playspeed+stretch,fRate)
ratio=(float32_t)fRate/fBase;
int32_t feed=__SSAT(param_feedback+inlet_feedback,28)<<4;
if((inlet_rec>0)&&!rec){
	rec=1;
	
	writepos=0;
	cnt=0;
}
else if((inlet_rec==0)&&rec){rec=0;length=writepos;cnt=fade;}
LNG=___SMMUL(length,LnG)<<1;

rate=((uint64_t)1<<32)/LNG;
int32_t RATE=rate*ratio;

int32_t grate;

grate=shiftsize;
grate=grate>0?grate:-grate;
grate=___SMMUL(grate<<3,shiftsize<<2);
grate=grate<<3;
int row=(ratedivisor<<1)+1;
int32_t qnt=32-__USAT(param_qnt+inlet_qnt,5);

int32_t prate;
MTOFEXTENDED(pitchshift-stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)Window<<12)/length;
float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;
if(param_dir<2){
dir=param_dir<1?1:-1;}
else{dir=inlet_dir>0?-1:1;}
int32_t wet=__USAT((inlet_wet<<3)+(param_wet>>1),30)<<1;]]></code.krate>
      <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate*dir<<2,RT<<3);
phase+=___SMMUL(RATE*dir<<2,RT<<3);
phs+=FRQ;
uint32_t P3=phs;
if(!((phs>(1<<31))==(prv>(1<<31)))){
if(CNT==0){
if((phs>(1<<30))&&(P3<(3<<30))){
grain2+=grate;
}
else
{
grain1+=grate;
}
}
CNT+=1;
CNT=CNT-CNT/row*row;
}




if((overwrite>0)&&!rec){
array[writepos] = __SSAT(inlet_in+FD>>14,16);
writepos=writepos>=length+fade?0:writepos;
}
if(rec>0){
array[writepos] = __SSAT(inlet_in>>14,16);
}
if(cnt>0){
array[writepos]=__SSAT(inlet_in>>14,16);
cnt-=1;
}
writepos = (writepos + 1)&LENGTHMASK;

uint32_t P1=((uint32_t)phs)>>1;
uint32_t P2=((uint32_t)phs+(1<<31))>>1;
int32_t tmp1=READ(phase+((grain1>>qnt)<<qnt)*step1+(___SMMUL(P1,window)<<2),rate,LNG);
int32_t tmp2=READ(phase+((grain2>>qnt)<<qnt)*step2+(___SMMUL(P2,window)<<2),rate,LNG);
int32_t mp;
SINE2TINTERP(phs-(1<<30),mp)
mp=(mp>>2)+(1<<29);
int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);
outlet_out=__SSAT(___SMMUL(out,wet)+___SMMUL(inlet_in,param_dry),27)<<1;
FD=___SMMUL(out,feed)<<1;
prv=phs;]]></code.srate>
   </obj.normal>
</objdefs>