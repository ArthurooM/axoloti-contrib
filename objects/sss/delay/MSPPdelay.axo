<objdefs appVersion="1.0.11">
   <obj.normal id="MSPPdelay" uuid="0e1e80e2-f1fa-44d4-95d2-e65f48528518">
      <sDescription>mono to stereo pingpong delay with modulatable predelay and feedback time
-predelay sets the time the first delayed signal is fed to the output.
-feedtime sets the time for feedback after the predelay
-both can be modulated externally-&gt;use conv/interp module to convert control-rate signals to audio-rate for smooth low frequency modulation.
-modulation width can be attenuated with the AttMod selector (higher values will give smaller modulation ranges)

with their respective controls, both predelay and feedback time can be made different between left and right delay channel, but summed time of left and right will stay the same.

the predelay can be added to the feedback signal to provide an extra &quot;hit&quot; into the decaying delay.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="in"/>
         <frac32 name="pan"/>
         <frac32buffer name="predelay"/>
         <frac32buffer name="feedtime"/>
         <frac32 name="Pre"/>
         <frac32 name="Feed"/>
      </inlets>
      <outlets>
         <frac32buffer name="outL"/>
         <frac32buffer name="outR"/>
         <int32 name="PowOut"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="predelay"/>
         <frac32.s.map name="diffPre"/>
         <frac32.u.map name="feedtime"/>
         <frac32.s.map name="diffFeed"/>
         <int32 name="AttMod">
            <MinValue i="0"/>
            <MaxValue i="16"/>
         </int32>
         <bool32.tgl name="addPre"/>
         <frac32.s.map name="feed"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int32_t *array1;
int32_t *array2;
uint32_t writepos;
int32_t memL;
int32_t memR;]]></code.declaration>
      <code.init><![CDATA[static int32_t _array1[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array1 = &_array1[parent->polyIndex][0];
static int32_t _array2[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array2 = &_array2[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) {array1[i] = 0;array2[i] = 0;}]]></code.init>
      <code.krate><![CDATA[outlet_PowOut=attr_size;
int32_t diff1=___SMMUL(param_diffPre<<3,(param_predelay+inlet_Pre)<<2);
int32_t diff2=___SMMUL(param_diffFeed<<3,(param_feedtime+inlet_Feed)<<2);]]></code.krate>
      <code.srate><![CDATA[writepos = (writepos + 1)&LENGTHMASK;
   int32_t temp1=__SSAT(___SMMUL(inlet_in<<3,(inlet_pan+(1<<27))<<1),29);
   int32_t temp2=__SSAT(___SMMUL(inlet_in<<3,(-inlet_pan+(1<<27))<<1),29);
   
   array1[writepos] += temp1;
   array2[writepos] += temp2;
   int32_t predelay1=__USAT(param_predelay+diff1 - (inlet_predelay>>param_AttMod)+inlet_Pre,27);
   uint32_t tmp_dwrite = predelay1 -(__USAT(-(inlet_feedtime>>param_AttMod)+diff2+param_feedtime+inlet_Feed,27));
   uint32_t tmp_diwrite = writepos - (tmp_dwrite>>(27-LENGTHPOW)) ;
   uint32_t tmp_w1write = (tmp_dwrite<<(LENGTHPOW+3)) & 0x3FFFFFFF;
   uint32_t tmp_w2write = (1<<30) - tmp_w1write;
   memL=___SMMUL(memR+inlet_in*(param_addPre)<<3,param_feed<<2);
   array1[tmp_diwrite&LENGTHMASK] +=  ___SMMUL(memL<<4,tmp_w1write);
   array1[(tmp_diwrite+1)&LENGTHMASK] += ___SMMUL(memL<<4,tmp_w2write);

   int32_t predelay2=__USAT(param_predelay -diff1 + (inlet_predelay>>param_AttMod)+inlet_Pre,27);
   tmp_dwrite = predelay2 -(__USAT((inlet_feedtime>>param_AttMod)-diff2+param_feedtime+inlet_Feed,27));
   tmp_diwrite = writepos - (tmp_dwrite>>(27-LENGTHPOW)) ;
   tmp_w1write = (tmp_dwrite<<(LENGTHPOW+3)) & 0x3FFFFFFF;
   tmp_w2write = (1<<30) - tmp_w1write;
   memR=___SMMUL(memL+inlet_in*(param_addPre)<<3,param_feed<<2);
   array2[tmp_diwrite&LENGTHMASK] +=  ___SMMUL(memR<<4,tmp_w1write);
   array2[(tmp_diwrite+1)&LENGTHMASK] += ___SMMUL(memR<<4,tmp_w2write);


   
      uint32_t tmp_dread =  predelay1;
      uint32_t tmp_diread = writepos - (tmp_dread>>(27-LENGTHPOW)) ;
      uint32_t tmp_w1read = (tmp_dread<<(LENGTHPOW+3)) & 0x3FFFFFFF;
      uint32_t tmp_w2read = (1<<30) - tmp_w1read;
      int32_t tmp_a1read = array1[tmp_diread&LENGTHMASK];
      int32_t tmp_a2read = array1[(tmp_diread+1)&LENGTHMASK];
      int32_t tmp_rread = ___SMMUL(tmp_a1read,tmp_w1read);
      tmp_rread = ___SMMLA(tmp_a2read,tmp_w2read,tmp_rread);
	 memL= tmp_rread;
	 
	 tmp_dread =  predelay2;
      tmp_diread = writepos - (tmp_dread>>(27-LENGTHPOW)) ;
      tmp_w1read = (tmp_dread<<(LENGTHPOW+3)) & 0x3FFFFFFF;
      tmp_w2read = (1<<30) - tmp_w1read;
      tmp_a1read = array2[tmp_diread&LENGTHMASK];
      tmp_a2read = array2[(tmp_diread+1)&LENGTHMASK];
      tmp_rread = ___SMMUL(tmp_a1read,tmp_w1read);
      tmp_rread = ___SMMLA(tmp_a2read,tmp_w2read,tmp_rread);
	 memR= tmp_rread;



     array1[(writepos+LENGTHMASK/4)&LENGTHMASK]=0; 
     array2[(writepos+LENGTHMASK/4)&LENGTHMASK]=0; 
     
     outlet_outL= ___SMMUL(memR<<3,param_feed<<3)+temp1;
     outlet_outR= ___SMMUL(memL<<3,param_feed<<3)+temp2;
//      outlet_out= mem;]]></code.srate>
   </obj.normal>
</objdefs>