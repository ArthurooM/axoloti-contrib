<objdefs appVersion="1.0.12">
   <obj.normal id="repeater2St" uuid="edd09111-88ac-49dc-90e4-ad98086b7f4f">
      <sDescription>version 2 of the audio repeater module. Can be used in-line in your audio-chain and doesn&apos;t need an external delay write module. 

when input &quot;on&quot; goes high, starts repeating the incoming audio for the number of repeats set by the input.
Repeating size is set by the size and swing inlets.
-size/swing are used to set the size in samples (48k/s).
-Ksize/Kswing are used to set the size in the fractional 0-64 way

eg. for the Ksize/Kswing you can use my &quot;BPMext&quot; LFO to provide the &quot;delaybase&quot; timing. Then use the math/ratios235 module to set a division based on 2, 3 and 5 integers (any combination in nominator and denominator).
This way you could, for example, set a main retrigger in fourths, but give every even numbered retrigger an offset in thirds.


the repeat input sets the amount of times the buffer is repeated as long as the &quot;on&quot; input is high. After that, a new sample is taken which itself will be repeated the set amount of times before another sample is taken again.

Bit of a drawback of the way the module is coded, is that there is no pitch-control possible.
Use the &quot;grainer&quot; module if you want pitch-control</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="in" description="audio input"/>
         <bool32 name="on" description="when high, repeater is on"/>
         <int32 name="size" description="Sets the base delay-time in samples. Connects to &quot;Ksamples&quot; on my clock2timing module. Use ratioVCAI to set ratio to host tempo"/>
         <int32 name="swing" description="Sets swing-time in samples for every even numbered repetition. Connects to &quot;Ksamples&quot; on my clock2timing module. Use ratioVCAI to set ratio to host tempo"/>
         <frac32 name="Ksize" description="sets the base repeat-time in fractional value. Use BPMext &quot;delaybase&quot; ouput to host sync to the lfo. Use my ratio modules for integer divisions of host tempo."/>
         <frac32 name="Kswing" description="sets the swing-time in fractional valueof every even numbered repetition. Use BPMext &quot;delaybase&quot; ouput to host sync to the lfo. Use my ratio modules for integer divisions of host tempo."/>
         <int32 name="repeat" description="sets the amount of repetitions"/>
         <frac32 name="wet" description="sets the volume of the repeats"/>
         <frac32 name="feed" description="feeds back the repeater (hard clipped with input)"/>
         <frac32 name="panStart" description="sets the start panning of the repeat"/>
         <frac32 name="panSpread" description="offsets the panning of each next repeat"/>
         <frac32 name="panSwell" description="negative value will make the pan go from outwards from the first repeat to center at the last repeat, zero is no swell, positive values will make the pan move from center from the first repeat to outwards at the last repeat"/>
         <bool32 name="panMode" description="triangle/saw shape for panning wrap"/>
      </inlets>
      <outlets>
         <frac32buffer name="outL"/>
         <frac32buffer name="outR"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int32_t *array;
uint32_t writepos;
int32_t size;
int32_t times;
int32_t rec;
int32_t out;
int32_t Ol;
int32_t Or;
int32_t repeat;
int32_t swing;
int32_t pan[16];
int32_t v27=1<<27;
int32_t v28=1<<28;
int32_t vi29=(1<<29)-1;
int i;]]></code.declaration>
      <code.init><![CDATA[static int32_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;]]></code.init>
      <code.krate><![CDATA[size=___SMMUL(__USAT(inlet_Ksize,27)<<3,LENGTH<<2)+inlet_size;
size=size>0?size:-size;
size=size>0?size:1;
swing=___SMMUL(__USAT(inlet_Kswing,27)<<3,LENGTH<<2)+inlet_swing;
repeat=inlet_repeat;
repeat=repeat>0?repeat:1;
repeat=repeat>16?16:repeat;

for(i=0;i<repeat;i++){
	int32_t tmp=(inlet_panStart<<4)+(inlet_panSpread/repeat<<6)*i;
	if(inlet_panMode<1){
	int32_t tp=__SSAT(tmp,30);
	pan[i]=tp-(tp-tmp)<<1;}
	else{pan[i]=tmp;}
	pan[i]+=___SMMUL(inlet_panSwell*(i-(repeat>>1)),pan[i])<<5;
}]]></code.krate>
      <code.srate><![CDATA[writepos = (writepos + 1)&LENGTHMASK;
array[writepos] = inlet_on>0?__SSAT(inlet_in+___SMMUL(inlet_feed<<3,out<<2),28):0;
out=0;
Ol=0;
Or=0;
if(inlet_on>0){
for(i=1;i<=repeat;i++){
int k=i-1;
out=___SMMUL(array[(writepos-i*size+((i-1)&1)*swing)&LENGTHMASK]<<2,inlet_wet<<2);
Ol=__SSAT(out+___SMMUL(out<<1,pan[k])+Ol,28);
Or=__SSAT(out-___SMMUL(out<<1,pan[k])+Or,28);
}
}

outlet_outL=__SSAT(inlet_in+Ol,28);
outlet_outR=__SSAT(inlet_in+Or,28);]]></code.srate>
   </obj.normal>
</objdefs>