<objdefs appVersion="1.0.10">
   <obj.normal id="rndTapDelaySt_m" uuid="e08d3c42-0098-4858-9c29-b475c2fe1ffc">
      <sDescription>random multi-tap delay/early reflections with controllable tap-amount.
length sets the amount of taps.
maximum and minimum values are modulatable for phasing effects</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <bool32.rising name="random"/>
         <frac32buffer name="in"/>
         <frac32 name="maximum"/>
         <frac32 name="minimum"/>
      </inlets>
      <outlets>
         <frac32buffer name="outL" description="wave"/>
         <frac32buffer name="outR"/>
         <frac32buffer name="wetsum"/>
         <frac32buffer name="delayRec"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="length">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <bool32.mom name="random"/>
         <frac32.u.map name="maximum"/>
         <frac32.u.map name="minimum"/>
         <frac32.u.map name="feed"/>
      </params>
      <attribs>
         <objref name="delayname"/>
      </attribs>
      <code.declaration><![CDATA[int32_t _val[16];
int32_t _vol[16];
int32_t _pan[16];
int32_t _com[16];
int32_t _sam[16];
int ntrig;
int8_t lng;
int i;
uint32_t _delay[16];
int32_t sumL;
int32_t sumR;
int32_t mad;
int32_t mid;]]></code.declaration>
      <code.init><![CDATA[for(i=0;i<16;i++) _val[i] = (GenerateRandomNumber())>>5;{}
for(i=0;i<16;i++) _vol[i] = (GenerateRandomNumber())>>5;{}
for(i=0;i<16;i++) _pan[i] = (GenerateRandomNumber())>>5;{}
for(i=0;i<16;i++) _com[i] = (1<<27)-_pan[i];{}
ntrig=0;]]></code.init>
      <code.krate><![CDATA[lng=param_length;
int32_t width=inlet_maximum+param_maximum-param_minimum;

if(((param_random+inlet_random)>=1)&&(!(ntrig)))
{
for(i=0;i<lng;i++) _val[i] = ((GenerateRandomNumber())>>5);{}
for(i=0;i<lng;i++) _vol[i] = ((GenerateRandomNumber())>>5);{}
for(i=0;i<lng;i++) _pan[i] = ((GenerateRandomNumber())>>5);{}
for(i=0;i<lng;i++) _com[i] = (1<<27)-_pan[i];{}
ntrig=1;
}
else if(!((param_random+inlet_random)>=1))
{ntrig=0;}
   

  
]]></code.krate>
      <code.srate><![CDATA[mad=mad+((inlet_minimum+param_minimum-mad)>>13);
mid=mid+((width-mid)>>13);
  sumL=0;
  sumR=0;
for(i=0;i<lng;i++) 
   {_delay[i] = attr_delayname.writepos - (__USAT(___SMMUL(mid<<3,(_val[i])<<2)+mad,27)>>(27-attr_delayname.LENGTHPOW)) - BUFSIZE+buffer_index;
   } 

  for(i=0;i<lng;i++) 
  _sam[i]=(___SMMUL((attr_delayname.array[(_delay[i]) & attr_delayname.LENGTHMASK]<<14)<<3,_vol[i]<<2))/(1+lng/2);{}
  for(i=0;i<lng;i++) 
  sumL+=___SMMUL((_sam[i])<<3,(_pan[i])<<4);{}
  for(i=0;i<lng;i++) 
  sumR+=___SMMUL((_sam[i])<<3,(_com[i])<<4);{}
  outlet_outL=sumL+(inlet_in>>1);
  outlet_outR=sumR+(inlet_in>>1);
  outlet_wetsum=(sumL+sumR)>>1;
outlet_delayRec=(inlet_in-___SMMUL((sumL+sumR)<<2,param_feed<<2))>>1;]]></code.srate>
   </obj.normal>
</objdefs>