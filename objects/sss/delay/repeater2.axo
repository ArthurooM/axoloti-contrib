<objdefs appVersion="1.0.12">
   <obj.normal id="repeater2" uuid="7fe334eb-8f7c-4b1c-8ba6-7a76e86a2921">
      <sDescription>version 2 of the audio repeater module. Can be used in-line in your audio-chain and doesn&apos;t need an external delay write module. 

when input &quot;on&quot; goes high, starts repeating the incoming audio for the number of repeats set by the input.
Repeating size is set by the size and swing inlets.
-size/swing are used to set the size in samples (48k/s).
-Ksize/Kswing are used to set the size in the fractional 0-64 way

eg. for the Ksize/Kswing you can use my &quot;BPMext&quot; LFO to provide the &quot;delaybase&quot; timing. Then use the math/ratios235 module to set a division based on 2, 3 and 5 integers (any combination in nominator and denominator).
This way you could, for example, set a main retrigger in fourths, but give every even numbered retrigger an offset in thirds.


the repeat input sets the amount of times the buffer is repeated as long as the &quot;on&quot; input is high. After that, a new sample is taken which itself will be repeated the set amount of times before another sample is taken again.

Bit of a drawback of the way the module is coded, is that there is no pitch-control possible.
Use the &quot;grainer&quot; module if you want pitch-control</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="in"/>
         <bool32 name="on"/>
         <int32 name="size" description="connect to &quot;Ksamples&quot; on my clock2timing module. Use ratioVCAI to set ratio to host tempo"/>
         <int32 name="swing"/>
         <frac32 name="Ksize"/>
         <frac32 name="Kswing"/>
         <int32 name="repeat"/>
         <frac32 name="wet"/>
         <frac32 name="feed"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int32_t *array;
uint32_t writepos;
int32_t size;
int32_t times;
int32_t rec;
int32_t out;
int32_t repeat;
int32_t swing;

int i;]]></code.declaration>
      <code.init><![CDATA[static int32_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;]]></code.init>
      <code.krate><![CDATA[size=___SMMUL(__USAT(inlet_Ksize,27)<<3,LENGTH<<2)+inlet_size;
size=size>0?size:-size;
size=size>0?size:1;
swing=___SMMUL(__USAT(inlet_Kswing,27)<<3,LENGTH<<2)+inlet_swing;
repeat=inlet_repeat;]]></code.krate>
      <code.srate><![CDATA[writepos = (writepos + 1)&LENGTHMASK;
array[writepos] = inlet_on>0?__SSAT(inlet_in+___SMMUL(inlet_feed<<3,out<<2),28):0;
out=0;
if(inlet_on>0){
for(i=1;i<=repeat;i++){
out=__SSAT(out+___SMMUL(array[(writepos-i*size+((i-1)&1)*swing)&LENGTHMASK]<<2,inlet_wet<<3),28);
}
}

outlet_out=__SSAT(inlet_in+out,28);]]></code.srate>
   </obj.normal>
</objdefs>