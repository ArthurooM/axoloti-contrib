<objdefs appVersion="1.0.10">
   <obj.normal id="crossDelay" uuid="25e270a9-b1a5-4554-b292-0a9f92ac2add">
      <sDescription>crossover mixing delay line
-the incoming audio is divided in three frequency bands using the freq1 (lp/bp) and freq2 (bp/hp) knobs for crossover cutoff and then spread across the taps.
-each tap can be positioned anywhere in the buffer, both writing tap as well as reading tap
-one writing tap can be selected as &quot;overwriting&quot; tap, overwriting the buffer with the respective filtered input.
-the other two writing taps mix the incoming band with the buffer.
-the reading taps read out different parts of the buffer, which, depending from their position, read out recorded bands (as long as they&apos;re not being overwritten by the overwriting tap).

This can cause different types of delays, depending on writing and reading positions of the buffers, sometimes completely ignoring a frequency band while feeding back lots of energy from another band.

Time-modulating is not (nicely) possible with this module as there is no interpolation.
Though interesting rhythmic variations can be made by host-syncing the module (clock2timing module, don&apos;t forget to connect the pow-out pin to the clock2timing samplelength input)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="in"/>
         <frac32 name="pitch1"/>
         <frac32 name="pitch2"/>
         <frac32 name="time1"/>
         <frac32 name="time2"/>
         <frac32 name="time3"/>
         <frac32 name="read1"/>
         <frac32 name="read2"/>
         <frac32 name="read3"/>
         <frac32 name="readFeed"/>
         <int32 name="overwrite"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
         <int32 name="pow"/>
      </outlets>
      <displays/>
      <params>
         <int32.hradio name="overwrite">
            <MaxValue i="3"/>
         </int32.hradio>
         <frac32.u.map name="time1"/>
         <frac32.u.map name="read1"/>
         <frac32.u.map name="time2"/>
         <frac32.u.map name="read2"/>
         <frac32.u.map name="time3"/>
         <frac32.u.map name="read3"/>
         <frac32.u.map name="readFeed"/>
         <frac32.s.map name="feed"/>
         <frac32.s.map.pitch name="freq1"/>
         <frac32.s.map.pitch name="freq2"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int32_t *array;
uint32_t writepos;
int32_t out;
int32_t oit;
int32_t val1;
int32_t val2;
int32_t mix;
int32_t time1;
int32_t time2;
int32_t time3;
int32_t read1;
int32_t read2;
int32_t read3;
int32_t readFeed;]]></code.declaration>
      <code.init><![CDATA[static int32_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
]]></code.init>
      <code.krate><![CDATA[ int32_t f1;
 MTOF(param_freq1+inlet_pitch1,f1);
  int32_t f2;
 MTOF(param_freq2+inlet_pitch2,f2);
 outlet_pow=attr_size;
 time1=param_time1+inlet_time1;
   time2=param_time2+inlet_time2;
   time3=param_time3+inlet_time3;
   read1=param_read1+inlet_read1;
   read2=param_read2+inlet_read2;
   read3=param_read3+inlet_read3;
   readFeed=param_readFeed+inlet_readFeed;
   int overwrite=param_overwrite+inlet_overwrite;
   overwrite=overwrite-(overwrite/3)*3;]]></code.krate>
      <code.srate><![CDATA[   
   
   val1 = ___SMMLA((inlet_in+___SMMUL(param_feed<<3,out<<2)-val1)<<1,f1,val1);
   mix=val1-inlet_in-___SMMUL(param_feed<<3,out<<2);
   val2 = ___SMMLA((mix-val2)<<1,f2,val2);
   mix=val2-mix;
  
  writepos = (writepos + 1)&LENGTHMASK;
   if(overwrite==0){
   array[(writepos-(time1>>(27-attr_size)))&LENGTHMASK] = val1;}
   else {array[(writepos-(time1>>(27-attr_size)))&LENGTHMASK] += val1>>1;}
   if(overwrite==1){
   array[(writepos-(time2>>(27-attr_size)))&LENGTHMASK] = val2;}
   else {array[(writepos-(time2>>(27-attr_size)))&LENGTHMASK] += val2>>1;}
   if(overwrite==2){
   array[(writepos-(time3>>(27-attr_size)))&LENGTHMASK] = mix;}
   else{array[(writepos-(time3>>(27-attr_size)))&LENGTHMASK] += mix>>1;}
  
   
int32_t oot=(array[(writepos-(read1>>(27-attr_size)))&LENGTHMASK]>>1);
oot+=(array[(writepos-(read2>>(27-attr_size)))&LENGTHMASK]>>1);
oot+=(array[(writepos-(read3>>(27-attr_size)))&LENGTHMASK]>>1);
oot+=((inlet_in)>>1);
int32_t oat=(array[(writepos-((readFeed)>>(27-attr_size)))&LENGTHMASK]>>1);
out=out+((oat-out)>>1);
oit=oit+((oot-oit)>>1);
outlet_out=oit;]]></code.srate>
   </obj.normal>
</objdefs>