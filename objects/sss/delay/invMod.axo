<objdefs appVersion="1.0.12">
   <obj.normal id="invMod" uuid="47663193-e5af-4738-975f-f06d0d48b4cb">
      <sDescription>This module creates a buffer, inversely reads this buffer and combines this with the incoming signal by ringmodulation or addition.
Mix with original signal to fatten the sound of an oscillator.
Big buffers create a sort of delay, though not in the &quot;normal sense&quot;.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="wave input"/>
         <frac32 name="pitch"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" description="length of inversed reading buffer (window)"/>
         <frac32.s.map name="ofs" description="offset from writeposition (delay)"/>
         <bool32.tgl name="mode" description="ringmodulation or addition of audio input with inversed reading buffer"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
uint32_t readpos;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   readpos=0;
   for(i=0;i<LENGTH;i++) array[i] = 0;]]></code.init>
      <code.krate><![CDATA[int32_t length;//=___SMMUL(LENGTH<<1,param_length);
MTOF(-param_pitch-inlet_pitch,length)
length=length>>27-LENGTHPOW;
int32_t ofs;
MTOF(-param_ofs-inlet_pitch,ofs)
ofs=ofs>>27-LENGTHPOW;]]></code.krate>
      <code.srate><![CDATA[writepos = (writepos + 1)&LENGTHMASK;
readpos = (readpos + 2);
//writepos-=writepos>=length?length:0;
readpos-=readpos>=length?length:0;
   array[writepos&LENGTHMASK] = __SSAT(inlet_in>>14,16);
   switch(param_mode){
  case 0: outlet_out=___SMMUL(array[(writepos-readpos-ofs)&LENGTHMASK]<<17,inlet_in<<3);break;
  case 1:	outlet_out=(array[(writepos-readpos-ofs)&LENGTHMASK]<<14)+inlet_in>>1;break;
   }]]></code.srate>
   </obj.normal>
</objdefs>