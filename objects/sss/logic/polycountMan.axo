<objdefs appVersion="1.0.11">
   <obj.normal id="polycountMan" uuid="a2fe9df6-f933-47c8-ada7-bc8f8aea6642">
      <sDescription>variable stage-beatlength counter.
This module functions like the polycount module, but has a manual control for the length of each stage instead of being randomly generated.
Set the internal table for the beatlength with the dedicated external module (arrayEdit module).

-trig: connect main clock trigger (advisable to use my sss/midi/clock module to sync to midi-host-&gt;also outputs beat-sample-length for use with other modules).
-r: connect to a reset source (&quot;active&quot; on midiclock, some clockdivider or manual button).

-count: outputs the beat-count within each stage. Each new stage, this count will restart and count up to the stage-lenght.
-steps: outputs the beat-length of the current stage (how many steps the count has in total of current stage).
-stage: outputs the current stage-index number.
-c: outputs a trigger each time the stage advances.
-rst: outputs a trigger when all stages are completed and restarts at stage zero.

-length attribute: sets the maximum length of a single pattern.
-pattern attribute: sets the maximum amount of patterns to be made.
-pattern input/control: sets which pattern to be read from the table. This is scaled to the max amount of patterns, this enables easy midi-control!</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>counter.axh</helpPatch>
      <inlets>
         <bool32.rising name="trig" description="trigger"/>
         <bool32.rising name="r" description="reset"/>
         <bool32 name="save"/>
         <bool32 name="load"/>
         <charptr32 name="filename"/>
      </inlets>
      <outlets>
         <int32 name="count"/>
         <int32 name="steps" description="output"/>
         <int32 name="stage"/>
         <bool32.pulse name="c" description="carry pulse"/>
         <bool32 name="rst"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="pattern" noLabel="true"/>
         <bool32.mom name="save"/>
         <bool32.mom name="load"/>
      </params>
      <attribs>
         <spinner name="maxstages" MinValue="1" MaxValue="16" DefaultValue="16"/>
         <spinner name="patterns" MinValue="1" MaxValue="128" DefaultValue="1"/>
      </attribs>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[static const uint32_t LENGTH = attr_maxstages;
static const int patt=attr_patterns;
uint8_t *array;

int ntrig;
   int rtrig;
   int count;
int cnt;
int length;
int rst;
int ltrig;
int strig;]]></code.declaration>
      <code.init><![CDATA[static uint8_t _array[LENGTH*patt] __attribute__ ((section (".sdram")));
array = &_array[0];

count=0;
   ntrig = 0;
   rtrig = 0;
cnt=0;]]></code.init>
      <code.krate><![CDATA[int save=param_save+inlet_save;
int load=param_load+inlet_load;

if ((save>0) && !strig) {
    strig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_written;
    err = f_open(&FileObject, inlet_filename, FA_WRITE | FA_CREATE_ALWAYS);
    if (err != FR_OK) {report_fatfs_error(err,"inlet_filename"); return;}
    int rem_sz = sizeof(*array)*(LENGTH*patt);
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        memcpy((char *)fbuff,(char *)(&array[0]) + offset, sizeof(fbuff));
        err = f_write(&FileObject, fbuff, sizeof(fbuff),&bytes_written);
        rem_sz -= sizeof(fbuff);
        offset += sizeof(fbuff);
      } else {
        memcpy((char *)fbuff,(char *)(&array[0]) + offset, rem_sz);
        err = f_write(&FileObject, fbuff, rem_sz, &bytes_written);
        rem_sz = 0;
      }
    }    if (err != FR_OK) report_fatfs_error(err,"inlet_filename");
    err = f_close(&FileObject);
    if (err != FR_OK) report_fatfs_error(err,"inlet_filename");
  }
  else if (!(save>0)) strig=0;


  if ((load>0) && !ltrig) {
    ltrig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_read;
    err = f_open(&FileObject, inlet_filename, FA_READ | FA_OPEN_EXISTING);
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;}
    int rem_sz = sizeof(*array)*(LENGTH*patt);
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
        if (bytes_read == 0) break;
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz -= bytes_read;
        offset += bytes_read;
      } else {
        err = f_read(&FileObject, fbuff, rem_sz,&bytes_read);
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz = 0;
      }
    }    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;};
    err = f_close(&FileObject);
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;};
  }
  else if (!(load>0)) ltrig=0;



outlet_c=0;
int32_t Patt=___SMMUL(__USAT(param_pattern,27)<<2,patt-1<<3);
Patt=Patt-Patt/patt*patt;
Patt=Patt*LENGTH;
rst=0;
if ((inlet_r>0) && !rtrig) {count=-1;cnt=-1;rst=1; rtrig = 1;}
else if (!(inlet_r>0)) rtrig=0;
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=array[(cnt>=0?cnt:0)+Patt]) {cnt+=1;cnt=cnt-cnt/length*length;count = 0; outlet_c = 1;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
outlet_rst=(cnt==0?1:0)||rst;
outlet_steps= array[(cnt>=0?cnt:0)+Patt];
outlet_count=count;
outlet_stage=cnt;]]></code.krate>
   </obj.normal>
</objdefs>