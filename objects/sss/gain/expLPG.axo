<objdefs appVersion="1.0.10">
   <obj.normal id="expLPG" uuid="cd53740f-3538-46e5-b8f8-a4b6c06a3b6b">
      <sDescription>&quot;voltage controlled lowpass-gate (LPG)&quot;, multiplies v and a inputs, with lowpass filter smoothing from k- to s-rate. This makes envelopes a bit more dampened then with linear interpolation.

both the VCA-level and lowpass-frequency have curve-controls. Counter-clockwise is exponential curve, clockwise is inverse-exponential curve.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="a"/>
         <frac32 name="env" description="gain input"/>
         <frac32 name="expVCA"/>
         <frac32 name="expLPG"/>
         <frac32 name="cutoff"/>
      </inlets>
      <outlets>
         <frac32buffer name="o" description="output"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="expVCA"/>
         <frac32.s.map name="expLPG"/>
         <frac32.u.map name="cutoff"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[   int32_t step1;
   int32_t step2;
   int32_t step3;
   int32_t level;
   int32_t LP;
   int32_t EXPO;
   int inv;
   int32_t expo(int32_t value,int32_t expa){
	if(expa<0){
	value=(1<<27)-value;
	expa=-expa;
	inv=1;
	}
	else{inv=0;}
	int32_t comp=(1<<27)-expa;
	EXPO=___SMMUL(value<<3,(comp+___SMMUL(expa<<3,value<<2))<<2);
	EXPO=___SMMUL(EXPO<<3,(comp+___SMMUL(expa<<3,EXPO<<2))<<2);
     EXPO=___SMMUL(EXPO<<3,(comp+___SMMUL(expa<<3,EXPO<<2))<<2);
     EXPO=___SMMUL(EXPO<<3,(comp+___SMMUL(expa<<3,EXPO<<2))<<2);
	EXPO=___SMMUL(EXPO<<3,(comp+___SMMUL(expa<<3,EXPO<<2))<<2);
	if(inv==1){EXPO=(1<<27)-EXPO;}
}]]></code.declaration>
      <code.krate><![CDATA[
expo(inlet_env,-__SSAT(param_expVCA+inlet_expVCA,27));
int32_t varA=EXPO;
level=__USAT(inlet_cutoff+param_cutoff,27);
expo(inlet_env,-__SSAT(param_expLPG+inlet_expLPG,27));
int32_t varB=___SMMUL(EXPO<<3,level<<3)-(1<<27);
]]></code.krate>
      <code.srate><![CDATA[   step1 =step1+((varA-step1)>>6);
   step2 =step2+((varB-step2)>>6);
   int32_t freq;
   MTOF((step2),freq)
   int32_t o =  ___SMMUL(inlet_a<<3,step1<<3);
   LP=__SMMLA((o-LP)<<1,freq,LP);
   outlet_o=LP;
]]></code.srate>
   </obj.normal>
</objdefs>