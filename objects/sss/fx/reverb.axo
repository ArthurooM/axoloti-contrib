<objdefs appVersion="1.0.10">
   <obj.normal id="reverb" uuid="99136894-9b50-408d-b142-f80c708001f3">
      <sDescription>reverb/early reflection module with internal feedback path, uses SDRAM memory.

use bipolar 16x slider table for setting writevolume and readvolume for all delay-taps
use unipolar 16x slider table for setting panning, writesize and readsize for all delay-taps

-predelay sets an extra time-offset between write-taps and read-taps
-feed allows the sum of both outputs to be fed back into all write-taps
-damp is a simple lowpass filter, filtering the delayed input and feedback
-wet sets the wet-level of the delayed signal.
-stackwrite sets how many writers will be created (write-taps)
-stackread sets how many readers will be created (read-taps)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="L" description="wave input"/>
         <frac32buffer name="R"/>
      </inlets>
      <outlets>
         <frac32buffer name="outL"/>
         <frac32buffer name="outR"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="predelay"/>
         <frac32.s.map name="feed"/>
         <frac32.s.map.pitch name="damp"/>
         <frac32.s.map name="wet"/>
         <int32 name="stackwrite">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
         <int32 name="stackread">
            <MinValue i="1"/>
            <MaxValue i="16"/>
         </int32>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
         <objref name="writesize"/>
         <objref name="readsize"/>
         <objref name="writevolume"/>
         <objref name="readvolume"/>
         <objref name="panning"/>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int i;
uint32_t rnd[32];
int32_t sum1;
int32_t sum2;
int32_t damp;
int rtrig;
int32_t HP;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
]]></code.init>
      <code.krate><![CDATA[
int32_t D;
MTOF(param_damp,D)]]></code.krate>
      <code.srate><![CDATA[
int32_t in=__SSAT((inlet_L+inlet_R>>1)+___SMMUL((param_feed*3/(((param_stackread+param_stackwrite>>1)-1)+1))<<1,(sum1+sum2)<<4),27);
damp=___SMMLA((in-damp)<<1,D,damp);
HP=HP+((damp-HP)>>13);
  writepos = (writepos + 1)&LENGTHMASK;
   array[writepos] = __SSAT(damp-HP>>14,28);
   sum1=0;
   sum2=0;
for(i=0;i<param_stackwrite;i++){
	array[(writepos-(attr_writesize.array[i]>>27-LENGTHPOW-1))&LENGTHMASK]+=___SMMUL(damp-HP>>11,attr_writevolume.array[i]<<2);}
for(i=0;i<param_stackread;i++){
	int32_t H=___SMMUL(((array[(writepos-(attr_readsize.array[i]>>27-LENGTHPOW-1)-___SMMUL(param_predelay<<3,LENGTHMASK<<2))&LENGTHMASK]<<14))<<3,attr_readvolume.array[i]<<2);
	sum1+=___SMMUL(attr_panning.array[i]<<3,H<<2);
	sum2+=___SMMUL(((1<<27)-(attr_panning.array[i]))<<3,H<<2);
}
outlet_outL=inlet_L+___SMMUL(sum1<<3,param_wet<<3);
outlet_outR=inlet_R+___SMMUL(sum2<<3,param_wet<<3);]]></code.srate>
   </obj.normal>
</objdefs>