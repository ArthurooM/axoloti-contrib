<objdefs appVersion="1.0.12">
   <obj.normal id="phaserST" uuid="91696cab-4458-4b88-8c2a-fd9258ff280a">
      <sDescription>Stereo phaser
Up to 8 read points from a stereo buffer. Left and right are inversely modulated.
Spread controls the phase-offset of the modulating sines of the seperate stages. This enables lots of different modulation charaters. Note though, output can get loud! I advice a distortion or compressor behind this module (depending on needed character: aggresive/clean)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="inL" description="wave input"/>
         <frac32buffer name="inR"/>
         <frac32 name="rate"/>
         <frac32 name="depth"/>
         <frac32 name="spread"/>
      </inlets>
      <outlets>
         <frac32buffer name="outL"/>
         <frac32buffer name="outR"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.kpitch name="rate"/>
         <frac32.u.map name="depth"/>
         <frac32.u.map.gain name="wet"/>
         <frac32.u.map.gain name="dry"/>
         <int32 name="stages">
            <MinValue i="1"/>
            <MaxValue i="8"/>
         </int32>
         <frac32.u.map name="spread"/>
         <frac32.s.map name="feed"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int32_t tmp_r;
int32_t phase;
int32_t v26=(1<<26);
int32_t v30=(1<<30);
int i;
int32_t read(int32_t Ps,int32_t I){
	 uint32_t tmp_d =  Ps;
      uint32_t tmp_di = writepos - (tmp_d>>(27-LENGTHPOW)) -1;
      uint32_t tmp_w1 = (tmp_d<<(LENGTHPOW+3)) & 0x3FFFFFFF;
      uint32_t tmp_w2 = v30 - tmp_w1;
      int32_t tmp_a1 = array[(tmp_di&LENGTHMASK)+I]<<16;
      int32_t tmp_a2 = array[((tmp_di+1)&LENGTHMASK)+I]<<16;
      tmp_r = ___SMMUL(tmp_a1,tmp_w1);
      return tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r);

}
int32_t feedL;
int32_t feedR;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[1<<attr_size+1]  __attribute__ ((section (".sdram")));
array = &_array[0];
   int i;
   writepos = 0;
   for(i=0;i<(LENGTH<<1);i++) array[i] = 0;]]></code.init>
      <code.krate><![CDATA[int32_t freq;
MTOFEXTENDED(param_rate+inlet_rate,freq)
freq=freq>>12;
int32_t depth=__USAT(param_depth+inlet_depth,27)>>1;
int32_t spread=(param_spread+inlet_spread)/param_stages<<5;
int32_t DP=(depth>0?depth:-depth)>>1;]]></code.krate>
      <code.srate><![CDATA[outlet_outL=___SMMUL(param_dry,inlet_inL);
outlet_outR=___SMMUL(param_dry,inlet_inR);

writepos = (writepos + 1)&LENGTHMASK;
array[writepos] = __SSAT(inlet_inL+___SMMUL(param_feed<<3,feedR<<2)>>14,16);
array[writepos+LENGTH] = __SSAT(inlet_inR+___SMMUL(param_feed<<3,feedL<<2)>>14,16);

phase+=freq;
for(i=0;i<param_stages;i++){
int32_t sine;
SINE2TINTERP(phase+(i*spread),sine)
sine=___SMMUL(sine,depth);	
feedL=read(DP+sine,0);
feedR=read(DP-sine,LENGTH);
outlet_outL+=___SMMUL(feedL<<1,param_wet)/param_stages;
outlet_outR+=___SMMUL(feedR<<1,param_wet)/param_stages;
}]]></code.srate>
   </obj.normal>
</objdefs>