<objdefs appVersion="1.0.10">
   <obj.normal id="pitchshifterAA" uuid="c18b2ab2-0b71-4ad4-82d1-76a0dea19425">
      <sDescription>This is a LP filter to be used with the pitchshifter2 module. Feed it the same controls and it tracks the up/down sampling of the audio to reduce alliasing</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>filter.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="input"/>
         <frac32 name="semitone"/>
         <frac32 name="harmshift"/>
         <frac32 name="ratioshift"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="output"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="freq" noLabel="true"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t val;
]]></code.declaration>
      <code.init><![CDATA[val = 0;
]]></code.init>
      <code.krate><![CDATA[int32_t f;
   MTOF(param_freq+inlet_semitone,f);
]]></code.krate>
      <code.srate><![CDATA[   //val = ___SMMLA((inlet_in-val)<<1,___SMMUL((f+___SMMUL(f<<7,inlet_harmshift<<2))<<6,inlet_ratioshift<<3),val);

   int32_t g=(f+___SMMUL(f<<5,inlet_harmshift<<2));
   int32_t h=___SMMUL(g<<4,inlet_ratioshift<<4);
   int32_t i=((h>0)?h:-h);
    val = ___SMMLA((inlet_in-val)<<1,i,val);  
   outlet_out= val;
]]></code.srate>
   </obj.normal>
</objdefs>