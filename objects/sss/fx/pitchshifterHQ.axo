<objdefs appVersion="1.0.10">
   <obj.normal id="pitchshifterHQ" uuid="31737e05-9c13-41e5-9df4-b34d2f2a8ca6">
      <sDescription>HQ pitchshifter with a buffer up to 43.7 seconds

NOTE!!!!
&quot;samplelength&quot; input should be connected to the &quot;Phi-&gt;delay-&gt;delay_power_out module to know the maximum buffer of the delay!

&quot;Length&quot; input controls the buffer length(quantized to power of 2 and normalised to the samplelength input for quick use with a normal knob).

&quot;Minimum length&quot; parameter sets the minimum power of 2 that the length has.
NOTE! Only when this parameter is set to 8, does the length-input only have position where pitchshifting occurs. When set to a lower value, the first part of the knob disables the pitchshifting and mixing the sound with the normal sound will result in a phaseshifter. Though this isn&apos;t really controllable as a phase shifter (yet), it does allow for a smooth fade-in of the pitchshifter from a zero length.

&quot;semitone&quot; input will offset the pitch offset of the output with relative to the semitone scale.

&quot;harmshift&quot; input will offset the pitch offset of the output with relative to the harmonic scale. Negative values will result in a almost complete stop (harmshift=-1) or in a reverse play direction.
NOTE! harmshift is still based on the incoming signal and not depending on the semitone offset (yet? I dunno,let me hear what would be beter..).

&quot;ratioshift&quot; input will set the ratio of the pitchshifting. This DOES respond to the semitone and harmshift values (that&apos;s why I kept the harmshift non-responding, as this is somewhat of a same kind of control, though now responding differently)! Negative values of the ratioshift will result in a reverse play of the incoming audio. In this case,a higher value on the semitone input will result in a faster played reversed audio.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>phasor.axh</helpPatch>
      <inlets>
         <frac32 name="length"/>
         <frac32.bipolar name="semitone"/>
         <frac32.bipolar name="harmshift"/>
         <frac32.bipolar name="ratioshift"/>
         <int32 name="samplelength"/>
      </inlets>
      <outlets>
         <frac32buffer name="HQ"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="MinimumLength" noLabel="true">
            <MinValue i="0"/>
            <MaxValue i="8"/>
         </int32>
      </params>
      <attribs>
         <objref name="delayname"/>
      </attribs>
      <code.declaration><![CDATA[uint64_t Phase;
uint64_t Phose;
int64_t Phise;
int64_t Phese;
uint64_t Phrase;
int64_t phasorHQ;
int64_t phasor1;
int64_t phasor2;
int64_t phasor3;
int64_t phasor4;
int64_t phasarHQ;
int64_t phasar1;
int64_t phasar2;
int64_t phasar3;
int64_t phasar4;
int64_t out1;
int64_t out2;
int64_t out3;
int64_t out4;
int64_t out5;
int64_t out6;
int64_t outa1;
int64_t outa2;
int64_t outa3;
int64_t outa4;
int64_t outa5;
int64_t outa6;
int64_t ccomp;
int64_t ccamp;
int64_t HQ1;
int64_t HQ2;
int64_t HQ3;
int64_t HQ4;
int64_t HQ5;
int64_t HQ6;
int64_t HQ7;
int64_t HQ8;
int64_t freq;
int64_t freh;
int64_t friq;]]></code.declaration>
      <code.init><![CDATA[Phase = 0;]]></code.init>
      <code.krate><![CDATA[
int32_t f;
int32_t sami=inlet_semitone>0?0:inlet_semitone;
   MTOF((1<<27)+sami,f);


]]></code.krate>
      <code.srate><![CDATA[int32_t ratioshift;

ratioshift=inlet_ratioshift;
int32_t Length=param_MinimumLength+___SMMUL(inlet_length<<3,(inlet_samplelength-param_MinimumLength)<<2);
int32_t result;
int32_t ar=(inlet_semitone*8/12);
int8_t s = (ar>>24)+4;
uint8_t ei = ar>>16;
if (s>=0)
     result = ((expt[ei]<<s)<<2)-(1<<21);
else result = ((expt[ei]>>(-s)))-(1<<21);

int64_t frac=(1<<25+(11-Length));
freq=frac;
freh=___SMMUL(freq<<3,inlet_harmshift)<<6;
freq=___SMMUL(result<<3,freq<<2)<<4;


int64_t fras=((freq+freh)>>2);

int64_t ratoo=___SMMUL((ratioshift-(1<<24))<<1,(fras+frac)<<2)<<1;
fras=(ratioshift>0)?fras:-fras;

Phase += ((-(fras+ratoo)<<32)-(fras+ratoo));
//modulator 1 (2nd inverted and 
phasor1 = Phase>>(64-(Length));
phasorHQ=(Phase-(phasor1<<(64-(Length))))>>(33-(Length));
ccomp=(1<<31)-((phasorHQ) & ((1<<31)-1));
if(!(phasor1==phasor2))
{    phasor4=phasor3;
	phasor3=phasor2;}
phasor2=phasor1;

//modulator2 
phasar1=(phasor1 +(1<<(Length-1))) & ((1<<Length)-1);
if(!(phasar1==phasar2))
{    phasar4=phasar3;
	phasar3=phasar2;}
phasar2=phasar1;
//side-morph
int64_t sine;
SINE2TINTERP((Phase>>32)+(1<<30),sine)
sine=((sine>>1)+(1<<30));
int32_t ccimp;
ccimp=(-sine+(1<<31));

      uint32_t delay1 = attr_delayname.writepos - phasor2 - BUFSIZE + buffer_index;
      out1= attr_delayname.array[delay1 & attr_delayname.LENGTHMASK]<<14;
      uint32_t delay2 = attr_delayname.writepos - phasor3 - BUFSIZE + buffer_index;
      out2= attr_delayname.array[delay2 & attr_delayname.LENGTHMASK]<<14;
      uint32_t delay3 = attr_delayname.writepos - phasor4 - BUFSIZE + buffer_index;
      out5= attr_delayname.array[delay3 & attr_delayname.LENGTHMASK]<<14;
  HQ1 = (___SMMUL(ccomp,out3)+___SMMUL(phasorHQ,out6)+out4)>>1; 


      uint32_t delaya1 = attr_delayname.writepos - phasar2 - BUFSIZE + buffer_index;
      outa1= attr_delayname.array[delaya1 & attr_delayname.LENGTHMASK]<<14;
      uint32_t delaya2 = attr_delayname.writepos - phasar3 - BUFSIZE + buffer_index;
      outa2= attr_delayname.array[delaya2 & attr_delayname.LENGTHMASK]<<14;
      uint32_t delaya3 = attr_delayname.writepos - phasar4 - BUFSIZE + buffer_index;
      outa5= attr_delayname.array[delaya3 & attr_delayname.LENGTHMASK]<<14;
  HQ2 = (___SMMUL(ccomp,outa3)+___SMMUL(phasorHQ,outa6)+outa4)>>1;   
  
  HQ3=ccimp*(HQ1>>1)+sine*(HQ2>>1);
  HQ4=HQ4+((HQ3-HQ4)>>1);
  HQ5=HQ5+((HQ4-HQ5)>>1);
  HQ6=HQ6+((HQ5-HQ6)>>12);
  outlet_HQ=(HQ5-HQ6)>>29;
  
  




 
out3=out1;
out4=out2;
out6=out5;

outa3=outa1;
outa4=outa2;
outa6=outa5;

]]></code.srate>
   </obj.normal>
</objdefs>