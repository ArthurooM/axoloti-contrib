<objdefs appVersion="1.0.12">
   <obj.normal id="cshuffler" uuid="589f1fa1-1a99-4ba0-b0fc-2eeba905fc72">
      <sDescription>random time shuffler to use with the chainFX effects chainer module.
Delaybase input tells the base-delay. With each trigger at the trg input, a new integer multiplication of this delaytime will be set as the new shuffle-time. &quot;max&quot; sets the maximum multiplication of the delaytime. Eg. use &quot;ratios235&quot; with the &quot;BPMext&quot; module to get base delaytime and integer ratio&apos;s of this timing.
Controls can easily be editted for external control</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <frac32 name="delaybase"/>
         <bool32 name="trg"/>
      </inlets>
      <outlets/>
      <displays/>
      <params>
         <int32 name="max">
            <MinValue i="1"/>
            <MaxValue i="32"/>
         </int32>
         <bool32.tgl name="bypass"/>
         <bool32.tgl name="solo"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[//always keep these the same names, as these are the "general in/out names"
int32_t outL,outR;
int32_t IL,IR;
bool bypass,solo;

//I often use names like "v30" to save powers of 2, saves up some calculation time.
uint32_t v30=(uint32_t)1<<30;
uint32_t v26=(uint32_t)1<<26;
uint32_t v27=(uint32_t)1<<27;

//this is the code for the effect
//Don't change the inL/inR, IL/IR outL/outR names!


static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
int32_t base;
uint32_t TM;
uint32_t writepos;
bool trg;

int32_t FX(int32_t inL,int32_t inR,int32_t CV1,int32_t CV2)
{
	IL=inL;
	IR=inR;
	
	writepos=(writepos+1)&LENGTHMASK;
	array[writepos]=__SSAT(inL>>14,16);
	array[writepos+LENGTH]=__SSAT(inR>>14,16);
	inL=array[(writepos-TM)&LENGTHMASK]<<14;
	inR=array[((writepos-TM)&LENGTHMASK)+LENGTH]<<14;
outL=inL;						
outR=inR;					
	if(bypass>0)
	{
		outL=IL;					//when bypass is on, sends IL to left output of effect function
		outR=IR;					//when bypass is on, sends IR to right output of effect function
	}
};]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[LENGTH*2]  __attribute__ ((section (".sdram")));
array = &_array[0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH*2;i++) array[i] = 0;]]></code.init>
      <code.krate><![CDATA[base=inlet_delaybase;
bypass=param_bypass;
solo=param_solo;

if((inlet_trg>0)&&!trg){
	trg=1;
	TM=(__USAT(base,27)>>27-LENGTHPOW)*((int32_t)(GenerateRandomNumber()%param_max)+1);
}
else if(inlet_trg<1){trg=0;}]]></code.krate>
   </obj.normal>
</objdefs>