<objdefs appVersion="1.0.10">
   <obj.normal id="multiChorusSt" uuid="ab05bf95-ab52-4c74-be00-9017b7c3d25f">
      <sDescription>multi-stage chorus up to 16 stages.
rate: the base rate of the internal LFO&apos;s for controlling the delaytime
drift: offsetting the rate of the seperate LFO&apos;s for changing chorus characteristics
mod: the rate of the internal LFO for modulating the frequency of the former LFO&apos;s
FMW: the width of the LFO modulating the frequency
stack: sets amount of chorus-taps
phase: sets the starting phase of the LFO&apos;s modulating the chorus taps.
phsSprd: sets the phase spreading of the LFO&apos;s modulating the chorus taps (fully clockwise is equal spreading for any amount of selected chorus taps. Counter clockwise is no spreading)
depth: sets the modulation depth of the chorus
spread: spreads the seperate chorus taps over the available delay length (when depth is fully open, there is no spreading possible as it&apos;s already using the full length of the delay)
feed: amount of feedback of the output back to the input
smooth: smooths out the chorus modulation (krate LP-filter)
PANNING: the panning is controlled by the lfo&apos;s, though you can change which lfo controls which tap. If both &quot;other&quot; and &quot;skip&quot; are zero, the same lfo will be chosen for panning as is chosen for the time modulation.
other: offsets all selected lfo&apos;s to the right by the same amount.
skip: changes the &quot;stepping&quot; distance for each next lfo, making different combinations and less expected charactaristics
Especially when using &quot;drift&quot;, the panning effect can be quite dramatic and lots of different sounds can be made.
More drastically even, when you also connect the gate for the volume envelope to the reset input.</sDescription>
      <author>remco van der most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="wave input"/>
         <frac32 name="phase"/>
         <bool32 name="reset"/>
      </inlets>
      <outlets>
         <frac32buffer name="outL"/>
         <frac32buffer name="outR"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.kpitch name="rate"/>
         <frac32.s.map.kpitch name="mod"/>
         <frac32.s.map name="FMW"/>
         <frac32.s.map name="drift"/>
         <bool32.mom name="reset"/>
         <int32 name="stack">
            <MinValue i="1"/>
            <MaxValue i="25"/>
         </int32>
         <frac32.s.map name="phase"/>
         <frac32.s.map name="phsSprd"/>
         <frac32.u.map name="depth"/>
         <frac32.u.map name="spread"/>
         <frac32.s.map name="feed"/>
         <int32 name="smooth">
            <MinValue i="0"/>
            <MaxValue i="21"/>
         </int32>
         <int32 name="other">
            <MinValue i="0"/>
            <MaxValue i="32"/>
         </int32>
         <int32 name="skip">
            <MinValue i="0"/>
            <MaxValue i="32"/>
         </int32>
         <frac32.s.map name="wet"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int32_t *array;
uint32_t writepos;
uint32_t phase[32];
int i;
int32_t freq;
int64_t sine[32];
int32_t sum1;
int32_t sum2;
int32_t val[32];
int rtrig;
int32_t mod;
int32_t FMphase;
int32_t FMsine;
uint32_t pan[32];]]></code.declaration>
      <code.init><![CDATA[static int32_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
]]></code.init>
      <code.krate><![CDATA[MTOFEXTENDED(param_mod,mod)
FMphase+=mod>>7;
SINE2TINTERP(FMphase,FMsine)

MTOFEXTENDED(param_rate,freq)
if(((param_reset+inlet_reset)>0)&&(!(rtrig==1))){
	for(i=0;i<param_stack;i++){
	phase[i]=0;}
	rtrig=1;}
else if(param_reset+inlet_reset<1){rtrig=0;}

for(i=0;i<param_stack;i++){
	phase[i]+=((freq+___SMMUL(freq/param_stack*i<<4,param_drift<<4)+___SMMUL(param_FMW/param_stack*i<<4,FMsine))>>7);
SINE2TINTERP(phase[i]+((i*param_phsSprd/param_stack+param_phase+inlet_phase)<<4),sine[i])
pan[i]=(sine[i]>>5)+(1<<26);
sine[i]=((___SMMUL((sine[i]>>1)+(1<<30),param_depth<<4)<<1)+(___SMMUL(((1<<27)-param_depth)<<4,(i*param_spread/param_stack))<<9));

}
]]></code.krate>
      <code.srate><![CDATA[  writepos = (writepos + 1)&LENGTHMASK;
  array[writepos] = inlet_in+___SMMUL(param_feed<<3,(sum1+sum2)<<4)/param_stack;
sum1=0;
sum2=0;
for(i=0;i<param_stack;i++){
val[i]=val[i]+((sine[i]-val[i])>>param_smooth);
int Z=i*param_skip+param_other-((i*param_skip+param_other)/param_stack)*param_stack;
sum1+=___SMMUL(array[(writepos-((val[i])>>32-LENGTHPOW)&LENGTHMASK)],pan[Z]<<3);
sum2+=___SMMUL(array[(writepos-((val[i])>>32-LENGTHPOW)&LENGTHMASK)],((1<<27)-pan[Z])<<3);
}

outlet_outL=___SMMUL(sum1<<4,param_wet<<3)+(inlet_in>>1);
outlet_outR=___SMMUL(sum2<<4,param_wet<<3)+(inlet_in>>1);]]></code.srate>
   </obj.normal>
</objdefs>