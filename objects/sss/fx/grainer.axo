<objdefs appVersion="1.0.10">
   <obj.normal id="grainer" uuid="33968cd1-4855-4beb-8b93-75efd0d25e13">
      <sDescription>granulizer effect.
continuously buffers audio and plays it back both forward and backwards at the same time

&quot;freeze&quot; stops the recording to the buffer, causing to repeat the sample over and over.
&quot;size&quot; sets the grain size
&quot;rate&quot; sets the grain rate
&quot;reverse&quot; reverses play direction (gated: high is reverse)
when &quot;jump&quot; goes high, the &quot;change&quot; value will be added to the play offset, smoothed out by the &quot;speed&quot; parameter (higher value is faster response)
&quot;wet&quot; and &quot;dry&quot; control the mix of original and grained audio.

delaylength output is used to connect to my &quot;clock2timing&quot; module. This way the &quot;size&quot; of the delay can be synced to host tempo. Use ratiomaxVCA to set ratio to host tempo.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="wave input"/>
         <bool32 name="freeze"/>
         <frac32 name="size"/>
         <frac32.bipolar name="rate"/>
         <bool32 name="reverse"/>
         <bool32 name="jump"/>
         <frac32 name="change"/>
         <frac32 name="speed"/>
         <frac32 name="wet"/>
         <frac32 name="dry"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
         <int32 name="delaylength"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="size"/>
         <frac32.s.map.pitch name="rate"/>
         <frac32.s.map name="change"/>
         <frac32.u.map name="speed"/>
         <frac32.s.map name="wet"/>
         <frac32.s.map name="dry"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int32_t *array;
uint32_t writepos;
uint32_t phase;
int32_t size;
int32_t count;
int32_t can;
int ttrig;]]></code.declaration>
      <code.init><![CDATA[static int32_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
]]></code.init>
      <code.krate><![CDATA[int32_t freq;
MTOFEXTENDED(param_rate+inlet_rate,freq)
freq=inlet_reverse>0?freq:-freq;
size=param_size+inlet_size;
outlet_delaylength=attr_size;
int32_t speed=__USAT(param_speed+inlet_speed,27);
speed=___SMMUL(speed<<3,speed<<2);
speed=___SMMUL(speed<<3,speed<<2);]]></code.krate>
      <code.srate><![CDATA[phase+=freq>>8;
//phase+=(1<<31)/12000;
uint32_t pos=phase>>5;
//count=pos+(freq>>11)>(1<<27)?count+(param_walk<<5):count;
if((inlet_jump>0)&&!ttrig)
{count+=(param_change+inlet_change)<<3;
ttrig=1;}
else if(!(inlet_jump>0)){ttrig=0;}
can=can+___SMMUL((count-can)<<3,speed<<2);
pos=pos+can &((1<<27)-1);

if(!(inlet_freeze>0))
  {writepos = (writepos + 1)&LENGTHMASK;
   array[writepos] = __SSAT(inlet_in<<1,32);}

      uint32_t tmp_d =  __USAT(___SMMUL(pos<<3,size<<2),27);
      uint32_t tmp_di = writepos - (tmp_d>>(27-LENGTHPOW));
      uint32_t tmp_w1 = (tmp_d<<(LENGTHPOW+3)) & 0x3FFFFFFF;
      uint32_t tmp_w2 = (1<<30) - tmp_w1;
      int32_t tmp_a1 = array[tmp_di&LENGTHMASK];
      int32_t tmp_a2 = array[(tmp_di+1)&LENGTHMASK];
      int32_t tmp_ra = ___SMMUL(tmp_a1,tmp_w1);
      tmp_ra = ___SMMLA(tmp_a2,tmp_w2,tmp_ra);
      
      tmp_d =  __USAT(___SMMUL(((1<<27)-pos)<<3,size<<2),27);
      tmp_di = writepos - (tmp_d>>(27-LENGTHPOW));
      tmp_w1 = (tmp_d<<(LENGTHPOW+3)) & 0x3FFFFFFF;
      tmp_w2 = (1<<30) - tmp_w1;
      tmp_a1 = array[tmp_di&LENGTHMASK];
      tmp_a2 = array[(tmp_di+1)&LENGTHMASK];
      int32_t tmp_rb = ___SMMUL(tmp_a1,tmp_w1);
      tmp_rb = ___SMMLA(tmp_a2,tmp_w2,tmp_rb);
      
      
      
      
      outlet_out= ___SMMUL((tmp_ra+tmp_rb)<<2,(param_wet+inlet_wet)<<3)+___SMMUL(inlet_in<<3,(param_dry+inlet_dry)<<2);
]]></code.srate>
   </obj.normal>
</objdefs>