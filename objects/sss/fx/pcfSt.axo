<objdefs appVersion="1.0.12">
   <obj.normal id="pcfSt" uuid="1f2ac271-fbd2-411d-a627-514c8725627a">
      <sDescription>Panning phaser/chorus/flanger</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="inL" description="wave input"/>
         <frac32buffer name="inR"/>
         <frac32 name="rate"/>
         <frac32 name="spread"/>
         <frac32 name="depth"/>
         <frac32 name="phase"/>
      </inlets>
      <outlets>
         <frac32buffer name="outL"/>
         <frac32buffer name="outR"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="rate" description="sets modulation rate"/>
         <frac32.s.map name="spread" description="spreads the seperate stages over the spectrum"/>
         <frac32.s.map name="depth" description="sets modulation depth on top of spreading"/>
         <frac32.s.map name="phase" description="phase offset between modulations"/>
         <int32 name="mod" description="modulation mode, connects different LFO&apos;s to modulate each other for different phasing/panning fx">
            <MinValue i="0"/>
            <MaxValue i="8"/>
         </int32>
         <frac32.s.map name="MW" description="modulation width"/>
         <frac32.s.map name="pan" description="panning amount"/>
         <frac32.s.map name="feed" description="feedback amount"/>
         <frac32.s.map name="wet" description="wet level"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
         <spinner name="stages" MinValue="1" MaxValue="8" DefaultValue="0"/>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
uint32_t phase[attr_stages];
int i;
int32_t sine[attr_stages];
int32_t v29=(1<<29);
int32_t v30=(1<<30);
int32_t SUM;
int32_t prv;
int32_t stp;
int32_t Prv;
int32_t Stp;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[0];

for(i=0;i<attr_stages;i++){
	phase[i]=0;
}
   
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;]]></code.init>
      <code.krate><![CDATA[int32_t depth=__SSAT(param_depth+inlet_depth,28);
depth=___SMMUL(depth<<2,___SMMUL(depth<<3,depth<<2)<<2);
int32_t freq;
MTOFEXTENDED(param_rate+inlet_rate,freq)
freq=freq>>12;
int32_t spread=___SMMUL(param_spread+inlet_spread<<3,freq<<3)>>3;
int32_t Phase=inlet_phase+param_phase<<4;


stp=(Phase-prv)>>4;
int32_t PHS=prv;
prv=Phase;
Stp=(spread-Prv)>>4;
int32_t SPR=Prv;
Prv=spread;]]></code.krate>
      <code.srate><![CDATA[writepos = (writepos + 1)&LENGTHMASK;
      array[writepos] = __SSAT((inlet_inL+inlet_inR>>1)+___SMMUL(param_feed<<2,SUM<<1)>>14,16);
     int32_t IN=inlet_inL+inlet_inR>>1;
SUM=0;
outlet_outL=inlet_inL>>1;
outlet_outR=inlet_inR>>1;
int32_t sumL=0;
int32_t sumR=0;
PHS+=stp;
SPR+=Stp;
for(i=0;i<attr_stages;i++){

int k=i+param_mod;
k=k-k/attr_stages*attr_stages;
phase[i]+=freq+(i>>1)*SPR;
uint32_t MOD=phase[i]+(i*PHS)+___SMMUL(sine[k]<<1,param_MW<<1);
SINE2TINTERP(MOD,sine[i])
sine[i]=(sine[i]>>2)+v29;


      uint32_t tmp_d =  ___SMMUL(sine[i],depth);
      uint32_t tmp_di = writepos - (tmp_d>>(27-LENGTHPOW)) -1;
      uint32_t tmp_w1 = (tmp_d<<(LENGTHPOW+3)) & 0x3FFFFFFF;
      uint32_t tmp_w2 = v30 - tmp_w1;
      int32_t tmp_a1 = array[tmp_di&LENGTHMASK]<<16;
      int32_t tmp_a2 = array[(tmp_di+1)&LENGTHMASK]<<16;
      int32_t tmp_r = ___SMMUL(tmp_a1,tmp_w1);
      tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r);

int32_t pan;
SINE2TINTERP(MOD,pan)
pan=___SMMUL(pan,param_pan<<2);

      sumL+= ___SMMUL(tmp_r<<2,v29+pan);
      sumR+= ___SMMUL(tmp_r<<2,v29-pan);
      SUM+=tmp_r/attr_stages;}
      outlet_outL=(___SMMUL(sumL<<3,param_wet<<3)+(IN));
      outlet_outR=(___SMMUL(sumR<<3,param_wet<<3)+(IN));]]></code.srate>
   </obj.normal>
</objdefs>