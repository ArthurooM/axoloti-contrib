<objdefs appVersion="1.0.12">
   <obj.normal id="baseRatios" uuid="50c4c03c-c049-4375-8500-9a7285906a7b">
      <sDescription>Module to calculate only ratio&apos;s of the input signal based on the selected base-values.
You can either just include a single base value, like 3, to only have &quot;power of two&quot; multiplications/divisions of 3 as output values:
1,3,6,12,etc divided by 1,3,6,12etc
Or use 3 bases, like 2,3 and 5 and their &quot;power of two&quot; multiplications, for more complex ratios.
The whole list is created at start-up and sorted out from lowest to highest value automatically.

The &quot;total&quot; control sets how many values will be created for the M and D selecting inputs.
The M input selects a value from the created list to use as a multiplier for the time input.
The D input selects a value from the created list to use as a divider for the time input.
Both inputs expect a fractioal control value between 0 and 64. (like a normal control module)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <frac32 name="time"/>
         <bool32 name="mGate"/>
         <frac32 name="M"/>
         <bool32 name="dGate"/>
         <frac32 name="D"/>
      </inlets>
      <outlets>
         <frac32 name="time"/>
         <bool32 name="gate"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="base1">
            <MenuEntries>
               <string>2</string>
               <string>3</string>
               <string>5</string>
               <string>7</string>
               <string>11</string>
               <string>13</string>
            </MenuEntries>
            <CEntries>
               <string>2</string>
               <string>3</string>
               <string>5</string>
               <string>7</string>
               <string>11</string>
               <string>13</string>
            </CEntries>
         </combo>
         <combo name="base2">
            <MenuEntries>
               <string>2</string>
               <string>3</string>
               <string>5</string>
               <string>7</string>
               <string>11</string>
               <string>13</string>
            </MenuEntries>
            <CEntries>
               <string>2</string>
               <string>3</string>
               <string>5</string>
               <string>7</string>
               <string>11</string>
               <string>13</string>
            </CEntries>
         </combo>
         <combo name="base3">
            <MenuEntries>
               <string>2</string>
               <string>3</string>
               <string>5</string>
               <string>7</string>
               <string>11</string>
               <string>13</string>
            </MenuEntries>
            <CEntries>
               <string>2</string>
               <string>3</string>
               <string>5</string>
               <string>7</string>
               <string>11</string>
               <string>13</string>
            </CEntries>
         </combo>
         <combo name="bases">
            <MenuEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
            </CEntries>
         </combo>
         <combo name="total">
            <MenuEntries>
               <string>4</string>
               <string>6</string>
               <string>8</string>
               <string>12</string>
               <string>16</string>
               <string>24</string>
               <string>32</string>
            </MenuEntries>
            <CEntries>
               <string>4</string>
               <string>6</string>
               <string>8</string>
               <string>12</string>
               <string>16</string>
               <string>24</string>
               <string>32</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int M[attr_total];
int i;
int32_t m;
int32_t d;
int32_t Time;
int mtrig;
int dtrig;
int32_t temp1;
int32_t temp2;
int gate;]]></code.declaration>
      <code.init><![CDATA[if(attr_bases==1){
	for(i=0;i<attr_total;i++){
		M[i]=attr_base1<<i;
	}
}
if(attr_bases==2){
	for(i=0;i<attr_total;i++){
		M[i]=((attr_base1*((i+1)&1))+attr_base2*((i)&1))<<(i/2);
	}
}

if(attr_bases==3){
	for(i=0;i<attr_total;i++){
		int j=i-(i/3)*3;
		M[i]=(attr_base1*(j==0)+attr_base2*(j==1)+attr_base3*(j==2))<<(i/3);
	}
}


int update=1;
while(update>0){
	update=0;
	for(i=0;i<attr_total-1;i++){
		if(M[i]>M[i+1]){
			update=1;
			temp1=M[i];
			M[i]=M[i+1];
			M[i+1]=temp1;
		}
	}
}
m=1;
d=1;
temp1=1;
temp2=1;]]></code.init>
      <code.krate><![CDATA[if(inlet_mGate>0){m=((inlet_M>>21)*(attr_total-1))>>6;}
if(inlet_dGate>0){d=((inlet_D>>21)*(attr_total-1))>>6;}

if((inlet_mGate>0)&&!mtrig){
	mtrig=1;
	temp1=m;
	Time=inlet_time;
}
else if(inlet_mGate==0){mtrig=0;m=temp1;}

if((inlet_dGate>0)&&!dtrig){
	dtrig=1;
	temp2=d;
	Time=inlet_time;
}
else if(inlet_dGate==0){dtrig=0;d=temp2;}


if(!(inlet_mGate||inlet_dGate)){
gate=0;
}
else{gate=1;}
outlet_time=Time/M[d]*M[m]>>1;
outlet_gate=gate;]]></code.krate>
   </obj.normal>
</objdefs>