<objdefs appVersion="1.0.12">
   <obj.normal id="morphController" uuid="2f591b73-f8d1-4a7f-ad47-177c51de35b7">
      <sDescription>Morph-controller
the phase-input sends a positive triangle to the outputs one by one like:
/\__
_/\_
__/\
\__/
The width of the triangle as well as the spreading between these and the start-position (which one(s) is/are high at phase=0) can be controlled.
The width goes from very narrow spikes to all 4 overlapping, though mixed.
Spread allows to change the order of the triangles, to make 2 triangles go high at the same time or follow-up shortly after each other while having &quot;blank&quot; spaces in the middle. Very nice to use for modulation-widths of different modulations!</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>lfo.axh</helpPatch>
      <inlets>
         <frac32 name="phase"/>
         <frac32 name="lvl"/>
      </inlets>
      <outlets>
         <frac32 name="o1"/>
         <frac32 name="o2"/>
         <frac32 name="o3"/>
         <frac32 name="o4"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map.gain name="width"/>
         <frac32.u.map.gain name="start"/>
         <frac32.u.map.gain name="spread"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[uint32_t Phase;
int r=1;
int32_t lvl;
int32_t SHAPE(int32_t in,int32_t width,int32_t start,int32_t spread,int nr){
	float32_t ratio=(float32_t)(lvl)/width;
	in+=start;
	in+=spread*nr;
	in=(in>0?-in:in)+width>>4;
return	in=(int32_t)(in>0?in*ratio:0)<<1;
}]]></code.declaration>
      <code.init><![CDATA[Phase = 0;]]></code.init>
      <code.krate><![CDATA[Phase=inlet_phase<<4;
      int32_t strt=param_start<<1;
      int32_t sprd=param_spread<<1;
      lvl=inlet_lvl<<3;
   outlet_o1=SHAPE(Phase,param_width,strt,sprd,0);
   outlet_o2=SHAPE(Phase,param_width,strt,sprd,1);
   outlet_o3=SHAPE(Phase,param_width,strt,sprd,2);
   outlet_o4=SHAPE(Phase,param_width,strt,sprd,3);]]></code.krate>
   </obj.normal>
</objdefs>