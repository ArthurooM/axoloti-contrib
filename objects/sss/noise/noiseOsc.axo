<objdefs appVersion="1.0.10">
   <obj.normal id="noiseOsc" uuid="07d7e1f3-dfeb-4f50-8131-562eb291e1aa">
      <sDescription>noise oscillator with noise-update rate in semitones (oscillator pitch), tone (phase octaver for noise update) and cut (BP-filter depending on both pitch and cut parameters)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>gaussian.axh</helpPatch>
      <inlets>
         <frac32 name="pitch"/>
         <frac32 name="cut"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="wave" description="white noise"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch"/>
         <int32 name="tone">
            <MinValue i="21"/>
            <MaxValue i="31"/>
         </int32>
         <frac32.s.map name="cut"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t rnd;
uint32_t phase;
int ttrig;
int32_t val1;
int32_t val2;
int32_t val3;
int32_t val4;]]></code.declaration>
      <code.krate><![CDATA[
int32_t freq;
MTOFEXTENDED(param_pitch+(inlet_pitch),freq)
int32_t f1;
MTOF(param_pitch+param_cut+((inlet_pitch+inlet_cut)),f1);
]]></code.krate>
      <code.srate><![CDATA[phase+=freq;
if(phase>(1<<(52-param_tone))){
phase=0;
rnd=(GenerateRandomNumber()>>2)-(1<<29);}
   val1 = ___SMMLA(((rnd>>1)-val1)<<1,f1,val1);
   val2 = ___SMMLA((val1-val2)<<1,f1,val2);
   val3 = ___SMMLA((val2-val3)<<1,f1,val3);
   val4 = ___SMMLA((val2-val3-val4)<<1,f1,val4); 
outlet_wave= (val2-val3-val4)<<((31-(52-param_tone))>>2);]]></code.srate>
   </obj.normal>
</objdefs>