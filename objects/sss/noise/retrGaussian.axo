<objdefs appVersion="1.0.12">
   <obj.normal id="retrGaussian" uuid="e43b0f29-10eb-4984-adb0-da3ae4a090a8">
      <sDescription>retriggered pseudo gaussian distributed (white) noise
useful for drums/attack-part of sounds that should stay the same for each gate.
Range -64..64</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>gaussian.axh</helpPatch>
      <inlets>
         <bool32 name="trig"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="wave" description="white noise"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="seed" noLabel="true"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[uint32_t seeds[16];
int trig;
int32_t array;]]></code.declaration>
      <code.init><![CDATA[seeds[8] = 0x21c32332 + GenerateRandomNumber();
seeds[9] = 0xfbc57f7a + GenerateRandomNumber();
seeds[10] = 0x7dd1ef4a + GenerateRandomNumber();
seeds[11] = 0xe4ec34ad + GenerateRandomNumber();
seeds[12] = 0x72007b2f + GenerateRandomNumber();
seeds[13] = 0x3d1e9783 + GenerateRandomNumber();
seeds[14] = 0xa4a8f892 + GenerateRandomNumber();
seeds[15] = 0xc82c5e28 + GenerateRandomNumber();
seeds[0] = seeds[8];
seeds[1] = seeds[9];
seeds[2] = seeds[10];
seeds[3] = seeds[11];
seeds[4] = seeds[12];
seeds[5] = seeds[13];
seeds[6] = seeds[14];
seeds[7] = seeds[15];]]></code.init>
      <code.krate><![CDATA[if((inlet_trig)&&!trig){
	trig=1;
seeds[0] = seeds[8]+param_seed;
seeds[1] = seeds[9]+param_seed;
seeds[2] = seeds[10]+param_seed;
seeds[3] = seeds[11]+param_seed;
seeds[4] = seeds[12]+param_seed;
seeds[5] = seeds[13]+param_seed;
seeds[6] = seeds[14]+param_seed;
seeds[7] = seeds[15]+param_seed;
}
else if (inlet_trig==0){trig=0;}]]></code.krate>
      <code.srate><![CDATA[int i;
int32_t n=0;
for(i=0;i<8;i++){
   seeds[i] = (seeds[i] * 196314165) + 907633515;   n += ((int32_t)(seeds[i]))>>7;
}
outlet_wave= n;]]></code.srate>
   </obj.normal>
</objdefs>