<objdefs appVersion="1.0.12">
   <obj.normal id="polyseq" uuid="54a27c99-7055-4ce9-adba-a179cc33f09b">
      <sDescription>Polyphonic, Polyrythmic, Polymetric sequencer
main sequence object, holding track data. 
allows multiple tracks (polyphony), each track with different lengths (polymeter) and a different clock division (polyrhythm)

the attributes, set the maximum number of steps etc, whilst the actual value used can be altered with polyseq/write, which can also be used to change the clock division.
the clock input, is for the fastest subdivision required.

polyseq/write can also be used for updating step values, and playback of sequences is done with polyseq/step and polyseq/read 
for simple setup , use polyseq/notectrl with polyseq/note  see help patch for details</sDescription>
      <author>Mark Harris</author>
      <license>GPL</license>
      <helpPatch>polyseq.axh</helpPatch>
      <inlets>
         <bool32.rising name="clk"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <spinner name="maxTracks" MinValue="1" MaxValue="16" DefaultValue="4"/>
         <spinner name="maxSteps" MinValue="1" MaxValue="64" DefaultValue="16"/>
         <spinner name="numValues" MinValue="1" MaxValue="16" DefaultValue="1"/>
      </attribs>
      <code.declaration><![CDATA[int32_t  seqSteps_[attr_maxTracks];
int32_t  seqClkDivs_[attr_maxTracks];
int32_t seqValue_[attr_maxTracks][attr_maxSteps][attr_numValues];
const int32_t maxSteps_=attr_maxSteps;
const int32_t maxTracks_=attr_maxTracks;
const int32_t numValues_=attr_numValues;

bool clk_=false;
bool	clkTrig_=false;]]></code.declaration>
      <code.init><![CDATA[memset(&seqValue_,0,attr_maxTracks*attr_maxSteps*attr_numValues);
for(int i=0;i<attr_maxTracks;i++) {
	seqClkDivs_[i]=1;
	seqSteps_[i]=attr_maxSteps;
}]]></code.init>
      <code.krate><![CDATA[clkTrig_=false;
if(inlet_clk) {
	if(!clk_) {
		clk_=true;
		clkTrig_=true;
	}
} else {
	clk_=false;
}]]></code.krate>
   </obj.normal>
</objdefs>