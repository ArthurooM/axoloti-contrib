<objdefs appVersion="1.0.8">
   <obj.normal id="automate 32b sdram" uuid="505711411b6868912e5595aa534c223b69569405">
      <sDescription>automate events SDRAM memory</sDescription>
      <author>Mark Harris</author>
      <license>GPL</license>
      <helpPatch>autoseq.axh</helpPatch>
      <inlets>
         <bool32.risingfalling name="gate" description="gate"/>
         <bool32.rising name="reset" description="reset"/>
         <frac32 name="v" description="value"/>
         <bool32 name="mode" description="play/record"/>
         <bool32.rising name="trig" description="clock"/>
         <bool32 name="loop"/>
      </inlets>
      <outlets>
         <frac32 name="v" description="value"/>
         <frac32 name="clk" description="clock"/>
         <frac32 name="evt" description="event"/>
         <bool32 name="end" description="end"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>2</string>
               <string>4</string>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
               <string>128</string>
               <string>256</string>
               <string>512</string>
               <string>1024</string>
               <string>2048</string>
               <string>4096</string>
               <string>8192</string>
               <string>16384</string>
               <string>32768</string>
               <string>65536</string>
               <string>131072</string>
               <string>262144</string>
               <string>524288</string>
               <string>1048576</string>
               <string>2097152</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[

static const uint32_t LENGTHPOW = attr_size;
static const uint32_t LENGTH = 1<<attr_size;
static const uint32_t LENGTHMASK = (1<<attr_size)-1;
static const uint32_t BITS = 32;
int32_t* 	_time;
int32_t* 	_data;

int32_t 	_t;
int32_t 	_idx;
int32_t 	_endidx;
int32_t 	_endt;
int32_t   _end;

int32_t 	_value;
bool 	_record;
int32_t 	_gate;
int32_t 	_reset;
int32_t 	_running;
int32_t 	_trig;

]]></code.declaration>
      <code.init><![CDATA[
{ 
    static int32_t _timeArray[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
    _time = &_timeArray[parent->polyIndex][0];

    static int32_t _dataArray[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
    _data = &_dataArray[parent->polyIndex][0];

    int i;
    for(i=0;i<LENGTH;i++)  {
        _time[i]=0;
        _data[i]=0;
    }

    _t = 0;
    _idx = 0;
    _endidx = 0;
    _running = 0;
    _value = 0;
    _reset = 0;
    _record = 0;
    _trig = 0;
    _endt = 0;
    _end = 0;
}
    ]]></code.init>
      <code.krate><![CDATA[ 
{
    _end = 0;
    if(inlet_reset > 0 & !_reset) {
        _reset = inlet_reset;
        _idx = 0;
        _t = 0;
        _running = _gate;
    } else {
        _reset = 0;
    }

    if(inlet_gate != _gate && inlet_gate>0) {
        _idx = 0;
        _t = 0;
        _running = 1;
    }
    
    if(inlet_mode != _record && inlet_mode>0) {
    	   // entering record
        _record = 1;
        _idx = 0;
        _t = 0;
    }
    if(inlet_mode != _record && !inlet_mode) {
    	   // entering play
        _record = 0;
        _endt = _t;
        _endidx = _idx;
        _idx = 0;
        _t = 0;
    }
    
    if ((inlet_trig>0) && !_trig) {
	   if(_running) {
	   	_t++;
	   }
	   _trig=1;
	}
    else if (!(inlet_trig>0)) _trig=0;

    if (_record) {
        // record mode
        if(inlet_gate != _gate && inlet_gate>0) {
             _endidx = LENGTH;
        }

        if(_running && inlet_v != _value) {
            _value = inlet_v;
            _time[_idx] = _t;
            _data[_idx] = _value;
            if(_idx<LENGTH) {
            	_idx++;
            } else {
            	// at end of recording, start playing back
            	_end = 1;
            	_endidx = _idx;
            	_endt=_t;
            	_record = 0;
            	_idx = 0;
            	_t = 0;
         		_running = inlet_loop;
            }
        }

        if(inlet_gate != _gate && !inlet_gate) {
            _endidx = _idx;
            _endt = _t;
        }
    } else {
        // play mode

        //if(inlet_gate != _gate && inlet_gate>0) { }

        if(_running ) {
        	if( _t >= _time[_idx]) {
            _value = _data[_idx];
            if(_idx<LENGTH && _idx<_endidx) {
            	_idx++;
            }
        	}
	   	if( _t >= _endt && _idx >= _endidx) {
	   		_end = 1;
	   		_t =0;
	   		_idx = 0;
         		_running = inlet_loop;
	   	}
        }
 
        //if(inlet_gate != _gate && !inlet_gate) { }
    }
        
    if(inlet_gate != _gate && !inlet_gate) {
        _running = 0;
    }

    _gate = inlet_gate;
    
    outlet_end = _end;
    outlet_evt = _idx;
    outlet_clk = _t;
    outlet_v = _value;
}

    ]]></code.krate>
   </obj.normal>
</objdefs>