<objdefs appVersion="1.0.10">
   <obj.normal id="wavetable load" uuid="79be5e1d-3c11-489e-9cae-5c2e69d60ddc">
      <sDescription>load 16bit pwm wavetable raw (no header) of single cycle waves.
use with wave/wavetable play
note: you can just load 1 wave and use as wave oscillator</sDescription>
      <author>Mark Harris</author>
      <license>GPL</license>
      <helpPatch>wavetable.axh</helpPatch>
      <inlets/>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <combo name="waves">
            <MenuEntries>
               <string>1</string>
               <string>2</string>
               <string>4</string>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
               <string>128</string>
               <string>256</string>
               <string>512</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
            </CEntries>
         </combo>
         <combo name="size">
            <MenuEntries>
               <string>64</string>
               <string>128</string>
               <string>256</string>
               <string>512</string>
               <string>1024</string>
               <string>2048</string>
               <string>4096</string>
               <string>8192</string>
            </MenuEntries>
            <CEntries>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
            </CEntries>
         </combo>
         <file name="filename"/>
      </attribs>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[static const uint32_t WAVESPOW = (attr_waves);
static const uint32_t SIZEPOW = (attr_size);
static const uint32_t LENGTHPOW = (attr_waves + attr_size);
static const uint32_t LENGTH = (1 << LENGTHPOW);
static const uint32_t LENGTHMASK = ((1 << LENGTHPOW )-1);
static const uint32_t BITS = 16;
static const uint32_t GAIN = 12;
int16_t *array;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
int i;
for(i=0;i<LENGTH;i++) array[i]=0;
FIL FileObject;
FRESULT err;
UINT bytes_read;
err = f_open(&FileObject, "attr_filename", FA_READ | FA_OPEN_EXISTING);
if (err != FR_OK) {report_fatfs_error(err,"attr_filename"); return;}
int rem_sz = sizeof(_array[0]);
int offset = 0;
while (rem_sz>0) {
  if (rem_sz>sizeof(fbuff)) {
    err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
    if (bytes_read == 0) break;
    memcpy((char *)(&_array[0]) + offset,(char *)fbuff,bytes_read);
    rem_sz -= bytes_read;
    offset += bytes_read;
  } else {
    err = f_read(&FileObject, fbuff, rem_sz, &bytes_read);
    memcpy((char *)(&_array[0]) + offset,(char *)fbuff,bytes_read);
    rem_sz = 0;
  }
}if (err != FR_OK) {LogTextMessage("Read failed\n"); return;}
err = f_close(&FileObject);
if (err != FR_OK) {LogTextMessage("Close failed\n"); return;}]]></code.init>
   </obj.normal>
</objdefs>