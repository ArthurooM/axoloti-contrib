<objdefs>
   <obj.normal id="button_pot" uuid="e2878a55-31db-4671-b8c3-a41e09bcdafa">
    <sDescription>enable serial2( PA2/PA3 = SD2, baudrate: 115200) as extra midi i/o to use with euxoloti. Pot, Button values are transmitted by midi and finally routed to object outlets.</sDescription>
   <author>Paul</author>
   <license>BSD</license>
   <inlets/>
   <outlets>
      <frac32.positive name="pot1" description="pot1"/>
      <frac32.positive name="pot2" description="pot2"/>
      <frac32.positive name="pot3" description="pot3"/>
      <frac32.positive name="pot4" description="pot4"/>
      <frac32.positive name="pot5" description="pot5"/>
      <frac32.positive name="pot6" description="pot6"/>
      <frac32.positive name="pot7" description="pot7"/>
      <frac32.positive name="pot8" description="pot8"/>
      <bool32 name="button1" description="button1"/>
      <bool32 name="button2" description="button2"/>
      <bool32 name="button3" description="button3"/>
      <bool32 name="button4" description="button4"/>
   </outlets>
   <displays/>
   <params/>
   <attribs/>
   <includes/>
   <code.declaration><![CDATA[
int32_t pot1,pot2,pot3,pot4,pot5,pot6,pot7,pot8;
int32_t button1; int32_t button2; int32_t button3; int32_t button4;

unsigned char MidiByte0;
unsigned char MidiByte1;
unsigned char MidiByte2;
unsigned char MidiCurData;
unsigned char MidiNumData;

uint8_t StatusToMsgLength(uint8_t t){
	switch(t) {
	case 0x0:
	case 0x1:
	case 0x2:
	case 0x3:
	case 0x4:
	case 0x5:
	case 0x6:
	case 0x7:
		return 0;
	case 0x8:
	case 0x9:
	case 0xa:
	case 0xb:
		return 3;
	case 0xc:
	case 0xd:
		return 2;
	case 0xe:
		return 3;
	default:
		return -1;
	}
}

void MidiInByteHandler(uint8_t data) {
  int8_t len;
  if (data & 0x80) {
    len = StatusToMsgLength(data >> 4);
  
    MidiByte0 = data;
    MidiNumData = len - 1;
    MidiCurData = 0;
    
  }
  else // not a status byte
  {
    if (MidiCurData == 0) {
      MidiByte1 = data;
        MidiCurData++;
    }
    else if (MidiCurData == 1) {
      MidiByte2 = data;
      if (MidiNumData == 2) {

	if (MidiByte0 == 0xb0){
		
		switch (MidiByte1){
			
			case 1: pot1 = (MidiByte2 << 20); break;
			case 2: pot2 = (MidiByte2 << 20); break;
			case 3: pot3 = (MidiByte2 << 20); break;
			case 4: pot4 = (MidiByte2 << 20); break;
			case 5: pot5 = (MidiByte2 << 20); break;
			case 6: pot6 = (MidiByte2 << 20); break;
			case 7: pot7 = (MidiByte2 << 20); break;
			case 8: pot8 = (MidiByte2 << 20); break;
			
		}
	}
	
	else if (MidiByte0 == 0x90  || MidiByte0 == 0x80){
		switch (MidiByte1){
			
			case 0: button1 = (MidiByte2 << 20); break;
			case 1: button2 = (MidiByte2 << 20); break;
			case 2: button3 = (MidiByte2 << 20); break;
			case 3: button4 = (MidiByte2 << 20); break;
		}
      }
      
		MidiCurData = 0;
      }
    }
  }
}

msg_t ThreadX2(){
#if CH_USE_REGISTRY
  chRegSetThreadName("euxo button pot"); // define thread name
#endif
  
MidiNumData = 0;
MidiCurData = 0;

sdPut(&SD2,0xFF);

while(!chThdShouldTerminate()){
	while(!sdGetWouldBlock(&SD2) ){

    		char ch = sdGet(&SD2);
    		MidiInByteHandler(ch);
	}
     chThdSleepMilliseconds(1);

  }
  chThdExit((msg_t)0);
}

static msg_t EuxoButPot(void *arg) {
((attr_parent *)arg)->ThreadX2();
}
WORKING_AREA(waEuxoButPot, 256);
Thread *Thd;

]]></code.declaration>
   <code.init><![CDATA[
palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7)|PAL_MODE_INPUT);// RX
palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));// TX

static const SerialConfig sd2Cfg = {115200, 0, 0, 0}; // set to midi baud rate but works also with higher baud rates.
sdStart(&SD2, &sd2Cfg);

Thd = chThdCreateStatic(waEuxoButPot, sizeof(waEuxoButPot),NORMALPRIO, EuxoButPot, (void *)this);

]]></code.init>
   <code.dispose><![CDATA[
chThdTerminate(Thd);
chThdWait(Thd);
sdStop(&SD2);
]]></code.dispose>
   <code.krate><![CDATA[
outlet_pot1 = this->pot1;
outlet_pot2 = this->pot2;
outlet_pot3 = this->pot3;
outlet_pot4 = this->pot4;
outlet_pot5 = this->pot5;
outlet_pot6 = this->pot6;
outlet_pot7 = this->pot7;
outlet_pot8 = this->pot8;

outlet_button1 = this->button1;
outlet_button2 = this->button2;
outlet_button3 = this->button3;
outlet_button4 = this->button4;
]]>
</code.krate>
 </obj.normal>
</objdefs>