<objdefs>
   <obj.normal id="leds" uuid="e2868a55-31db-4671-b8c3-a41e09bcdafa">
    <sDescription>each inlet controls one of euxo's leds.</sDescription>
   <author>Paul</author>
   <license>BSD</license>
  <inlets>
      <frac32.positive name="led1"/>
      <frac32.positive name="led2"/>
      <frac32.positive name="led3"/>
      <frac32.positive name="led4"/>
   </inlets>
   <outlets/>
   <displays/>
   <params/>
   <attribs/>
   <includes/>
   <code.declaration><![CDATA[
int32_t led1,led2,led3,led4;

msg_t ThreadX2(){
#if CH_USE_REGISTRY
  chRegSetThreadName("euxo led"); // define thread name
#endif

while(!chThdShouldTerminate()){
  	//while(!sdPutWouldBlock(&SD2)){
  
     sdPut(&SD2,0xb0);
  	sdPut(&SD2,0);
  	sdPut(&SD2,led1>>20);

	sdPut(&SD2,0xb0);
  	sdPut(&SD2,1);
  	sdPut(&SD2,led2>>20);

  	sdPut(&SD2,0xb0);
  	sdPut(&SD2,2);
  	sdPut(&SD2,led3>>20);

  	sdPut(&SD2,0xb0);
  	sdPut(&SD2,3);
  	sdPut(&SD2,led4>>20);
  
  	//}
  	chThdSleepMilliseconds(1);
  }
  chThdExit((msg_t)0);
}
static msg_t EuxoLED(void *arg) {
((attr_parent *)arg)->ThreadX2();
}
WORKING_AREA(waEuxoLED, 128);
Thread *Thd;
]]></code.declaration>
   <code.init><![CDATA[
led1=0;led2=0;led3=0;led4=0;

Thd = chThdCreateStatic(waEuxoLED, sizeof(waEuxoLED),NORMALPRIO, EuxoLED, (void *)this);
]]></code.init>
   <code.dispose><![CDATA[
chThdTerminate(Thd);
chThdWait(Thd);
]]></code.dispose>
   <code.krate><![CDATA[
this->led1 = inlet_led1;
this->led2 = inlet_led2;
this->led3 = inlet_led3;
this->led4 = inlet_led4;
]]>
</code.krate>
 </obj.normal>
</objdefs>