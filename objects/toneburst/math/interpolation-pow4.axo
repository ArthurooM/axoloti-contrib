<objdefs appVersion="1.0.10">
   <obj.normal id="interpolation-pow4" uuid="98412d2a-c1d3-4c32-a9b6-b6a39ef54a56">
      <sDescription>pow4 interpolation</sDescription>
      <author>toneburst</author>
      <license>BSD</license>
      <helpPatch>interpolations.axh</helpPatch>
      <inlets>
         <frac32.positive name="in" description="input value"/>
      </inlets>
      <outlets>
         <frac32.positive name="out" description="interpolated output"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="curve" description="interpolation curve" noLabel="true"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[
// Convert from int32_t to float in 0 >1 range
// With thanks to Johannes for code

__attribute__ ( ( always_inline ) ) __STATIC_INLINE float int2f(int32_t val) {
	return val * (float)(1.0f / (1 << 27));
}

__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t f2int(float val) {
	return (int)(val * (float)(1 << 27));
}
]]></code.declaration>
      <code.krate><![CDATA[
// Transform inlet val to float in 0 - 1 range
float x = int2f(inlet_in);

// Transform curve param to float in 0 - 1 range
float a = int2f(param_curve);
// Reverse curve param
a = 1 - a;

// Interpolate between exp-like and log-like curves (without using pow())
// With thanks to Johannes for code
float outf = a*(x*x*x*x)+(1-a)*(1-(1-x)*(1-x)*(1-x)*(1-x));

// Output int
outlet_out = f2int(outf);
]]></code.krate>
   </obj.normal>
</objdefs>