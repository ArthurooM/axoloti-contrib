<objdefs appVersion="1.0.10">
   <obj.normal id="interpolation-bezier-cubic" uuid="42de82bd-22c1-4662-a63d-c43f6b824c40">
      <sDescription>cubic bezier interpolation</sDescription>
      <author>toneburst</author>
      <license>BSD</license>
      <helpPatch>interpolations.axh</helpPatch>
      <inlets>
         <frac32.positive name="in" description="input value"/>
      </inlets>
      <outlets>
         <frac32.positive name="out" description="interpolated output"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="start" description="curve start tension"/>
         <frac32.s.map name="end" description="curve end tension"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[__attribute__ ( ( always_inline ) ) __STATIC_INLINE float int2f(int32_t val) {
	return val * (float)(1.0f / (1 << 27));
}

__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t f2int(float val) {
	return (int)(val * (float)(1 << 27));
}]]></code.declaration>
      <code.krate><![CDATA[
// Transform inlet val to float in 0 > 1 range
float x = int2f(inlet_in);

// Transform curve a and b params to float in 0 > 1 range
float a = int2f(param_start);
float b = int2f(param_end);

// Cubic Bezier interpolation
// http://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/
float outf = 3*((1-x)*(1-x))*x*a+3*(1-x)*(x*x)*b+(x*x*x);

// Output int
outlet_out = f2int(outf);
]]></code.krate>
   </obj.normal>
</objdefs>