<objdefs appVersion="1.0.12">
   <obj.normal id="polymaster" uuid="d692e2a4-c9b1-4232-89dc-19eabad38a6c">
      <sDescription>controls a polyphonic subpatch,and receives information about the current state of all voices inside that patch via &apos;polyhandler slave&apos;
unlike a &apos;normal&apos; polyphonic subpatch, starting a note that is already playing will re-trigger that note,instead of playing that note with another voice.
if &apos;kill&apos; is enabled,notes that are on release will be stopped.
&apos;polyhandler latch&apos; references a table with information about the &apos;playback mode&apos;.
&apos;latchFlag&apos; sets which value in that table defines the &apos;latch - mode&apos;.
in latch-mode,note-ons will toggle the respective note on and off,
note-offs are ignored.
&apos;blocksize&apos; refers how big a block of parameters is for each voice,
&apos;index&apos; sets where inside that block the information about the &apos;playback mode&apos; is stored</sDescription>
      <author>Robert Schirmer</author>
      <license>BSD</license>
      <helpPatch>poly.axh</helpPatch>
      <inlets>
         <int32.positive name="note"/>
         <int32.positive name="velo"/>
         <int32.positive name="stopnote" description="note number to stop"/>
         <bool32.rising name="stop" description="stop it!"/>
         <int32.positive name="startnote"/>
         <bool32.rising name="start"/>
      </inlets>
      <outlets>
         <int32.positive name="note"/>
         <int32.positive name="velo"/>
         <int32.positive name="target"/>
      </outlets>
      <displays/>
      <params>
         <bool32.tgl name="steal" description="kill notes on release" noLabel="true"/>
      </params>
      <attribs>
         <combo name="polyphony">
            <MenuEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int8_t _note;
uint8_t _velo;
uint8_t pren;
uint8_t prev;
bool trig;
bool trigoff;
bool stop;
bool start;
uint8_t i;
bool doit;
uint8_t target;

static const uint8_t LENGTHPOW = 5;
static const uint8_t POLY = attr_polyphony;
static const uint8_t BITS = 8;
static const uint8_t GAIN = 20;

uint8_t Rhold [POLY];
uint8_t Rrelease [POLY];
uint8_t Snote [POLY];
uint8_t Svelo [POLY];

uint8_t old_voice [POLY << 1];
uint8_t old_voice_length;]]></code.declaration>
      <code.init><![CDATA[pren = 0;
prev = 0;
_note = 0;
_velo = 0;
stop = 0;
start = 0;]]></code.init>
      <code.krate><![CDATA[doit = 0;
trig = 0;
trigoff = 0;

for (i = 0;i < old_voice_length;i++) if (!Rrelease [old_voice [i] -1 ] || !old_voice [i]) {
		old_voice_length --;
		memmove (&old_voice [i],&old_voice [i +1],old_voice_length);
		}

if ((inlet_note != pren) || (inlet_velo != prev)){
	pren = inlet_note;
	prev = inlet_velo;
	_velo = inlet_velo;
	_note = inlet_note;
	if (_velo) trig = 1;	
	else trigoff = 1;	
}
TRIGGER:
if (trig) {
	//retrig
	for (i = 0;i < POLY;i ++){
	 	if (Rrelease [i] == (_note + 1)){
			target = i;
			doit = 1;	
			}	
		}	
	//trigger on
	if (!doit){
	for (i = 0;i < POLY;i ++) if ((!Rhold [i]) && (!Rrelease [i])) {target = i; doit = 1;}	
		}
	//kill
	if ((!doit && param_steal)&& old_voice_length){
		target = old_voice [0] -1;
		old_voice [0] = 0;
		doit = 1;
	}
						
}
//trigger off
if (trigoff) {
	for (i = 0;i < POLY;i ++)if (Rhold [i] == (_note + 1)){target = i;doit = 1;}
	}

//stop
if  (inlet_stop && (!stop)) {
			_note = inlet_stopnote;
			_velo = 0;
			pren = _note;
			prev = _velo;
			stop = 1;
			trigoff = 1;
			goto TRIGGER;			
}
	if  (!inlet_stop) stop = 0;
//start
if  (inlet_start && (!start)) {	
			_note = inlet_startnote;
			_velo = 127;
			pren = _note;
			prev = _velo;
			start = 1;
			trig = 1;
			goto TRIGGER;			
}
	if  (!inlet_start) start = 0;
	
if (doit) {
Snote [target] = _note + 1;
Svelo [target] = _velo;
if (_velo) Rhold [target] = _note +1;
	else {
		Rhold [target] = 0;
		for (i = 0;i < old_voice_length;i++) if (old_voice [i] == (target +1)) old_voice [i] = 0;
		old_voice [old_voice_length] = target +1;
		old_voice_length ++;
	}
}

outlet_note = _note;
outlet_velo = _velo;
outlet_target = target;]]></code.krate>
   </obj.normal>
</objdefs>