<objdefs appVersion="1.0.12">
   <obj.normal id="recmodes" uuid="198db6cb-a19c-4cee-9711-1f477ea7ac29">
      <sDescription>a helper for different recording modes for &apos;smplr&apos;.
&apos;loopRec&apos; will record into the selected slot,as long as &apos;loopRec&apos; is high,
no new slices will be created.
in addition,&apos;loopRec&apos; will check if the selected slot is empty.if not,
the object will search for the next empty slot.
&apos;sliceArm&apos; will arm &apos;smplr&apos; to record to the selected slot,
&apos;sliceRec&apos; will start recording to that slot if it&apos;s empty.</sDescription>
      <author>Robert Schirmer</author>
      <license>BSD</license>
      <helpPatch>smplr.axh</helpPatch>
      <inlets>
         <int32.positive name="slot"/>
         <bool32.risingfalling name="loopRec"/>
         <bool32.risingfalling name="sync"/>
         <frac32.positive name="phase"/>
         <bool32.risingfalling name="sliceArm"/>
         <bool32.rising name="sliceRec"/>
         <bool32.risingfalling name="DISABLE"/>
      </inlets>
      <outlets>
         <int32 name="slot"/>
         <bool32 name="arm"/>
         <bool32.pulse name="rec"/>
         <int32.positive name="playmode"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <objref name="smplr"/>
         <spinner name="loopFlag" MinValue="1" MaxValue="10" DefaultValue="3"/>
         <spinner name="sliceFlag" MinValue="1" MaxValue="10" DefaultValue="1"/>
      </attribs>
      <code.declaration><![CDATA[bool srec;
uint8_t slot;
bool rec;
bool lrec;

uint32_t start;
int32_t _ap;
int32_t phase;
bool full;]]></code.declaration>
      <code.krate><![CDATA[outlet_rec = 0;
full = attr_smplr.array[(inlet_slot << 2) +2];

if (!inlet_DISABLE){
if (inlet_loopRec && !lrec){
	lrec = 1;
	start = inlet_phase;
	outlet_playmode = attr_loopFlag;
	if (full){
	slot = 255;
	int i;
	for (i = 0;i < 126;i++) if (!attr_smplr.array[(i << 2) +2]){slot = i; break;}
	}
	else slot = inlet_slot;
	if (slot != 255) {
		rec = 1;
		outlet_rec = 1;	
		}	
}

if (!inlet_loopRec && lrec) {
	if (inlet_sync)	{
 		phase = (inlet_phase - start) & ((1<<27)-1);
        		 if ((phase - _ap) <= 0)  {
        		 	lrec = 0;
         			rec = 0;
         			attr_smplr.array[511] -= 16;
        		 } 
         _ap = phase;
        } 
        else {
        	rec = 0;
        	lrec = 0;
        	}
}

if (!lrec){	
	if ((inlet_sliceArm && !rec)&& !full) {
			srec = 1;
			rec = 1;
		}
		if (srec) {
			outlet_rec = inlet_sliceRec;
			if (!full) slot = inlet_slot;
			outlet_playmode = attr_sliceFlag;
		}
	if (!inlet_sliceArm && srec) {srec = 0;rec = 0;}
}

outlet_arm = rec;
outlet_slot = slot;
}]]></code.krate>
   </obj.normal>
</objdefs>