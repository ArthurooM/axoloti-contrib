<objdefs appVersion="1.0.12">
   <obj.normal id="stransport" uuid="22d348d0-6bf2-4f65-97ce-fe774b2989d2">
      <sDescription>sort of a transport for sequencing.
48000 at inlet &apos;smps&apos; will result in a 1hz wave ranging from 0 to 64.
also,a position between 0 and the value of &apos;steps&apos; is put out,as well as 24ppq - pulses.
&apos;factor&apos; sets a multiplikation or divison factor,while &apos;mode&apos; selects whether to multiply or divide the &apos;tempo&apos;.</sDescription>
      <author>robert schirmer</author>
      <license>BSD</license>
      <helpPatch>transport.axh</helpPatch>
      <inlets>
         <int32 name="smps" description="length in samples"/>
         <int32 name="factor" description="adds to &apos;factor&apos;"/>
         <bool32.risingfalling name="mode" description="or &apos;mode&apos;"/>
         <bool32.rising name="reset" description="reset phase"/>
      </inlets>
      <outlets>
         <frac32 name="phase" description="phase 0. till 64."/>
         <int32 name="step" description="step index from 0 to &apos;steps&apos;"/>
         <bool32.pulse name="24ppq" description="24 ppq pulse"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="factor" description="multiplication or division factor">
            <MinValue i="1"/>
            <MaxValue i="64"/>
         </int32>
         <bool32.tgl name="mode" description="0 = multiply, 1 = divide"/>
      </params>
      <attribs>
         <combo name="steps" description="how many steps per bar?">
            <MenuEntries>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
               <string>128</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[uint32_t Phase;
uint32_t r;
uint64_t freq;
uint32_t base;
uint8_t factor;
uint8_t steps;
uint32_t prev;
uint32_t ppq;]]></code.declaration>
      <code.init><![CDATA[Phase = 0;
   r = 1;]]></code.init>
      <code.krate><![CDATA[factor = inlet_factor + param_factor;
base = (param_mode || inlet_mode) ?  (inlet_smps * factor) : (inlet_smps / factor);
freq = (int)(281474976710656.f/(base * (128<<3)));
steps = 29 - attr_steps;

{
      if (inlet_reset && r) {
         Phase = 0;
         r = 0;
      } else {
         if (!inlet_reset) r = 1;
         Phase += freq>>2;
      }
      outlet_phase = (Phase>>5);
      outlet_step = (Phase >> steps);
      
      ppq = ((Phase >> 25)*3)>>2;
      if (ppq != prev ) {outlet_24ppq = 1; prev = ppq;}
      else outlet_24ppq = 0;
      
   }]]></code.krate>
   </obj.normal>
</objdefs>