<objdefs appVersion="1.0.12">
   <obj.normal id="brain_lpr 3" uuid="f0557897-c18e-4a49-aaf5-b6bfa7246f5e">
      <sDescription>edits a bank of samples recorded with &apos;smplr&apos;.
&apos;slot&apos; sets the slot to work on,
&apos;copy&apos;,&apos;move&apos; and &apos;delete&apos; have to be triggered via &apos;trig&apos;.
&apos;defrag&apos; will clear unused sample data and compact the referred table.
&apos;clear&apos; will clear the data.</sDescription>
      <author>Robert Schirmer</author>
      <license>BSD</license>
      <helpPatch>smplr.axh</helpPatch>
      <inlets>
         <int32.positive name="slot" description="slot to work on"/>
         <bool32.rising name="trig" description="trigger an editing action"/>
         <bool32.risingfalling name="copy" description="copy the selected slot"/>
         <bool32.risingfalling name="move" description="move the selected slot"/>
         <bool32 name="pitchUp"/>
         <bool32 name="pitchDown"/>
         <bool32.risingfalling name="delete" description="delete the selected slot"/>
         <bool32.rising name="defrag" description="defragment the sample data"/>
         <bool32.rising name="clear" description="clear all data"/>
      </inlets>
      <outlets>
         <bool32.pulse name="delete" description="pulse on delete"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <objref name="wave"/>
         <objref name="params"/>
         <combo name="blocksize">
            <MenuEntries>
               <string>1</string>
               <string>2</string>
               <string>4</string>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
               <string>128</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[bool ctrig;
bool dtrig;
bool cpytrig;
bool cpytemptrig;
bool del;
bool clrtrig;

bool move;

bool mtrig;
uint8_t mslot;
uint8_t srcslot;

bool copytrig;

uint32_t sstart;
uint32_t send;
uint32_t slength;

uint32_t slottemp [4];
int32_t paramtemp [1 << attr_blocksize];

static const uint16_t LENGTH = 1024;
uint32_t *array;
bool REC;
uint8_t RECSLOT;


void delete_slot (uint8_t target)__attribute__((noinline))  {
	if (array [(target <<2) +2]){
	sstart = array[target << 2];
	send = array[(target << 2) + 1];
	int i;
	for (i = 0;i < 4;i++) array [(target << 2) + i] = 0;
	for (i = 0;i < (1 << attr_blocksize);i++) attr_params.array [(target << attr_blocksize) + i] = 0;
		bool check = 1;
		for (i = 0;i < 127; i ++) if (array [(i << 2) +1] == send) check = 0;
	if (check) {
		array [array[1023] + 512] = sstart;
		array [array[1023] + 767] = send;
		array[1023] ++;
		}
	}	
}]]></code.declaration>
      <code.init><![CDATA[static uint32_t _array[attr_poly][1024]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];

{
	int i;
	for(i=0;i<1024;i++) array[i]=0;
}

/*
static uint8_t _fout[attr_poly][512] __attribute__ ((section (".sdram")));
fout = &_fout[parent->polyIndex][0];
{
	int i;
	for(i=0;i<512;i++) fout[i]=0;
}
get_dir ();
*/]]></code.init>
      <code.krate><![CDATA[mslot = inlet_slot % 126;
outlet_delete = 0;

//delete
if (inlet_delete && inlet_trig && !dtrig) {
delete_slot (mslot);
dtrig = 1;
outlet_delete = 1;
}
//compact
if (inlet_defrag && !ctrig) {
	ctrig = 1;
	int i;
	for (i = 0; i < array[1023];i++){		
		send =  array[i + 767];	
		sstart = array [i + 512];
		slength = (send - sstart);			
				int shift_index;
				for(shift_index=0;shift_index< 512;shift_index += 4)
				if (array[shift_index] >= send) {
					array[shift_index] -= slength;
					array[shift_index + 1] -= slength;
					}			
				int move_samples;
				for(move_samples=send;move_samples < (array [1022]);move_samples++) 
				attr_wave.array [move_samples - slength] = attr_wave.array [move_samples];							
				int shift_chunks;
				for (shift_chunks = 0;shift_chunks<array[1023];shift_chunks ++)
				if (array[shift_chunks + 512] >= send ) {array [shift_chunks + 512] -=slength;array [shift_chunks+767] -= slength;}

				array [1022] -= slength;	
	}
	array[1023] = 0;
}
if (!inlet_defrag) ctrig = 0;

//paste
	if (inlet_trig && cpytemptrig && !cpytrig && (inlet_copy || move)){
	cpytrig = 1;
	delete_slot(mslot);
	int i;
	for (i = 0;i < 4 ;i ++) array [(mslot << 2)+ i] = slottemp[i];
	if (inlet_copy && inlet_pitchUp) paramtemp[8] += (((1 << attr_params.GAIN)/3)+1);
	if (inlet_copy && inlet_pitchDown) paramtemp[8] -= (((1 << attr_params.GAIN)/3)+1);
	for (i = 0;i < (1<<attr_blocksize) ;i ++ ) attr_params.array [(mslot << attr_blocksize)+ i] = paramtemp[i];
	if (move) {
			delete_slot (srcslot);
			outlet_delete = 1;	
			move = 0;	
		}
	}

//copy	
if (inlet_trig && !cpytemptrig && (inlet_copy || move)){
	cpytemptrig = 1;
	srcslot = mslot;
	int i;
	for (i = 0;i < 4 ;i ++ ) slottemp [i] = array [(mslot << 2)+ i];
	for (i = 0;i < (1<<attr_blocksize) ;i ++ ) paramtemp [i] = attr_params.array [(mslot << attr_blocksize)+ i];
}

//move
if (inlet_move && !mtrig){
	mtrig = 1;
	move = 1;	
}

//clear
if (inlet_clear && !clrtrig){
	clrtrig = 1;
	int i;
	for (i = 0;i <1024;i++)array[i] = 0;
	for (i = 0;i < ((1 << attr_blocksize)<<7);i++) attr_params.array [i] = 0;
}
	
if (!inlet_copy && !inlet_move) cpytemptrig = 0;
if (!inlet_move) {mtrig = 0;move = 0;}
if (!inlet_trig) {cpytrig = 0;dtrig = 0;}
if (!inlet_clear) clrtrig = 0;]]></code.krate>
   </obj.normal>
</objdefs>