<objdefs appVersion="1.0.12">
   <obj.normal id="tserial 6" uuid="ecba7725-a4d3-4bc7-8e8f-f047558c5449">
      <sDescription>save and load table to sdcard</sDescription>
      <author>Johannes Taelman edit by Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>table.axh</helpPatch>
      <inlets>
         <bool32.rising name="save" description="trigger"/>
         <bool32.rising name="load" description="trigger"/>
         <charptr32 name="filename"/>
      </inlets>
      <outlets>
         <int32 name="test"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <objref name="table"/>
      </attribs>
      <includes>
         <include>chibios/ext/fatfs/src/ff.h</include>
      </includes>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[int strig;
int ltrig;
int test;
bool BUSY;
bool save;
bool load;
char filename [16];]]></code.declaration>
      <code.krate><![CDATA[if (save) {
    save = 0;
    FIL FileObject;
    FRESULT err;
    UINT bytes_written;
    err = f_open(&FileObject, inlet_filename, FA_WRITE | FA_CREATE_ALWAYS);
    if (err != FR_OK) {report_fatfs_error(err,"inlet_filename"); return;}
    int rem_sz = sizeof(*attr_table.array)*attr_table.LENGTH;
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        memcpy((char *)fbuff,(char *)(&attr_table.array[0]) + offset, sizeof(fbuff));
        err = f_write(&FileObject, fbuff, sizeof(fbuff),&bytes_written);
        rem_sz -= sizeof(fbuff);
        offset += sizeof(fbuff);
      } else {
        memcpy((char *)fbuff,(char *)(&attr_table.array[0]) + offset, rem_sz);
        err = f_write(&FileObject, fbuff, rem_sz, &bytes_written);
        rem_sz = 0;
      }
    }   
    if (err != FR_OK) report_fatfs_error(err,"inlet_filename");
    err = f_close(&FileObject);
    if (err != FR_OK) report_fatfs_error(err,"inlet_filename");
    BUSY=0;
  }

  if (load) {
    load = 0;
    FIL FileObject;
    FRESULT err;
    UINT bytes_read;
    err = f_open(&FileObject, inlet_filename, FA_READ | FA_OPEN_EXISTING);
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;}
    int rem_sz = sizeof(*attr_table.array)*attr_table.LENGTH;
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
        if (bytes_read == 0) break;
        memcpy((char *)(&attr_table.array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz -= bytes_read;
        offset += bytes_read;
      } else {
        err = f_read(&FileObject, fbuff, rem_sz,&bytes_read);
        memcpy((char *)(&attr_table.array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz = 0;
      }
    }  
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;};
    err = f_close(&FileObject);
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;};
    BUSY = 0;
  }

if (inlet_save && !strig) {save = 1;BUSY = 1;}
if (!inlet_save) strig = 0;
if (inlet_load && !ltrig) {load = 1;BUSY = 1;}
if (!inlet_load) ltrig = 0;

outlet_test = BUSY;]]></code.krate>
   </obj.normal>
</objdefs>