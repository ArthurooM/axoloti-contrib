<objdefs appVersion="1.0.12">
   <obj.normal id="1shot_new" uuid="d5d8de30-9068-48e9-ad31-8ea1fce5feb8">
      <sDescription>drives a phasor (saw-wave) for reading/writing data</sDescription>
      <author>robert schirmer</author>
      <license>BSD</license>
      <helpPatch>loop_multi.axh</helpPatch>
      <inlets>
         <frac32.positive name="offset" description="offset inside the table"/>
         <frac32.positive name="range" description="length of the area to index,or loop end"/>
         <frac32.positive name="startpoint" description="position inside range on trigger"/>
         <frac32.bipolar name="speed" description="speed modulation"/>
         <bool32.rising name="play" description="trigger playback"/>
      </inlets>
      <outlets>
         <frac32buffer.positive name="pos" description="relative position inside table"/>
         <int32 name="spos" description="playhead position inside range in samples"/>
         <int32 name="stotal" description="length of range in samples"/>
         <frac32.bipolar name="speed" description="total speed"/>
         <bool32 name="play" description="playback state"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="speed" description="speed ,+ 64 normal speed forward, - 64 backward" noLabel="true"/>
      </params>
      <attribs>
         <objref name="table"/>
      </attribs>
      <code.declaration><![CDATA[int32_t index;
int32_t re;
int32_t rs;
uint8_t shift;

int ntrig;

int32_t t_speed;
int32_t start;

bool play;]]></code.declaration>
      <code.init><![CDATA[//set 'shift factor' for storing the recording length/the sync output
shift =     (27-attr_table.LENGTHPOW);]]></code.init>
      <code.krate><![CDATA[t_speed = ((inlet_speed + param_speed)*(float)(1.0f/(1<<(27 - shift))));
start = ___SMMUL(inlet_range,inlet_startpoint)<<5;

re = (t_speed > 0 ) ? inlet_range - (1 << shift) : inlet_range;
rs = (t_speed > 0 ) ? start : start -  (1 << shift) ;


     if (inlet_play && (!ntrig)) {
         ntrig = 1;
         index = (t_speed < 0) ? inlet_range:start;
         play = 1; 
         }  
         else if (!(inlet_play > 0)) ntrig = 0;


outlet_spos =  ((index >> shift) > 0) ? (index >> shift) : 0;
outlet_stotal = inlet_range >> shift;
outlet_speed = inlet_speed + param_speed;
outlet_play = play;]]></code.krate>
      <code.srate><![CDATA[if ((index > re)||(index < rs)) play = 0;
   
   outlet_pos = __USAT((index + inlet_offset),27);
   
   if (play) index += t_speed ;
   else outlet_pos = 0;]]></code.srate>
   </obj.normal>
</objdefs>