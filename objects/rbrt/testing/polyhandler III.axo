<objdefs appVersion="1.0.12">
   <obj.normal id="polyhandler III" uuid="869ff2d5-9ec6-47af-932f-cbe9cc865bf6">
      <sDescription>an approach to midi polyphony.a &apos;map&apos; of currently active notes is stored in a table with the same name as the object that can be referenced from &apos;outside&apos;.
currentNote,gate and velo correspond to the actual events,noteOn issues a pulse whenever a note-on occurs.
notecount puts out the number of notes curently on hold,hold is 1 if any keys are on hold.</sDescription>
      <author>Robert Schirmer</author>
      <license>BSD</license>
      <helpPatch>poly.axh</helpPatch>
      <inlets>
         <bool32.rising name="clear"/>
         <bool32 name="mute"/>
         <int32 name="note"/>
         <bool32.rising name="trigger"/>
      </inlets>
      <outlets>
         <int32 name="currentNote" description="note number of active key"/>
         <bool32 name="currentGate" description="key pressed or released ?"/>
         <frac32.positive name="currentVelo" description="velocity of active key"/>
         <bool32.pulse name="noteOn" description="pulse on note-on"/>
         <bool32.pulse name="noteOff"/>
         <int32 name="notecount" description="number of notes currently held down"/>
         <bool32 name="hold" description="any notes on hold?"/>
         <int32 name="test"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <spinner name="startNote" MinValue="0" MaxValue="127" DefaultValue="0"/>
         <spinner name="endNote" MinValue="0" MaxValue="127" DefaultValue="127"/>
         <spinner name="noteshift" MinValue="-127" MaxValue="127" DefaultValue="0"/>
         <objref name="playing" description="is a note on?"/>
         <objref name="active" description="is a note on OR on release,or latched?"/>
         <spinner name="maxpoly" description="maximum polyphony" MinValue="1" MaxValue="16" DefaultValue="1"/>
         <objref name="latch" description="..where,in the parameter-table,to find if a note is set to latch"/>
         <combo name="blocksize" description="blocksize of that table">
            <MenuEntries>
               <string>1</string>
               <string> 2</string>
               <string>4</string>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
            </CEntries>
         </combo>
         <spinner name="index" description="index of the latch-parameter in a block" MinValue="0" MaxValue="127" DefaultValue="0"/>
         <combo name="device" description="target device">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
      </attribs>
      <code.declaration><![CDATA[int8_t _note;
uint8_t _gate;
uint8_t _velo;
uint8_t _rvelo;
uint8_t _touch;
uint8_t count;
bool trig;
bool trigoff;
bool trigR;
bool trigoffR;
bool rtrig;
bool trigext;
bool maxpoly;

static const uint32_t LENGTHPOW = 7;
static const uint32_t LENGTH = 1<<7;
static const uint32_t LENGTHMASK = (1<<7)-1;
static const uint32_t BITS = 8;
static const uint32_t GAIN = 20;
int8_t array [LENGTH];
uint8_t hold;]]></code.declaration>
      <code.init><![CDATA[_gate = 0;
_note = 0;
_touch = 0;]]></code.init>
      <code.krate><![CDATA[hold = 0;
int i;
for (i = 0; i < attr_active.LENGTH;i ++) {
	if (attr_active.array [i] ) hold ++;
	}	
maxpoly = (hold > (attr_maxpoly -1))? 1:0;


outlet_currentNote= _note;
outlet_currentGate= _gate<<27;
outlet_currentVelo= _velo<<20;

outlet_noteOn = trig;
outlet_noteOff = trigoff;


outlet_notecount  =count;
outlet_hold = bool (count);

if (inlet_clear && !rtrig) {
	{ 
  int i;
  for(i=0;i<LENGTH;i++) array[i]=0;
}
	rtrig = 1;
	count = 0;
}
if (!inlet_clear) rtrig =  0;

if (!inlet_mute){
if (trig && (!maxpoly )) {
if (!attr_latch.array [(_note << attr_blocksize ) + attr_index]) trigR = 1;
if ((attr_latch.array [(_note << attr_blocksize ) + attr_index])  && (!attr_playing.array [_note]))trigR = 1;
}
if (trig && (attr_latch.array [(_note << attr_blocksize ) + attr_index])  && (attr_playing.array [_note])) trigoffR = 1;
}

if (trigoff && (!attr_latch.array [(_note << attr_blocksize ) + attr_index])) trigoffR = 1;
if (trigR) MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1),_note,_velo);
if (trigoffR) MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1),_note,0);


if ((inlet_trigger && !trigext) && (!maxpoly)){trigext = 1; MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1),inlet_note,127);}
if (!inlet_trigger) trigext= 0;

trig = 0;
trigoff = 0;
trigR = 0;
trigoffR = 0;

outlet_test = hold;]]></code.krate>
      <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + attr_midichannel) && (data2)) {
  if (((data1 >= attr_startNote)&&(data1 <= attr_endNote)) && ((data1 + attr_noteshift) > -1))
  {
    	_velo = data2;
    	_note = (data1 + attr_noteshift);
    	 if ( !array [data1 + attr_noteshift]) trig = 1;
    	 array [data1 + attr_noteshift] = _velo;
    	_gate = 1;
    count += 1;   
  }
}
if (((status == MIDI_NOTE_ON + attr_midichannel) && (!data2))||(status == MIDI_NOTE_OFF + attr_midichannel)) 
{
 if ((data1 >= attr_startNote)&&(data1 <= attr_endNote) && ((data1 + attr_noteshift) > -1))
{
	if ( array [data1 + attr_noteshift]) trigoff = 1;
	array [data1 + attr_noteshift] = 0;
if (count) count -= 1;
	_velo = data2;
    _note = (data1 + attr_noteshift);
   	_gate = 0;
}
 }

else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
   _gate = 0;
}]]></code.midihandler>
   </obj.normal>
</objdefs>