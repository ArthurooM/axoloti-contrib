<objdefs appVersion="1.0.12">
   <obj.normal id="tcopy" uuid="1dfced04-b0bf-49ef-a299-2efc59c2f593">
      <sDescription>copy the elements of a table from table &apos;src&apos; to table &apos;dst&apos;
the length of the area to copy is defined by &apos;range&apos;,
the read offset is defined by inlet&apos;src&apos; and the write offset by &apos;dst&apos;
&apos;speed&apos; sets the copying speed in terms of audio-rate (16 is really fast!)
if &apos;splat&apos; is enabled,tcopy will preserve the original contents of the destination table.
if &apos;clear&apos; is enabled,tcopy will clear the contents of the table.</sDescription>
      <author>Robert Schirmer</author>
      <license>BSD</license>
      <helpPatch>data.axh</helpPatch>
      <inlets>
         <bool32.rising name="trig" description="start copying"/>
         <bool32 name="splat"/>
         <bool32 name="clear"/>
         <int32 name="src" description="source start"/>
         <int32 name="dst" description="destination start"/>
         <int32 name="range" description="length of the area to copy"/>
      </inlets>
      <outlets>
         <bool32.pulse name="done" description="operation done."/>
      </outlets>
      <displays/>
      <params>
         <int32 name="src">
            <MinValue i="0"/>
            <MaxValue i="2097152"/>
         </int32>
         <int32 name="dst">
            <MinValue i="0"/>
            <MaxValue i="2097152"/>
         </int32>
         <int32 name="range">
            <MinValue i="0"/>
            <MaxValue i="2097152"/>
         </int32>
         <bool32.tgl name="splat" description="add to src contents"/>
         <bool32.tgl name="clear" description="clear dst"/>
      </params>
      <attribs>
         <objref name="src" description="name of the source -table"/>
         <objref name="dst" description="name of the destination - table"/>
         <spinner name="speed" MinValue="1" MaxValue="32" DefaultValue="1"/>
      </attribs>
      <code.declaration><![CDATA[uint32_t pos;
bool doit;
bool trig;
bool splat;
bool clear;

int speed;
uint32_t src;
uint32_t dst;
uint32_t range;
uint32_t blocksize;]]></code.declaration>
      <code.krate><![CDATA[outlet_done = 0;

if (inlet_trig && !trig){
	speed = attr_speed << 4;
	src = param_src + inlet_src;
	dst = param_dst + inlet_dst;
	range = param_range + inlet_range;
	blocksize  = range -(range %speed);
	splat = param_splat || inlet_splat;
	clear = !(param_clear || inlet_clear);
	trig = 1;
	pos = 0;
	doit = 1;	
	}
if (!inlet_trig && !doit) trig = 0;

//copy n chunks of size 'blocksize'
if (doit){
	if (pos < blocksize){ 
		{ 
		int ii;
 		for(ii=0;ii<speed;ii++){
 			int spos = pos +ii+src;
 			int dpos = pos +ii+dst;
			attr_dst.array[dpos]= (attr_src.array[spos] + (attr_dst.array[dpos] * splat)) * clear;
 			}
  	}
  	pos += speed;	
	}
//copy what's left
	else  {
		int ii;
		for (ii = pos;ii<range;ii++){
 			int spos = ii+src;
 			int dpos = ii+dst;
			attr_dst.array[dpos]= ( attr_src.array[spos] + (attr_dst.array[dpos] * splat)) * clear;
 			}
		doit = 0;
		outlet_done = 1;
	}
}]]></code.krate>
   </obj.normal>
</objdefs>