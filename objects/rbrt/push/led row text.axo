<objdefs appVersion="1.0.12">
   <obj.normal id="led row text" uuid="be3e95b9-63c2-4681-8a28-cd5ca6a6bdc8">
      <license>GPL</license>
      <inlets>
         <bool32.rising name="redraw"/>
         <int32 name="row"/>
         <charptr32 name="text0"/>
         <charptr32 name="text1"/>
         <charptr32 name="text2"/>
         <charptr32 name="text3"/>
         <charptr32 name="text4"/>
         <charptr32 name="text5"/>
         <charptr32 name="text6"/>
         <charptr32 name="text7"/>
         <bool32.risingfalling name="mute"/>
      </inlets>
      <outlets>
         <int32 name="test"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <objref name="LEDmaster"/>
         <spinner name="row" MinValue="0" MaxValue="3" DefaultValue="0"/>
      </attribs>
      <code.declaration><![CDATA[bool trig;
bool mtrig;
bool doit;
uint8_t prerow;
uint8_t row;]]></code.declaration>
      <code.krate><![CDATA[if (!inlet_mute){
		row = (inlet_row + attr_row) %4;
		uint16_t offset = row *77;
		if (inlet_redraw && !trig){trig = 1;doit = 1;}
			if (!inlet_redraw) trig = 0;
		if (row != prerow) {doit = 1;prerow = row;}			
		if ((doit && !attr_LEDmaster.ROW)&& !attr_LEDmaster.LOCKED){
			doit = 0;
			memset(&attr_LEDmaster.array[offset+8],32,68);
			memcpy(&attr_LEDmaster.array[offset+ 8],inlet_text0,strlen (inlet_text0));
			memcpy(&attr_LEDmaster.array[offset+17],inlet_text1,strlen (inlet_text1));
			memcpy(&attr_LEDmaster.array[offset+25],inlet_text2,strlen (inlet_text2));
			memcpy(&attr_LEDmaster.array[offset+34],inlet_text3,strlen (inlet_text3));
			memcpy(&attr_LEDmaster.array[offset+42],inlet_text4,strlen (inlet_text4));
			memcpy(&attr_LEDmaster.array[offset+51],inlet_text5,strlen (inlet_text5));
			memcpy(&attr_LEDmaster.array[offset+59],inlet_text6,strlen (inlet_text6));
			memcpy(&attr_LEDmaster.array[offset+68],inlet_text7,strlen (inlet_text7));
			attr_LEDmaster.ROW = row +1;
		}	
}
if (inlet_mute) mtrig = 0;
if (!inlet_redraw) trig = 0;]]></code.krate>
   </obj.normal>
</objdefs>