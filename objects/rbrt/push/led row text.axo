<objdefs appVersion="1.0.12">
   <obj.normal id="led row text" uuid="fd40ee73-ddc2-4b91-9edd-4d75ab3c4a9e">
      <license>GPL</license>
      <inlets>
         <bool32.rising name="redraw"/>
         <int32 name="row"/>
         <charptr32 name="text0"/>
         <charptr32 name="text1"/>
         <charptr32 name="text2"/>
         <charptr32 name="text3"/>
         <charptr32 name="text4"/>
         <charptr32 name="text5"/>
         <charptr32 name="text6"/>
         <charptr32 name="text7"/>
         <bool32.risingfalling name="mute"/>
      </inlets>
      <outlets>
         <int32 name="test"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <objref name="LED"/>
      </attribs>
      <code.declaration><![CDATA[bool trig;
bool mtrig;
bool doit;
uint8_t prerow;]]></code.declaration>
      <code.krate><![CDATA[if (!inlet_mute){
		if (inlet_redraw && !trig){trig = 1;doit = 1;}
		if (!inlet_mute && !mtrig){mtrig = 1;doit = 1;}	
		if (inlet_row != prerow) {doit = 1;prerow = inlet_row;}			
		if (doit) {
			doit = 0;
			attr_LED.DIRTY = 1;
			int i;
			for(i=0;i< 68;i++) attr_LED.array[i + (inlet_row * 68)] = 32;
				strcpy(&attr_LED.array[0 + (inlet_row * 68)],inlet_text0);
				strcpy(&attr_LED.array[9 + (inlet_row * 68)],inlet_text1);
				strcpy(&attr_LED.array[17+ (inlet_row * 68)],inlet_text2);
				strcpy(&attr_LED.array[26+ (inlet_row * 68)],inlet_text3);
				strcpy(&attr_LED.array[34+ (inlet_row * 68)],inlet_text4);
				strcpy(&attr_LED.array[43+ (inlet_row * 68)],inlet_text5);
				strcpy(&attr_LED.array[51+ (inlet_row * 68)],inlet_text6);
				strcpy(&attr_LED.array[60+ (inlet_row * 68)],inlet_text7);
			}	
}

if (inlet_mute) mtrig = 0;
if (!inlet_redraw) trig = 0;]]></code.krate>
   </obj.normal>
</objdefs>