<objdefs appVersion="1.0.11">
   <obj.normal id="step disp" uuid="b82a72df-ed07-401c-91b0-46590bbed2fb">
      <sDescription>display a step counter on a novation launchpad</sDescription>
      <author>Robert Schirmer</author>
      <license>BSD</license>
      <helpPatch>launchpad.axh</helpPatch>
      <rotatedParams>true</rotatedParams>
      <inlets>
         <int32 name="offset" description="offset in the table to read from"/>
         <int32 name="start" description="display start on the LP"/>
         <int32 name="coloron" description="color on"/>
         <int32 name="coloroff" description="color off"/>
         <int32 name="blocksize"/>
         <int32 name="color" description="step color modulation"/>
         <int32 name="step" description="current step"/>
         <bool32 name="active" description="active??"/>
         <bool32.rising name="redraw"/>
      </inlets>
      <outlets/>
      <displays/>
      <params>
         <bool32.tgl name="active" noLabel="true"/>
      </params>
      <attribs>
         <objref name="table" description="table to display"/>
         <combo name="device">
            <MenuEntries>
               <string>usb host port / LP</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
            </CEntries>
         </combo>
         <combo name="color">
            <MenuEntries>
               <string>off</string>
               <string>red W</string>
               <string>red M</string>
               <string>red S</string>
               <string>orange W</string>
               <string>orange S</string>
               <string>green W</string>
               <string>green M</string>
               <string>green S</string>
               <string>lime 1 W</string>
               <string>lime 1 S</string>
               <string>lime 2</string>
               <string>yellow W</string>
               <string>yellow M</string>
               <string>yellow S</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>18</string>
               <string>35</string>
               <string>16</string>
               <string>32</string>
               <string>48</string>
               <string>33</string>
               <string>50</string>
               <string>49</string>
               <string>17</string>
               <string>34</string>
               <string>51</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int ntrig;
int rtrig;
int prev;
int32_t map[64];
int32_t v;]]></code.declaration>
      <code.init><![CDATA[{ 
  int i;
  for(i=0;i<64;i++) 

  map[i] = (((i >> 3)<< 3) + i);

}]]></code.init>
      <code.krate><![CDATA[if (param_active || inlet_active) { 
	rtrig = 0;

if ((inlet_redraw > 0) && !ntrig){
	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[inlet_step + inlet_start],(attr_color + inlet_color));
	ntrig = 1;
}
	
if (!(inlet_redraw > 0 )) ntrig = 0;

if (inlet_step  != prev) {
  MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(inlet_step  + inlet_start)],(attr_color + inlet_color));
  
  v = attr_table.array[__USAT((inlet_offset + (prev << inlet_blocksize)),attr_table.LENGTHPOW)]<<attr_table.GAIN ;
  if (v) MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(prev  + inlet_start)],inlet_coloron);
     	else
     	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(prev + inlet_start)],inlet_coloroff);
prev = inlet_step;
}

}

else if (!rtrig){
v = attr_table.array[__USAT((inlet_offset + (inlet_step << inlet_blocksize)),attr_table.LENGTHPOW)]<<attr_table.GAIN ;
  if (v) MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(inlet_step  + inlet_start)],inlet_coloron);
     	else
     	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(inlet_step + inlet_start)],inlet_coloroff);
rtrig = 1;
}]]></code.krate>
   </obj.normal>
</objdefs>