<objdefs appVersion="1.0.11">
   <obj.normal id="slider 7" uuid="6cdf7a85-7b43-466e-9ef8-88df8c51ce1a">
      <sDescription>display and edit indexes of a table starting as horizontal sliders.
7 - step - version,the leftmost button sets the slider to 0.
&apos;offset&apos; = offset in the table to edit/display.
&apos;rows&apos; = how many elements to work on,starting from &apos;offset&apos;.
&apos;startrow&apos; = row on the launchpad to start displaying on.</sDescription>
      <author>robert schirmer</author>
      <license>BSD</license>
      <helpPatch>launchpad.axh</helpPatch>
      <rotatedParams>true</rotatedParams>
      <inlets>
         <int32.positive name="offset"/>
         <int32.positive name="rows"/>
         <int32.positive name="startrow"/>
         <int32.positive name="color"/>
         <bool32.risingfalling name="active"/>
         <bool32.rising name="redraw"/>
      </inlets>
      <outlets>
         <bool32.pulse name="trig" description="pulse if sliders are changed"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="offset">
            <MinValue i="0"/>
            <MaxValue i="10000000"/>
         </int32>
         <int32 name="rows">
            <MinValue i="1"/>
            <MaxValue i="8"/>
         </int32>
         <int32 name="startrow">
            <MinValue i="0"/>
            <MaxValue i="7"/>
         </int32>
         <bool32.tgl name="active"/>
      </params>
      <attribs>
         <objref name="table"/>
         <combo name="device">
            <MenuEntries>
               <string>usb host port / LP</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
            </CEntries>
         </combo>
         <combo name="color">
            <MenuEntries>
               <string>off</string>
               <string>red W</string>
               <string>red M</string>
               <string>red S</string>
               <string>orange W</string>
               <string>orange S</string>
               <string>green W</string>
               <string>green M</string>
               <string>green S</string>
               <string>lime 1 W</string>
               <string>lime 1 S</string>
               <string>lime 2</string>
               <string>yellow W</string>
               <string>yellow M</string>
               <string>yellow S</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>18</string>
               <string>35</string>
               <string>16</string>
               <string>32</string>
               <string>48</string>
               <string>33</string>
               <string>50</string>
               <string>49</string>
               <string>17</string>
               <string>34</string>
               <string>51</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int8_t _note1;
uint8_t _gate1;

int8_t pos;
int8_t prepos;

int32_t i;

int32_t v;
uint8_t vt;

int32_t prev [8];

uint32_t offset;
uint8_t onC;
uint8_t row;
uint8_t rows;
uint8_t prerow;

int32_t crow;

int ntrig;
int rtrig;
bool range;]]></code.declaration>
      <code.init><![CDATA[{ 
  int i;
  for(i=0;i<8;i++)  prev[i] = -666;
}]]></code.init>
      <code.krate><![CDATA[offset = (param_offset + inlet_offset);
row = (param_startrow + inlet_startrow);
onC = (attr_color + inlet_color);
rows = (inlet_rows + param_rows);


if (inlet_active || param_active) {
//redraw
	if ((inlet_redraw > 0) && !ntrig){
	ntrig = 1;
	{ 
      int i;
      for(i=0;i<rows;i++)  prev[i] = -666;
     }
}
if (!(inlet_redraw > 0 )) ntrig = 0;

{ if ((crow == rows) || (rows != prerow)) {crow = 0; prerow = rows;}

pos = (_note1 - ((row  +crow ) << 4));
if (((pos >= 0 ) && (pos <= 7)) && ((pos != prepos)|| _gate1)) {
	prepos = pos;
     attr_table.array[offset + crow]=__SSAT(((pos  << 21)* 9),28)>>attr_table.GAIN;
     range = 1;
	}

v = ((attr_table.array[__USAT((offset + crow),attr_table.LENGTHPOW)]<<attr_table.GAIN) >> 24);

//changed??
if ((v != prev [crow]) && (range) ) rtrig = 1;


if (v != prev [crow]) {i = 0; prev[crow] = v;}
	
if (i < 8){
vt = (v > (i - 1))?  (onC)  : 0;
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON  ,(((row +crow)<< 4 ) + i),vt);  
i += 1;
 }
else crow += 1;
 }
 outlet_trig = rtrig;
 rtrig = 0;
  }]]></code.krate>
      <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + attr_midichannel) && (data2)) {	
  
   _note1 = data1 ;
    _gate1 = 1;
  
} else if (((status == MIDI_NOTE_ON + attr_midichannel) && (!data2))||          (status == MIDI_NOTE_OFF + attr_midichannel)) {
  if (_note1 == (data1 )) {
    _gate1 = 0;
  }

} else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
   _gate1 = 0;
}]]></code.midihandler>
   </obj.normal>
</objdefs>