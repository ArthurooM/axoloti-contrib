<objdefs appVersion="1.0.12">
   <obj.normal id="keyb zone poly" uuid="59a541ab-344b-407b-8c52-8b4156642d4e">
      <sDescription>an approach to midi polyphony.a &apos;map&apos; of currently active notes is stored in a table with the same name as the object that can be referenced from &apos;outside&apos;.
currentNote,gate and velo correspond to the actual events,noteOn issues a pulse whenever a note-on occurs.
notecount puts out the number of notes curently on hold,hold is 1 if any keys are on hold.</sDescription>
      <author>Robert Schirmer</author>
      <license>BSD</license>
      <helpPatch>poly.axh</helpPatch>
      <inlets/>
      <outlets>
         <int32 name="currentNote" description="note number of active key"/>
         <bool32 name="currentGate" description="key pressed or released ?"/>
         <frac32.positive name="currentVelo" description="velocity of active key"/>
         <bool32.pulse name="noteOn" description="pulse on note-on"/>
         <int32 name="notecount" description="number of notes currently held down"/>
         <bool32 name="hold" description="any notes on hold?"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <spinner name="startNote" MinValue="0" MaxValue="127" DefaultValue="0"/>
         <spinner name="endNote" MinValue="0" MaxValue="127" DefaultValue="127"/>
      </attribs>
      <code.declaration><![CDATA[int8_t _note;
uint8_t _gate;
uint8_t _velo;
uint8_t _rvelo;
uint8_t _touch;
uint8_t count;
bool trig;

static const uint32_t LENGTHPOW = 7;
static const uint32_t LENGTH = 1<<7;
static const uint32_t LENGTHMASK = (1<<7)-1;
static const uint32_t BITS = 8;
static const uint32_t GAIN = 20;
int8_t array [LENGTH];]]></code.declaration>
      <code.init><![CDATA[_gate = 0;
_note = 0;
_touch = 0;]]></code.init>
      <code.krate><![CDATA[outlet_currentNote= _note;
outlet_currentGate= _gate<<27;
outlet_currentVelo= _velo<<20;

outlet_noteOn = trig;
trig = 0;

outlet_notecount  =count;
outlet_hold = bool (count) ;]]></code.krate>
      <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + attr_midichannel) && (data2)) {
  if ((data1 >= attr_startNote)&&(data1 <= attr_endNote))
  {
    _velo = data2;
    if ( !array [data1]) trig = 1;
    _note = data1;
    _gate = 1;
    count += 1;
    array [data1] = _velo;
  }
}
if (((status == MIDI_NOTE_ON + attr_midichannel) && (!data2))||(status == MIDI_NOTE_OFF + attr_midichannel)) 
{
 if ((data1 >= attr_startNote)&&(data1 <= attr_endNote))
{
	array [data1] = 0;
	count -= 1;
	_velo = data2;
	_note = data1;
   	_gate = 0;
}
 }

else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
   _gate = 0;
}]]></code.midihandler>
   </obj.normal>
</objdefs>