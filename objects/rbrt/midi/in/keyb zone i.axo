<objdefs appVersion="1.0.11">
   <obj.normal id="keyb zone i" uuid="507b5da7-595d-46ab-808e-6b038d7fe2d1">
      <sDescription>mod of &apos;keyb zone&apos; by Johannes Thaelmann.
Monophonic MIDI keyboard note input, gate, velocity and release velocity, only responding to a range of notes.
integer note-nr output.</sDescription>
      <author>Robert Schirmer</author>
      <license>BSD</license>
      <helpPatch></helpPatch>
      <inlets/>
      <outlets>
         <int32 name="note" description="note number"/>
         <bool32 name="gate" description="key pressed?"/>
         <frac32.positive name="velocity" description="note-on velocity"/>
         <frac32.positive name="releaseVelocity" description="note-off velocity"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <spinner name="startNote" MinValue="0" MaxValue="127" DefaultValue="0"/>
         <spinner name="endNote" MinValue="0" MaxValue="127" DefaultValue="127"/>
      </attribs>
      <code.declaration><![CDATA[int8_t _note;
uint8_t _gate;
uint8_t _velo;
uint8_t _rvelo;
uint8_t _touch;]]></code.declaration>
      <code.init><![CDATA[_gate = 0;
_note = 0;
_touch = 0;]]></code.init>
      <code.krate><![CDATA[outlet_note= _note;
outlet_gate= _gate<<27;
outlet_velocity= _velo<<20;
outlet_releaseVelocity= _rvelo<<20;]]></code.krate>
      <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + attr_midichannel) && (data2)) {
  if ((data1 >= attr_startNote)&&(data1 <= attr_endNote)) {
    _velo = data2;
    _note = data1;
    _gate = 1;
  }
} else if (((status == MIDI_NOTE_ON + attr_midichannel) && (!data2))||          (status == MIDI_NOTE_OFF + attr_midichannel)) {
  if (_note == data1) {
    _rvelo = data2;
    _gate = 0;
  }

} else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
   _gate = 0;
}]]></code.midihandler>
   </obj.normal>
</objdefs>