<objdefs appVersion="1.0.12">
   <obj.normal id="polyhandler" uuid="6c3d7191-306c-4393-a98a-1dfceedf89be">
      <sDescription>controls a polyphonic subpatch,and receives information about the current state of all voices inside that patch via &apos;polyhandler slave&apos;
unlike a &apos;normal&apos; polyphonic subpatch, starting a note that is already playing will re-trigger that note,instead of playing that note with another voice.
if &apos;kill&apos; is enabled,notes that are on release will be stopped.
&apos;polyhandler latch&apos; references a table with information about the &apos;playback mode&apos;.
playback mode 0 or 1 = &apos;normal&apos; , a note-on is sent when you press a key,a note-off on release.
playback mode 2 = &apos;latch&apos; , a note-on will toggle between &apos;play&apos; or &apos;stop&apos; (great for loops!!)

&apos;blocksize&apos; refers how big a block of parameters is for each voice,
&apos;index&apos; sets where inside that block the information about the &apos;playback mode&apos; is stored</sDescription>
      <author>Robert Schirmer</author>
      <license>BSD</license>
      <helpPatch>poly.axh</helpPatch>
      <inlets>
         <int32.positive name="note"/>
         <int32.positive name="velo"/>
         <int32.positive name="note2stop" description="note number to stop"/>
         <bool32.rising name="stop" description="stop it!"/>
      </inlets>
      <outlets>
         <int32 name="target" description="target (to polyphonic subpatch)"/>
         <int32 name="note"/>
         <int32 name="velo"/>
      </outlets>
      <displays/>
      <params>
         <bool32.tgl name="kill" description="kill notes on release" noLabel="true"/>
      </params>
      <attribs>
         <combo name="polyphony">
            <MenuEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int8_t _note;
uint8_t _velo;
uint8_t pren;
uint8_t prev;
bool trig;
bool trigoff;
bool stop;
uint8_t i;
bool doit;
uint8_t target;

static const uint8_t LENGTHPOW = attr_polyphony;
static const uint8_t LENGTH = attr_polyphony;
static const uint8_t BITS = 8;
static const uint8_t GAIN = 20;
uint8_t array [LENGTH << 1];]]></code.declaration>
      <code.init><![CDATA[pren = 0;
prev = 0;
_note = 0;
_velo = 0;
for ( i = 0;i < LENGTH;i ++) array [i] = 0;]]></code.init>
      <code.krate><![CDATA[trig = 0;
trigoff = 0;

if ((inlet_note != pren) || (inlet_velo != prev)){
	pren = inlet_note;
	prev = inlet_velo;
	_velo = inlet_velo;
	_note = inlet_note;
	if (_velo) trig = 1;	
		else trigoff = 1;
		doit = 0;			
}

if (trig) {
	//retrig
	for (i = 0;i < LENGTH;i ++){
		if (array [i + LENGTH] == (_note + 1))	{
			target = i;
			doit = 1;	
			}
		}	
	//trigger on
	if (!doit){
	for (i = 0;i < LENGTH;i ++){
			if (!array [i + LENGTH] ) {target = i; doit = 1;}
			}			
		}
	//kill
	if (!doit && param_kill){
	for (i = 0;i < LENGTH;i ++){
			if (!array [i] ) {target = i; doit = 1;}
			}			
		}
}
//trigger off
if (trigoff) {
	for (i = 0;i < LENGTH;i ++){
		if (array [i] == (_note + 1)){
			target = i;
			doit = 1;			
			}
		}
	}
	
if (inlet_stop && (!stop)){
	doit = 0;
	stop = 1;
	for (i = 0;i < LENGTH;i ++){
		if (array [i] == (inlet_note2stop + 1)) {
			target = i;
			_note = inlet_note2stop;
			_velo = 0;
			doit = 1;
		}
	}	
}
if (!inlet_stop) stop = 0;


if (doit) {
	outlet_note = _note;
	outlet_velo = _velo;
}
	outlet_target = target;]]></code.krate>
   </obj.normal>
</objdefs>