<objdefs appVersion="1.0.12">
   <obj.normal id="keyb zone poly" uuid="85af7415-fe69-4a3c-90cb-43dbdfca279e">
      <sDescription>useful for polyphonic midi.
noteOn issues a pulse whenever a note-on occurs,
note returns the note number, with &apos;noteshift&apos; added (or substracted)
same for note off.
hold is 1 if any keys are on hold.
gate is true when velocity &gt; 0</sDescription>
      <author>Robert Schirmer</author>
      <license>BSD</license>
      <helpPatch>poly.axh</helpPatch>
      <inlets/>
      <outlets>
         <int32.positive name="note" description="note number +/- &apos;noteshift&apos;"/>
         <int32.positive name="velo" description="velocity"/>
         <bool32 name="gate" description="status of current note"/>
         <bool32.pulse name="noteOn" description="pulse on note-on"/>
         <bool32.pulse name="noteOff" description="pulse on note-off"/>
         <bool32 name="hold" description="any notes on hold?"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <spinner name="startNote" MinValue="0" MaxValue="127" DefaultValue="0"/>
         <spinner name="endNote" MinValue="0" MaxValue="127" DefaultValue="127"/>
         <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         <spinner name="noteshift" MinValue="-127" MaxValue="127" DefaultValue="0"/>
      </attribs>
      <code.declaration><![CDATA[uint8_t _note;
uint8_t count;
uint8_t _velo;
uint8_t pren;
uint8_t prev;

uint8_t nstack [16] = { 0};
uint8_t vstack [16] = {0};
int8_t stacklength;

uint8_t thin;]]></code.declaration>
      <code.init><![CDATA[stacklength = 0;
_note = 0;
_velo = 0;]]></code.init>
      <code.krate><![CDATA[outlet_noteOn = 0;
outlet_noteOff = 0;
//thin seems to work without hanging notes at '6' which is 2 ms right
if (thin == 3) {
  thin = 0;
	if (stacklength) {
		_note = nstack [1];
		_velo = vstack [1];
			if (_velo) outlet_noteOn = 1;
			else outlet_noteOff = 1;
		int i;
		for (i = 0;i < stacklength;i ++){
			nstack [i] = nstack [i+1];
			vstack [i] = vstack [i+1];		
		}
	stacklength --;
	}
}
else thin ++;

	outlet_gate = bool (_velo);
	outlet_hold = bool (count);
	outlet_note = _note;
	outlet_velo = _velo;]]></code.krate>
      <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel -1)) && (data2)) {
  if ((data1 >= attr_startNote)&&(data1 <= attr_endNote))
  {
  	stacklength ++;
    	nstack [stacklength] = data1 + attr_noteshift;
     vstack [stacklength] = data2;
     count ++;   
  }
}
if (((status == MIDI_NOTE_ON +  (attr_channel -1)) && (!data2))||(status == MIDI_NOTE_OFF + (attr_channel -1))) 
{
 if ((data1 >= attr_startNote)&&(data1 <= attr_endNote))
{
	stacklength ++;
    nstack [stacklength] = data1 + attr_noteshift;
    vstack [stacklength] = 0;
	count --;
    
}
 }
else if ((status ==  (attr_channel -1) + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
  _velo = 0;count = 0;stacklength = 0;
}]]></code.midihandler>
   </obj.normal>
</objdefs>