<objdefs appVersion="1.0.12">
   <obj.normal id="table send cc" uuid="9efe8e3b-5a2d-412b-b31f-e72ae70abdc2">
      <sDescription>send data of a table as midi controler data.set the start of the range of the controlers to send with &apos;startcc&apos;,the length of the range with &apos;length&apos;.useful for controllers capable of bi-directional midi,like &apos;livid base&apos; or &apos;novation launchpad&apos;.</sDescription>
      <author>Robert Schirmer</author>
      <license>BSD</license>
      <helpPatch>step_seq.axh</helpPatch>
      <rotatedParams>true</rotatedParams>
      <inlets>
         <int32 name="offset" description="offset in the table"/>
         <int32 name="startcc"/>
         <bool32.rising name="redraw"/>
         <bool32 name="active"/>
      </inlets>
      <outlets/>
      <displays/>
      <params>
         <bool32.tgl name="active" description="enable ctrl feedback"/>
         <int32 name="offset">
            <MinValue i="0"/>
            <MaxValue i="1000000"/>
         </int32>
      </params>
      <attribs>
         <objref name="table"/>
         <combo name="device">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         <spinner name="startcc" MinValue="0" MaxValue="127" DefaultValue="0"/>
         <spinner name="length" MinValue="1" MaxValue="128" DefaultValue="1"/>
         <combo name="blocksize">
            <MenuEntries>
               <string>1</string>
               <string>4</string>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int i;
int32_t v [128];
int32_t prev [128];
int ntrig [128];

int rtrig;

int32_t offset;]]></code.declaration>
      <code.init><![CDATA[{ 
  int i;
  for(i=0;i<attr_length;i++) prev[i]= -666 ;}]]></code.init>
      <code.krate><![CDATA[offset = inlet_offset + param_offset;

if (inlet_active || param_active){
{ 
	i +=1;
  if (i == attr_length) i = 0; 
  v [i]= attr_table.array[__USAT(((i << attr_blocksize) +offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;

  if ((v [i] != prev [i]) && !ntrig [i]) {MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_channel-1),i +attr_startcc + inlet_startcc,(v[i]>>20));prev [i] = v [i];  ntrig[i]=1;}
if (v [i] == prev [i]) ntrig [i]=0;
 
}
}

//re-init

if ((inlet_redraw > 0) && !rtrig){
	rtrig = 1;
{ 
  int ii;
  for(ii=0;ii<attr_length;ii++) prev[ii]= -666 ;}
  }
if (!(inlet_redraw > 0 )) rtrig = 0;]]></code.krate>
   </obj.normal>
</objdefs>