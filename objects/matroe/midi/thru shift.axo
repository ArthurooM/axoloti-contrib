<objdefs appVersion="1.0.12">
   <obj.normal id="thru shift" uuid="258c364e-6f9d-43b1-a73f-1432d99db85e">
      <sDescription>midi thru with a shift inlet. 
When inlet shift is low it thru&apos;s the incoming midi on the selected channel. 
if inlet shift is high it thru&apos;s the selected channel to the shift channel, if you see what I mean</sDescription>
      <author>Mattilyn Mattroe</author>
      <license>you have to give me one token for the car park in the old Purley Sainsbury&apos;s each time you use this</license>
      <inlets>
         <bool32 name="shift"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <combo name="device" description="output device">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <spinner name="channel" description="default channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
         <spinner name="shiftchannel" description="shift channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
      </attribs>
      <code.declaration><![CDATA[int shiftchannel;]]></code.declaration>
      <code.krate><![CDATA[if (inlet_shift){
shiftchannel = (attr_shiftchannel-1);}
else if (!inlet_shift){
shiftchannel = (attr_channel-1);}]]></code.krate>
      <code.midihandler><![CDATA[if (status == MIDI_NOTE_ON + (attr_channel-1)) {
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + shiftchannel,data1,data2);
}
if (status == MIDI_NOTE_OFF + (attr_channel-1)) {
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + shiftchannel,data1,data2);
}
if (status == (attr_channel-1)+MIDI_CONTROL_CHANGE) {
MidiSend3((midi_device_t) attr_device, shiftchannel+MIDI_CONTROL_CHANGE,data1,data2);
}


if (status == MIDI_POLY_PRESSURE + (attr_channel-1)) {
MidiSend3((midi_device_t) attr_device, MIDI_POLY_PRESSURE + shiftchannel,data1,data2);
}
if (status == MIDI_PROGRAM_CHANGE + (attr_channel-1)) {
MidiSend3((midi_device_t) attr_device, MIDI_PROGRAM_CHANGE + shiftchannel,data1,data2);
}
if (status == MIDI_PITCH_BEND + (attr_channel-1)) {
MidiSend3((midi_device_t) attr_device, MIDI_PITCH_BEND + shiftchannel,data1,data2);
}
if (status == MIDI_CHANNEL_PRESSURE + (attr_channel-1)) {
MidiSend2((midi_device_t) attr_device, MIDI_CHANNEL_PRESSURE + shiftchannel,data1);
}]]></code.midihandler>
   </obj.normal>
</objdefs>