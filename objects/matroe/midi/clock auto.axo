<objdefs appVersion="1.0.12">
   <obj.normal id="clock auto" uuid="c11d6aad-f8b7-4f4c-bee4-93c1376de1f3">
      <sDescription>internal midi clock with auto switching. (A mod of the internal factory objects and one of the thru objects)
use a dial to set the bpm, trigger the run inlet to start the internal clock.

it sends midi out to the outputs if they are turned on.

if external midi clock is received the internal clock stops and switches to the external clock, and it thru&apos;s the external clock to the outputs. When the external clock stops you can trigger the run inlet to restart the internal clock</sDescription>
      <author>Mattilyn Mattroe</author>
      <license>Three chocolate bourbons per use of code, please</license>
      <helpPatch>midi clock auto help.axh</helpPatch>
      <inlets>
         <bool32.rising name="run" description="starts/stops internal clock"/>
         <bool32.rising name="rst" description="Reset"/>
         <frac32.positive name="bpm" description="speed and that, yeah bruv?"/>
      </inlets>
      <outlets>
         <bool32 name="active" description="Song is playing"/>
         <bool32 name="external"/>
         <bool32 name="internal"/>
      </outlets>
      <displays/>
      <params>
         <bool32.tgl name="onA"/>
         <bool32.tgl name="onB"/>
         <bool32.tgl name="onC"/>
         <bool32.tgl name="onD"/>
      </params>
      <attribs>
         <combo name="Aoutput">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <combo name="Boutput">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <combo name="Coutput">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <combo name="Doutput">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[bool internal;
int32_t _posfrac;
int32_t _pos24ppq;
bool rstp;
int external;
int rtrig;
int run;

int paramon;
int paramonB;
int paramonC;
int paramonD;]]></code.declaration>
      <code.init><![CDATA[internal = 0;
_posfrac = 0;
_pos24ppq = 0;
rstp = 0;
run=0;]]></code.init>
      <code.krate><![CDATA[paramon=param_onA;
paramonB=param_onB;
paramonC=param_onC;
paramonD=param_onD;





if (inlet_rst & !rstp){
   rstp = 1;
   _posfrac = 0;
   _pos24ppq = 0;
} else if (!inlet_rst){
   rstp = 0;
}





if (!external){
	if (inlet_run&&!rtrig){
	rtrig=1;
	run=!run;
	
	
		}
else if (!inlet_run){ rtrig=0;}
if (run && !internal) {
  internal = 1;
  if (_pos24ppq)     {PatchMidiInHandler(MIDI_DEVICE_INTERNAL, 0,MIDI_START,0,0);}
  else     {PatchMidiInHandler(MIDI_DEVICE_INTERNAL, 0,MIDI_CONTINUE,0,0);}
} else if (!run && internal){
  internal = 0;
  PatchMidiInHandler(MIDI_DEVICE_INTERNAL, 0,MIDI_STOP,0,0);
}if (internal) {
  _posfrac += inlet_bpm;
  if (_posfrac & 1<<31) {
    _posfrac &= (1<<31)-1;
    _pos24ppq++;
    PatchMidiInHandler(MIDI_DEVICE_INTERNAL, 0,MIDI_TIMING_CLOCK,0,0);
  }
}}

outlet_external=external;
outlet_internal=internal;
outlet_active=external||internal;]]></code.krate>
      <code.midihandler><![CDATA[if ((dev == MIDI_DEVICE_INTERNAL)&&(status == MIDI_START)){
    
        	external=0;
        }
        if ((dev != MIDI_DEVICE_INTERNAL)&&(status == MIDI_START)){
        	external=1;
        	internal=0;
        	run=0;
        	
        }
  
  if ((dev != MIDI_DEVICE_INTERNAL)&&(status == MIDI_STOP)) {external=0;}
  
  
  if ((status == MIDI_TIMING_CLOCK) ||
      			(status == MIDI_START) ||
    				(status == MIDI_CONTINUE) ||
      			(status == MIDI_STOP)) {
      				if (paramon){
    				MidiSend1((midi_device_t) attr_Aoutput,status);
      				}
      				if (paramonB){
    				MidiSend1((midi_device_t) attr_Boutput,status);
      				}
      				if (paramonC){
    				MidiSend1((midi_device_t) attr_Coutput,status);
      				}
      				if (paramonD){
    				MidiSend1((midi_device_t) attr_Doutput,status);
      				}

      				
  				}]]></code.midihandler>
   </obj.normal>
</objdefs>