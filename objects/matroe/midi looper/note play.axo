<objdefs appVersion="1.0.12">
   <obj.normal id="note play" uuid="c62e1fb0-8a13-4201-9af8-8497d9df7976">
      <sDescription>Plays midi notes. for use with the midi looper objects.</sDescription>
      <author>Mattilyn Mattroe</author>
      <license>you may never, ever use this. or else.       otherwise, do as you will</license>
      <helpPatch>midi looper help.axh</helpPatch>
      <inlets>
         <bool32 name="on"/>
         <int32 name="polyphony"/>
         <bool32 name="clear"/>
         <int32 name="offset" description="sets an offset for writing to the table"/>
         <int32 name="stepunQ"/>
         <int32 name="erasenote"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <objref name="table"/>
         <combo name="buffer">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <spinner name="bar" MinValue="1" MaxValue="10000" DefaultValue="0"/>
         <spinner name="voices" MinValue="1" MaxValue="16" DefaultValue="1"/>
         <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
      </attribs>
      <code.declaration><![CDATA[int on;
int outon;
int budd;
int ontrig;
int TlastnoteA;
int seqlengthUNQ;
int voiceoffset;
int offtrig;
int offsetunQ1;
int noteonA;
int noteoffA;
int noteA;
int holdvelA;
int TvelA;
int prevstepunQ;]]></code.declaration>
      <code.init><![CDATA[noteonA=0;
seqlengthUNQ=((attr_bar<<9)-((attr_bar<<9)>>2));



voiceoffset=(seqlengthUNQ+seqlengthUNQ+seqlengthUNQ);
budd=((seqlengthUNQ+seqlengthUNQ+seqlengthUNQ)*attr_voices);]]></code.init>
      <code.krate><![CDATA[on=inlet_on;
//send note off if stopped/cleared to stop hanging notes
if (((inlet_clear&&!offtrig))||((!on)&&(ontrig))){
	if (inlet_polyphony==0){
	MidiSend3((midi_device_t) attr_buffer, MIDI_CONTROL_CHANGE + (attr_channel-1),MIDI_C_ALL_NOTES_OFF,127);
	}
	ontrig=0;
	offtrig=1;
	}
	
else if (!inlet_clear){
	offtrig=0;
	}


//position on table
offsetunQ1=(inlet_offset + inlet_stepunQ)+((voiceoffset)*inlet_polyphony);

//note/noteon/noteoff data... noteonA is also velocity
if (inlet_erasenote>0){
	if ((attr_table.array[(offsetunQ1)])==inlet_erasenote){
	attr_table.array[(offsetunQ1)]=0;		
	}
}
noteA= attr_table.array[(offsetunQ1)];
noteonA=attr_table.array[(offsetunQ1+ seqlengthUNQ)];
noteoffA=attr_table.array[(offsetunQ1+ seqlengthUNQ + seqlengthUNQ)];


//playback
if (on){
	ontrig=1;
	if (inlet_stepunQ != prevstepunQ ){
		
			if (noteonA> 0 ) { 
			     holdvelA = noteonA;
			     TvelA = holdvelA;
			     MidiSend3((midi_device_t) attr_buffer, MIDI_NOTE_ON + (attr_channel-1),noteA,noteonA);  
				TlastnoteA = noteA;
				outon=1;
				}
		
			if (noteoffA>0) {
				MidiSend3((midi_device_t) attr_buffer, MIDI_NOTE_OFF + (attr_channel-1),noteA,TvelA); 
				outon=0;
				}
				
			prevstepunQ=inlet_stepunQ;
			}
	}]]></code.krate>
   </obj.normal>
</objdefs>