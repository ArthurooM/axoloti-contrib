<objdefs appVersion="1.0.12">
   <obj.normal id="bendCCtouch" uuid="ccc84d94-e792-4177-b1e6-33ed99c094d7">
      <sDescription>object that records pitch bend, after touch and midi CCs.
for use with the midi looper objects.
could be used standalone, inlet stepunQCC expects a clock running at 96ppq</sDescription>
      <author>Mattilyn Mattroe</author>
      <license>if you use the object to play a wedding in september you have to come round and fix the dodgy extractor fan in my bathroom. otherwise, do as you will</license>
      <helpPatch>midi looper help.axh</helpPatch>
      <inlets>
         <int32 name="stepunQCC"/>
         <bool32 name="rec"/>
         <bool32 name="play"/>
         <bool32 name="reset"/>
         <bool32 name="overdub"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <combo name="input">
            <MenuEntries>
               <string>omni</string>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>true</string>
               <string>dev == MIDI_DEVICE_DIN &amp;&amp; port == 1</string>
               <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 1</string>
               <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 2</string>
               <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 3</string>
               <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 4</string>
               <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 1</string>
               <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 2</string>
               <string>dev == MIDI_DEVICE_USB_DEVICE &amp;&amp; port == 1</string>
            </CEntries>
         </combo>
         <combo name="output">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
         <spinner name="bar" MinValue="1" MaxValue="500" DefaultValue="0"/>
         <objref name="table"/>
      </attribs>
      <code.declaration><![CDATA[int cc;
int ccv;
int bendA;
int bendB;
int touch;
int prevcc;
int prevccv;
int prevbendA;
int prevbendB;
int prevtouch;
int prevOcc;
int prevOccv;
int prevObendA;
int prevObendB;
int prevOtouch;
int Occ;
int Occv;
int ObendA;
int ObendB;
int Otouch;
int prevstep;
int voice;
int bendvoice;
int play;
int rec;


int resetrig;]]></code.declaration>
      <code.init><![CDATA[voice=((attr_bar<<9)-((attr_bar<<9)>>2));
bendvoice=(voice*5);]]></code.init>
      <code.krate><![CDATA[Occ=attr_table.array[inlet_stepunQCC];
Occv=attr_table.array[inlet_stepunQCC+voice];
ObendA=attr_table.array[inlet_stepunQCC+voice+voice];
ObendB=attr_table.array[inlet_stepunQCC+voice+voice+voice];
Otouch=attr_table.array[inlet_stepunQCC+voice+voice+voice+voice];


if (inlet_stepunQCC!=prevstep){
//play
	if (inlet_play){
		if (Occv>0){
			MidiSend3((midi_device_t) attr_output, MIDI_CONTROL_CHANGE + (attr_channel-1),(Occ-1),(Occv-1));
		}
		if ((ObendA>0)||(ObendB>0)){
			MidiSend3((midi_device_t) attr_output, MIDI_PITCH_BEND + (attr_channel-1),(ObendA-1),(ObendB-1));
			}
		if (Otouch>0){
			MidiSend2((midi_device_t) attr_output, MIDI_CHANNEL_PRESSURE + (attr_channel-1),(Otouch-1)); 
			}
		}

//record
	if (inlet_rec){
			attr_table.array[inlet_stepunQCC]= 0;
			attr_table.array[inlet_stepunQCC+voice]= 0;
			attr_table.array[inlet_stepunQCC+voice+voice]= 0;
			attr_table.array[inlet_stepunQCC+voice+voice+voice]= 0;
			attr_table.array[inlet_stepunQCC+voice+voice+voice+voice]= 0;
		}
//overdub
	if (inlet_rec || inlet_overdub){
		
			if (ccv>0){
				attr_table.array[inlet_stepunQCC]= cc;
				attr_table.array[inlet_stepunQCC+voice]= ccv;
				}
			if ((bendA>0)||(bendB>0)){
				attr_table.array[inlet_stepunQCC+voice+voice]= bendA;
				attr_table.array[inlet_stepunQCC+voice+voice+voice]= bendB;
				}
			
			if (touch>0){
				attr_table.array[inlet_stepunQCC+voice+voice+voice+voice]= touch;
				}
		}

	cc=0;
	ccv=0;
	bendA=0;
	bendB=0;
	touch=0;
	prevstep=inlet_stepunQCC;
	}


//reset bend & touch
	if (inlet_reset&&!resetrig){
		MidiSend3((midi_device_t) attr_output, MIDI_PITCH_BEND+ (attr_channel-1),0,64);
		MidiSend2((midi_device_t) attr_output, MIDI_CHANNEL_PRESSURE + (attr_channel-1),0); 
		resetrig=1;
		
		}

if (!inlet_reset){
	resetrig=0;
	}]]></code.krate>
      <code.midihandler><![CDATA[if(attr_input) {
       
if (status == MIDI_CONTROL_CHANGE+(attr_channel-1)){
	cc=data1+1;
	ccv=data2+1;

	
	}

if (status == MIDI_PITCH_BEND +(attr_channel-1)){
	bendA=data1+1;
	bendB=data2+1;

	
	}
if (status == MIDI_CHANNEL_PRESSURE+(attr_channel-1)){
	touch=data1+1;

	
	}
	
}]]></code.midihandler>
   </obj.normal>
</objdefs>