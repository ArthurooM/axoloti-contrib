<objdefs>
   <obj.normal id="demux smooth 8" uuid="cpwitz-demux-demox smooth 8">
      <sDescription>Smoothing Demultiplexer. Connects inlet i to outlet number s. Other outlets copy their corresponding default inlets. Output values are smoothed exponentially with adjustable rise and fall time.</sDescription>
      <author>Johannes Taelman (add. Peter Witzel)</author>
      <license>BSD</license>
      <inlets>
         <frac32 name="i" description="input"/>
         <frac32 name="d0" description="default 0"/>
         <frac32 name="d1" description="default 1"/>
         <frac32 name="d2" description="default 2"/>
         <frac32 name="d3" description="default 3"/>
         <frac32 name="d4" description="default 4"/>
         <frac32 name="d5" description="default 5"/>
         <frac32 name="d6" description="default 6"/>
         <frac32 name="d7" description="default 7"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <frac32 name="o0" description="output 0"/>
         <frac32 name="o1" description="output 1"/>
         <frac32 name="o2" description="output 2"/>
         <frac32 name="o3" description="output 3"/>
         <frac32 name="o4" description="output 4"/>
         <frac32 name="o5" description="output 5"/>
         <frac32 name="o6" description="output 6"/>
         <frac32 name="o7" description="output 7"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="risetime"/>
         <frac32.u.map name="falltime"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[
        static const int outputs = 8;
        int32_t val[outputs];
        int32_t tval[outputs];
]]></code.declaration>
      <code.init><![CDATA[   
        int i;
        for(i=0;i<outputs;i++) { val[i]=0; tval[i]=0; }
]]></code.init>
      <code.krate><![CDATA[
switch(inlet_s>0?inlet_s:0){
      case 0: 
         tval[0] = inlet_i;
         tval[1]  = inlet_d1;
         tval[2]  = inlet_d2;
         tval[3]  = inlet_d3;
         tval[4]  = inlet_d4;
         tval[5]  = inlet_d5;
         tval[6]  = inlet_d6;
         tval[7]  = inlet_d7;
         break;
      case 1: 
         tval[0]  = inlet_d0;
         tval[1]  = inlet_i;
         tval[2]  = inlet_d2;
         tval[3]  = inlet_d3;
         tval[4]  = inlet_d4;
         tval[5]  = inlet_d5;
         tval[6]  = inlet_d6;
         tval[7]  = inlet_d7;
         break;
      case 2: 
         tval[0]  = inlet_d0;
         tval[1]  = inlet_d1;
         tval[2]  = inlet_i;
         tval[3]  = inlet_d3;
         tval[4]  = inlet_d4;
         tval[5]  = inlet_d5;
         tval[6]  = inlet_d6;
         tval[7]  = inlet_d7;
         break;
      case 3: 
         tval[0]  = inlet_d0;
         tval[1]  = inlet_d1;
         tval[2]  = inlet_d2;
         tval[3]  = inlet_i;
         tval[4]  = inlet_d4;
         tval[5]  = inlet_d5;
         tval[6]  = inlet_d6;
         tval[7]  = inlet_d7;
         break;
      case 4: 
         tval[0]  = inlet_d0;
         tval[1]  = inlet_d1;
         tval[2]  = inlet_d2;
         tval[3]  = inlet_d3;
         tval[4]  = inlet_i;
         tval[5]  = inlet_d5;
         tval[6]  = inlet_d6;
         tval[7]  = inlet_d7;
         break;
      case 5: 
         tval[0]  = inlet_d0;
         tval[1]  = inlet_d1;
         tval[2]  = inlet_d2;
         tval[3]  = inlet_d3;
         tval[4]  = inlet_d4;
         tval[5]  = inlet_i;
         tval[6]  = inlet_d6;
         tval[7]  = inlet_d7;
         break;
      case 6: 
         tval[0]  = inlet_d0;
         tval[1]  = inlet_d1;
         tval[2]  = inlet_d2;
         tval[3]  = inlet_d3;
         tval[4]  = inlet_d4;
         tval[5]  = inlet_d5;
         tval[6]  = inlet_i;
         tval[7]  = inlet_d7;
         break;
      case 7: 
         tval[0]  = inlet_d0;
         tval[1]  = inlet_d1;
         tval[2]  = inlet_d2;
         tval[3]  = inlet_d3;
         tval[4]  = inlet_d4;
         tval[5]  = inlet_d5;
         tval[6]  = inlet_d6;
         tval[7]  = inlet_i;
         break;
      default:
         tval[0]  = inlet_d0;
         tval[1]  = inlet_d1;
         tval[2]  = inlet_d2;
         tval[3]  = inlet_d3;
         tval[4]  = inlet_d4;
         tval[5]  = inlet_d5;
         tval[6]  = inlet_d6;
         tval[7]  = inlet_d7;
}
int i;
for(i=0;i<outputs;i++) { 
   // val[i]=___SMMLA(val[i]-tval[i],(-1<<26)+(param_time>>1),val[i]);
   if (tval[i]>val[i]) val[i] = ___SMMLA(val[i]-tval[i], (-1<<26)+(param_risetime>>1),val[i]);
   else val[i] = ___SMMLA(val[i]-tval[i],(-1<<26)+(param_falltime>>1),val[i]);
}
outlet_o0 = val[0];
outlet_o1 = val[1];
outlet_o2 = val[2];
outlet_o3 = val[3];
outlet_o4 = val[4];
outlet_o5 = val[5];
outlet_o6 = val[6];
outlet_o7 = val[7];
]]></code.krate>
   </obj.normal>
</objdefs>