<objdefs appVersion="1.0.11">
   <obj.normal id="paraphonic" uuid="cpwitz-midi-paraphonic">
      <sDescription>4 note paraphonic midi input. DISCLAIMER: &quot;Paraphonic&quot; does not mean &quot;polyphonic&quot;. If you intend to build a real polyphonic patch, use the recommended &quot;polyphonic subpatch&quot; approach!

This object is designed to build a so-called &quot;paraphonic&quot; synthesizer voice.

The outlets note1-4 deliver the notes of up to four pressed keys. If only one key is pressed, all note outlets send the same note unisono. Up to three additionally pressed keys are distributed over the outlets. More keys than four are simply ignored.

The gate outlet is high as long as any key is pressed. The &quot;retrigger&quot; checkbox turns on retriggering of the gate outlet with every additional keystroke.

The velocity outlet delivers the velocity of the first hit key.

If you just want to make a &quot;duophonic&quot; voice (2 pitches) or &quot;triphonic&quot; (3 pitches) just connect only note1-2 or note1-3 and leave the remaining notes unconnected.

Set the receiving input midi channel with the MIDIchannel attribute. Channel 0 means &quot;listen on all channels&quot;.</sDescription>
      <author>Peter Witzel</author>
      <license>CC0</license>
      <inlets/>
      <outlets>
         <frac32.bipolar name="note1"/>
         <frac32.bipolar name="note2"/>
         <frac32.bipolar name="note3"/>
         <frac32.bipolar name="note4"/>
         <frac32.positive name="velocity"/>
         <bool32 name="gate"/>
         <int32 name="notecount"/>
      </outlets>
      <displays/>
      <params>
         <bool32.tgl name="retrigger" noLabel="true"/>
      </params>
      <attribs>
         <spinner name="MIDIchannel" MinValue="0" MaxValue="16" DefaultValue="0"/>
      </attribs>
      <code.declaration><![CDATA[#define MAX_VOX 4
int8_t pressed_note[MAX_VOX];
int32_t pitches[MAX_VOX];
int notecount=0;
int32_t velocity=0;
int retrigger = 0;
int doretrigger = 0;]]></code.declaration>
      <code.init><![CDATA[
for (int i=0;i<MAX_VOX;i++) {
	pressed_note[i] = 0;
	pitches[i] = 0;
}
]]></code.init>
      <code.krate><![CDATA[if (doretrigger) {
	doretrigger = 0;
	outlet_gate = 0;	
}
else {
	outlet_gate = notecount>0?1:0;
}
outlet_note1 = pitches[0];
outlet_note2 = pitches[1];
outlet_note3 = pitches[2];
outlet_note4 = pitches[3];
outlet_velocity = velocity;
outlet_notecount = notecount;
retrigger = param_retrigger;]]></code.krate>
      <code.midihandler><![CDATA[int channel = (status & 0xf) + 1;
int cmd = (status & 0x70) >> 4;

if ((channel!=attr_MIDIchannel && attr_MIDIchannel>0)) {
	return;	
}

// some midi devices send note on with velocity 0 instead of note off
if (cmd==1 && data2==0) {
	cmd = 0;
}

if (cmd==1 ) {
	// note on
	if (notecount<MAX_VOX) {
		if (notecount==0) {
			velocity = data2<<20;	
		}
		for (int i=0;i<MAX_VOX;i++) {
			if (pressed_note[i]==0) {
				pressed_note[i] = data1;
				notecount++;
				break;
			}
		}
	}
	else {
		pressed_note[MAX_VOX-1] = data1;
	}
	if (retrigger) {
		doretrigger = 1;	
	}
}
else if (cmd==0) {
	// note off
	for (int i=0;i<MAX_VOX;i++) {
		if (pressed_note[i]==data1) {
			pressed_note[i] = 0;
			notecount--;
			break;
		}
	}
}

if ((cmd==1 || cmd==0) && notecount>0) {
	// distribute pitches
	int notei = 0;
	for (int i=0;i<MAX_VOX;i++) {
		while(pressed_note[notei]==0) { notei=(notei+1)%MAX_VOX; }
		pitches[i] = (pressed_note[notei]-64)<<21;
		notei++;
	}	
}
if ((cmd == 3)&&(data1 == 123)) { // all notes off message
	for (int i=0;i<MAX_VOX;i++) {
		pressed_note[i] = 0;
	}
	notecount = 0;
}]]></code.midihandler>
   </obj.normal>
</objdefs>