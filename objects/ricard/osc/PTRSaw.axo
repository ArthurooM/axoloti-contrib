<objdefs appVersion="1.0.12">
   <obj.normal id="PTRSaw" uuid="110f80bd-22a3-46f8-9d6e-5d70deeaa877">
      <sDescription>Low CPU Anti Aliased Sawtooth using third order Polynomial Transition Region algoiritm.</sDescription>
      <author>Ricard Wanderlof</author>
      <license>LGPL</license>
      <helpPatch>PTRSaw.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch" description="pitch"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="saw" description="sawtooth wave"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" description="default pitch" noLabel="true"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[float p, dp, dp2, y, D;]]></code.declaration>
      <code.init><![CDATA[p = 0;]]></code.init>
      <code.krate><![CDATA[int32_t idp;
MTOFEXTENDED(param_pitch + inlet_pitch, idp);
dp = idp*(0.25f/(1<<30));
dp2 = dp + dp; // 2*dp]]></code.krate>
      <code.srate><![CDATA[p += dp; p -= (p > 1);
if (p < dp) { D = p/dp; y = (dp2 - D) * D + 1; } // D0
else if (p < dp2) { D = p/dp; y = (D + dp2 - 4) * D + 3; } // D1
else y = 2*p - 1; // trivial waveform for all but the first two points
y -= dp2; // frequency dependent DC offset needed for algorithm
outlet_saw = (int32_t) (y * (1 << 27));]]></code.srate>
   </obj.normal>
</objdefs>