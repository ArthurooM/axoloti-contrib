<patch-1.0 appVersion="1.0.12">
   <patcher type="patch/patcher" uuid="b91e4c2f-0928-4a7f-88b3-70bc9a7ad482" name="patcher_1" x="140" y="28">
      <params>
         <frac32.u.map name="*c_1" value="31.0"/>
         <frac32.s.map name="square_osc_cic3" value="-2.7755575615628914E-17"/>
         <frac32.s.map name="square_osc_cic3_" value="-12.0"/>
         <frac32.s.map name="square_osc_cic3__" value="0.0"/>
         <frac32.u.map name="mix_1:gain1" value="9.5"/>
         <frac32.u.map name="mix_1:gain2" value="8.5"/>
         <frac32.u.map name="mix_1:gain3" value="8.5"/>
         <frac32.s.map name="adsr_2:a" value="-19.0"/>
         <frac32.s.map name="adsr_2:d" value="4.0"/>
         <frac32.u.map name="adsr_2:s" value="38.0"/>
         <frac32.s.map name="adsr_2:r" value="-21.0"/>
         <frac32.s.map name="vcf4pole_1:pitch" value="19.0"/>
         <frac32.u.map name="vcf4pole_1:reso" value="0.0"/>
         <frac32.s.map name="adsr_1:a" value="-64.0"/>
         <frac32.s.map name="adsr_1:d" value="-3.0"/>
         <frac32.u.map name="adsr_1:s" value="51.5"/>
         <frac32.s.map name="adsr_1:r" value="-19.0"/>
         <frac32.u.map name="sat_1:drive" value="25.0"/>
         <int32.hradio name="sat_1:fat" value="1"/>
         <bool32.tgl name="sat_1:smooth" value="0"/>
      </params>
      <attribs>
         <combo attributeName="poly" selection="6"/>
      </attribs>
      <subpatch appVersion="1.0.12">
         <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_1" x="896" y="154">
            <params>
               <frac32.u.map name="amp" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_1" x="756" y="168">
            <params/>
            <attribs/>
         </obj>
         <obj type="midi/in/keyb" uuid="53b04874696932f38aceaa168bd5d9efb743716d" name="keyb_1" x="14" y="238">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="ae5ef3cf-ae38-4534-87b8-33bdc7680f0f" name="square_osc_cic3" x="154" y="238">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="36.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="ae5ef3cf-ae38-4534-87b8-33bdc7680f0f">
               <sDescription>square wave oscillator 
based on a three stage CIC filter</sDescription>
               <author>Johannes Taelman</author>
               <license>GPL</license>
               <inlets>
                  <frac32.bipolar name="pitch"/>
               </inlets>
               <outlets>
                  <frac32buffer name="out"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.s.map.pitch name="pitch"/>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[int phase=0;

const int16_t *p_cic_i32_int;

int accu[3];
int p1=0;
int p2=0;
int p3=0;
int p4=0;

__attribute__ ( ( always_inline ) ) void cic31_i32_lut(int i32, int *acc) {
/*
meaning of argument i32:
i32= 0:10000000000000000000000000000000
i32= 1:11000000000000000000000000000000
...
i32=29:11111111111111111111111111111100
i32=30:11111111111111111111111111111110
i32=31:11111111111111111111111111111111
i32=32:01111111111111111111111111111111
i32=33:00111111111111111111111111111111
...
i32=61:00000000000000000000000000000011
i32=62:00000000000000000000000000000001
i32=63:00000000000000000000000000000000
*/
  int i32x4=i32<<2;
  int16_t c1=p_cic_i32_int[i32x4];
  int16_t c2=p_cic_i32_int[i32x4+1];
  int16_t c3=p_cic_i32_int[i32x4+2];
  int a0 = c1 + acc[0];
  int a1 = c2 + acc[1] + 32*acc[0];
  int a2 = c3 + acc[2] + 32*acc[1] + 528*acc[0];
  accu[0]=a0;
  accu[1]=a1;
  accu[2]=a2;
}
]]></code.declaration>
               <code.init><![CDATA[// CIC magic table
// pre-integrated 32 subsamples
static const int16_t cic_i32_int[] = {
1, 1, 1, 0, 2, 3, 4, 0, 3, 6, 10, 0, 4, 10, 20, 0, 
5, 15, 35, 0, 6, 21, 56, 0, 7, 28, 84, 0, 8, 36, 120, 0, 
9, 45, 165, 0, 10, 55, 220, 0, 11, 66, 286, 0, 12, 78, 364, 0, 
13, 91, 455, 0, 14, 105, 560, 0, 15, 120, 680, 0, 16, 136, 816, 0, 
17, 153, 969, 0, 18, 171, 1140, 0, 19, 190, 1330, 0, 20, 210, 1540, 0, 
21, 231, 1771, 0, 22, 253, 2024, 0, 23, 276, 2300, 0, 24, 300, 2600, 0, 
25, 325, 2925, 0, 26, 351, 3276, 0, 27, 378, 3654, 0, 28, 406, 4060, 0, 
29, 435, 4495, 0, 30, 465, 4960, 0, 31, 496, 5456, 0, 32, 528, 5984, 0, 
31, 527, 5983, 0, 30, 525, 5980, 0, 29, 522, 5974, 0, 28, 518, 5964, 0, 
27, 513, 5949, 0, 26, 507, 5928, 0, 25, 500, 5900, 0, 24, 492, 5864, 0, 
23, 483, 5819, 0, 22, 473, 5764, 0, 21, 462, 5698, 0, 20, 450, 5620, 0, 
19, 437, 5529, 0, 18, 423, 5424, 0, 17, 408, 5304, 0, 16, 392, 5168, 0, 
15, 375, 5015, 0, 14, 357, 4844, 0, 13, 338, 4654, 0, 12, 318, 4444, 0, 
11, 297, 4213, 0, 10, 275, 3960, 0, 9, 252, 3684, 0, 8, 228, 3384, 0, 
7, 203, 3059, 0, 6, 177, 2708, 0, 5, 150, 2330, 0, 4, 122, 1924, 0, 
3, 93, 1489, 0, 2, 63, 1024, 0, 1, 32, 528, 0, 0, 0, 0, 0 };

p_cic_i32_int=&cic_i32_int[0];

accu[0]=0;
accu[1]=0;
accu[2]=0;
]]></code.init>
               <code.krate><![CDATA[int32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,freq);
freq=freq>>5;

int freq_x32=freq*32;
int freq_inv=0xFFFFFFFFu/(unsigned int)freq;
]]></code.krate>
               <code.srate><![CDATA[phase+=freq_x32;
if ((phase&0x80000000)!=0) {
	if ((phase-0x80000000)>freq_x32){
		cic31_i32_lut(31,&accu[0]);
	 } else {
//		int f32=(phase-0x80000000)/freq;
		int f32=___SMMUL(phase-0x80000000,freq_inv);
		cic31_i32_lut(f32,&accu[0]);
	 }
} else {
	if (phase>freq_x32){
		cic31_i32_lut(63,&accu[0]);
	} else {
//		int f32=phase/freq;
//		cic31_i32_lut(32+f32,&accu[0]);
		int f32=___SMMLA(phase,freq_inv,32);
		cic31_i32_lut(f32,&accu[0]);		
	}
}
int d = accu[2];
// differentiator stages
int d_1 = d-p1; 
int d_2 = d_1-p2;
int d_3 = d_2-p3;
p1 = d;
p2 = d_1;
p3 = d_2;
// add null at nyquist
outlet_out=(d_3+p4-(1<<15))<<11;
p4 = d_3;
]]></code.srate>
            </object>
         </patchobj>
         <patchobj type="patch/object" uuid="ae5ef3cf-ae38-4534-87b8-33bdc7680f0f" name="square_osc_cic3_" x="280" y="238">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="36.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="ae5ef3cf-ae38-4534-87b8-33bdc7680f0f">
               <sDescription>square wave oscillator 
based on a three stage CIC filter</sDescription>
               <author>Johannes Taelman</author>
               <license>GPL</license>
               <inlets>
                  <frac32.bipolar name="pitch"/>
               </inlets>
               <outlets>
                  <frac32buffer name="out"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.s.map.pitch name="pitch"/>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[int phase=0;

const int16_t *p_cic_i32_int;

int accu[3];
int p1=0;
int p2=0;
int p3=0;
int p4=0;

__attribute__ ( ( always_inline ) ) void cic31_i32_lut(int i32, int *acc) {
/*
meaning of argument i32:
i32= 0:10000000000000000000000000000000
i32= 1:11000000000000000000000000000000
...
i32=29:11111111111111111111111111111100
i32=30:11111111111111111111111111111110
i32=31:11111111111111111111111111111111
i32=32:01111111111111111111111111111111
i32=33:00111111111111111111111111111111
...
i32=61:00000000000000000000000000000011
i32=62:00000000000000000000000000000001
i32=63:00000000000000000000000000000000
*/
  int i32x4=i32<<2;
  int16_t c1=p_cic_i32_int[i32x4];
  int16_t c2=p_cic_i32_int[i32x4+1];
  int16_t c3=p_cic_i32_int[i32x4+2];
  int a0 = c1 + acc[0];
  int a1 = c2 + acc[1] + 32*acc[0];
  int a2 = c3 + acc[2] + 32*acc[1] + 528*acc[0];
  accu[0]=a0;
  accu[1]=a1;
  accu[2]=a2;
}
]]></code.declaration>
               <code.init><![CDATA[// CIC magic table
// pre-integrated 32 subsamples
static const int16_t cic_i32_int[] = {
1, 1, 1, 0, 2, 3, 4, 0, 3, 6, 10, 0, 4, 10, 20, 0, 
5, 15, 35, 0, 6, 21, 56, 0, 7, 28, 84, 0, 8, 36, 120, 0, 
9, 45, 165, 0, 10, 55, 220, 0, 11, 66, 286, 0, 12, 78, 364, 0, 
13, 91, 455, 0, 14, 105, 560, 0, 15, 120, 680, 0, 16, 136, 816, 0, 
17, 153, 969, 0, 18, 171, 1140, 0, 19, 190, 1330, 0, 20, 210, 1540, 0, 
21, 231, 1771, 0, 22, 253, 2024, 0, 23, 276, 2300, 0, 24, 300, 2600, 0, 
25, 325, 2925, 0, 26, 351, 3276, 0, 27, 378, 3654, 0, 28, 406, 4060, 0, 
29, 435, 4495, 0, 30, 465, 4960, 0, 31, 496, 5456, 0, 32, 528, 5984, 0, 
31, 527, 5983, 0, 30, 525, 5980, 0, 29, 522, 5974, 0, 28, 518, 5964, 0, 
27, 513, 5949, 0, 26, 507, 5928, 0, 25, 500, 5900, 0, 24, 492, 5864, 0, 
23, 483, 5819, 0, 22, 473, 5764, 0, 21, 462, 5698, 0, 20, 450, 5620, 0, 
19, 437, 5529, 0, 18, 423, 5424, 0, 17, 408, 5304, 0, 16, 392, 5168, 0, 
15, 375, 5015, 0, 14, 357, 4844, 0, 13, 338, 4654, 0, 12, 318, 4444, 0, 
11, 297, 4213, 0, 10, 275, 3960, 0, 9, 252, 3684, 0, 8, 228, 3384, 0, 
7, 203, 3059, 0, 6, 177, 2708, 0, 5, 150, 2330, 0, 4, 122, 1924, 0, 
3, 93, 1489, 0, 2, 63, 1024, 0, 1, 32, 528, 0, 0, 0, 0, 0 };

p_cic_i32_int=&cic_i32_int[0];

accu[0]=0;
accu[1]=0;
accu[2]=0;
]]></code.init>
               <code.krate><![CDATA[int32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,freq);
freq=freq>>5;

int freq_x32=freq*32;
int freq_inv=0xFFFFFFFFu/(unsigned int)freq;
]]></code.krate>
               <code.srate><![CDATA[phase+=freq_x32;
if ((phase&0x80000000)!=0) {
	if ((phase-0x80000000)>freq_x32){
		cic31_i32_lut(31,&accu[0]);
	 } else {
//		int f32=(phase-0x80000000)/freq;
		int f32=___SMMUL(phase-0x80000000,freq_inv);
		cic31_i32_lut(f32,&accu[0]);
	 }
} else {
	if (phase>freq_x32){
		cic31_i32_lut(63,&accu[0]);
	} else {
//		int f32=phase/freq;
//		cic31_i32_lut(32+f32,&accu[0]);
		int f32=___SMMLA(phase,freq_inv,32);
		cic31_i32_lut(f32,&accu[0]);		
	}
}
int d = accu[2];
// differentiator stages
int d_1 = d-p1; 
int d_2 = d_1-p2;
int d_3 = d_2-p3;
p1 = d;
p2 = d_1;
p3 = d_2;
// add null at nyquist
outlet_out=(d_3+p4-(1<<15))<<11;
p4 = d_3;
]]></code.srate>
            </object>
         </patchobj>
         <patchobj type="patch/object" uuid="ae5ef3cf-ae38-4534-87b8-33bdc7680f0f" name="square_osc_cic3__" x="406" y="238">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="36.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="ae5ef3cf-ae38-4534-87b8-33bdc7680f0f">
               <sDescription>square wave oscillator 
based on a three stage CIC filter</sDescription>
               <author>Johannes Taelman</author>
               <license>GPL</license>
               <inlets>
                  <frac32.bipolar name="pitch"/>
               </inlets>
               <outlets>
                  <frac32buffer name="out"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.s.map.pitch name="pitch"/>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[int phase=0;

const int16_t *p_cic_i32_int;

int accu[3];
int p1=0;
int p2=0;
int p3=0;
int p4=0;

__attribute__ ( ( always_inline ) ) void cic31_i32_lut(int i32, int *acc) {
/*
meaning of argument i32:
i32= 0:10000000000000000000000000000000
i32= 1:11000000000000000000000000000000
...
i32=29:11111111111111111111111111111100
i32=30:11111111111111111111111111111110
i32=31:11111111111111111111111111111111
i32=32:01111111111111111111111111111111
i32=33:00111111111111111111111111111111
...
i32=61:00000000000000000000000000000011
i32=62:00000000000000000000000000000001
i32=63:00000000000000000000000000000000
*/
  int i32x4=i32<<2;
  int16_t c1=p_cic_i32_int[i32x4];
  int16_t c2=p_cic_i32_int[i32x4+1];
  int16_t c3=p_cic_i32_int[i32x4+2];
  int a0 = c1 + acc[0];
  int a1 = c2 + acc[1] + 32*acc[0];
  int a2 = c3 + acc[2] + 32*acc[1] + 528*acc[0];
  accu[0]=a0;
  accu[1]=a1;
  accu[2]=a2;
}
]]></code.declaration>
               <code.init><![CDATA[// CIC magic table
// pre-integrated 32 subsamples
static const int16_t cic_i32_int[] = {
1, 1, 1, 0, 2, 3, 4, 0, 3, 6, 10, 0, 4, 10, 20, 0, 
5, 15, 35, 0, 6, 21, 56, 0, 7, 28, 84, 0, 8, 36, 120, 0, 
9, 45, 165, 0, 10, 55, 220, 0, 11, 66, 286, 0, 12, 78, 364, 0, 
13, 91, 455, 0, 14, 105, 560, 0, 15, 120, 680, 0, 16, 136, 816, 0, 
17, 153, 969, 0, 18, 171, 1140, 0, 19, 190, 1330, 0, 20, 210, 1540, 0, 
21, 231, 1771, 0, 22, 253, 2024, 0, 23, 276, 2300, 0, 24, 300, 2600, 0, 
25, 325, 2925, 0, 26, 351, 3276, 0, 27, 378, 3654, 0, 28, 406, 4060, 0, 
29, 435, 4495, 0, 30, 465, 4960, 0, 31, 496, 5456, 0, 32, 528, 5984, 0, 
31, 527, 5983, 0, 30, 525, 5980, 0, 29, 522, 5974, 0, 28, 518, 5964, 0, 
27, 513, 5949, 0, 26, 507, 5928, 0, 25, 500, 5900, 0, 24, 492, 5864, 0, 
23, 483, 5819, 0, 22, 473, 5764, 0, 21, 462, 5698, 0, 20, 450, 5620, 0, 
19, 437, 5529, 0, 18, 423, 5424, 0, 17, 408, 5304, 0, 16, 392, 5168, 0, 
15, 375, 5015, 0, 14, 357, 4844, 0, 13, 338, 4654, 0, 12, 318, 4444, 0, 
11, 297, 4213, 0, 10, 275, 3960, 0, 9, 252, 3684, 0, 8, 228, 3384, 0, 
7, 203, 3059, 0, 6, 177, 2708, 0, 5, 150, 2330, 0, 4, 122, 1924, 0, 
3, 93, 1489, 0, 2, 63, 1024, 0, 1, 32, 528, 0, 0, 0, 0, 0 };

p_cic_i32_int=&cic_i32_int[0];

accu[0]=0;
accu[1]=0;
accu[2]=0;
]]></code.init>
               <code.krate><![CDATA[int32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,freq);
freq=freq>>5;

int freq_x32=freq*32;
int freq_inv=0xFFFFFFFFu/(unsigned int)freq;
]]></code.krate>
               <code.srate><![CDATA[phase+=freq_x32;
if ((phase&0x80000000)!=0) {
	if ((phase-0x80000000)>freq_x32){
		cic31_i32_lut(31,&accu[0]);
	 } else {
//		int f32=(phase-0x80000000)/freq;
		int f32=___SMMUL(phase-0x80000000,freq_inv);
		cic31_i32_lut(f32,&accu[0]);
	 }
} else {
	if (phase>freq_x32){
		cic31_i32_lut(63,&accu[0]);
	} else {
//		int f32=phase/freq;
//		cic31_i32_lut(32+f32,&accu[0]);
		int f32=___SMMLA(phase,freq_inv,32);
		cic31_i32_lut(f32,&accu[0]);		
	}
}
int d = accu[2];
// differentiator stages
int d_1 = d-p1; 
int d_2 = d_1-p2;
int d_3 = d_2-p3;
p1 = d;
p2 = d_1;
p3 = d_2;
// add null at nyquist
outlet_out=(d_3+p4-(1<<15))<<11;
p4 = d_3;
]]></code.srate>
            </object>
         </patchobj>
         <obj type="mix/mix 3 g" uuid="efc0bdb8ca0ec2184330951eff5203ff487e35a9" name="mix_1" x="518" y="238">
            <params>
               <frac32.u.map name="gain1" onParent="true" value="32.0"/>
               <frac32.u.map name="gain2" onParent="true" value="32.0"/>
               <frac32.u.map name="gain3" onParent="true" value="32.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_2" x="630" y="238">
            <params>
               <frac32.s.map name="a" onParent="true" value="0.0"/>
               <frac32.s.map name="d" onParent="true" value="0.0"/>
               <frac32.u.map name="s" onParent="true" value="0.0"/>
               <frac32.s.map name="r" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="jt/filter/vcf4pole" uuid="f926d4ad-3053-4a66-be48-6db4447a260a" name="vcf4pole_1" x="742" y="238">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="0.0"/>
               <frac32.u.map name="reso" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_1" x="854" y="238">
            <params>
               <frac32.s.map name="a" onParent="true" value="0.0"/>
               <frac32.s.map name="d" onParent="true" value="0.0"/>
               <frac32.u.map name="s" onParent="true" value="0.0"/>
               <frac32.s.map name="r" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_1" x="952" y="238">
            <params/>
            <attribs/>
         </obj>
         <obj type="rbrt/fx/sat fat" uuid="aca76ea8-fc4f-484e-84ad-147861c06df3" name="sat_1" x="1036" y="238">
            <params>
               <frac32.u.map name="drive" onParent="true" value="0.0"/>
               <int32.hradio name="fat" onParent="true" value="0"/>
               <bool32.tgl name="smooth" onParent="true" value="0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1162" y="238">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="outlet_1" x="1316" y="238">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="mix_1" outlet="out"/>
               <dest obj="vcf4pole_1" inlet="in"/>
            </net>
            <net>
               <source obj="adsr_1" outlet="env"/>
               <dest obj="*_1" inlet="a"/>
            </net>
            <net>
               <source obj="keyb_1" outlet="gate2"/>
               <dest obj="adsr_1" inlet="gate"/>
               <dest obj="adsr_2" inlet="gate"/>
            </net>
            <net>
               <source obj="vca_1" outlet="o"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="*_1" outlet="result"/>
               <dest obj="vca_1" inlet="v"/>
            </net>
            <net>
               <source obj="keyb_1" outlet="velocity"/>
               <dest obj="*_1" inlet="b"/>
            </net>
            <net>
               <source obj="sat_1" outlet="out"/>
               <dest obj="vca_1" inlet="a"/>
            </net>
            <net>
               <source obj="vcf4pole_1" outlet="out"/>
               <dest obj="sat_1" inlet="in"/>
            </net>
            <net>
               <source obj="keyb_1" outlet="note"/>
               <dest obj="square_osc_cic3" inlet="pitch"/>
               <dest obj="square_osc_cic3_" inlet="pitch"/>
               <dest obj="square_osc_cic3__" inlet="pitch"/>
            </net>
            <net>
               <source obj="square_osc_cic3" outlet="out"/>
               <dest obj="mix_1" inlet="in1"/>
            </net>
            <net>
               <source obj="square_osc_cic3_" outlet="out"/>
               <dest obj="mix_1" inlet="in2"/>
            </net>
            <net>
               <source obj="square_osc_cic3__" outlet="out"/>
               <dest obj="mix_1" inlet="in3"/>
            </net>
            <net>
               <source obj="adsr_2" outlet="env"/>
               <dest obj="unipolar2bipolar_1" inlet="i"/>
            </net>
            <net>
               <source obj="unipolar2bipolar_1" outlet="o"/>
               <dest obj="*c_1" inlet="in"/>
            </net>
            <net>
               <source obj="*c_1" outlet="out"/>
               <dest obj="vcf4pole_1" inlet="pitch"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>polyphonic</subpatchmode>
            <MidiChannel>1</MidiChannel>
            <NPresets>8</NPresets>
            <NPresetEntries>32</NPresetEntries>
            <NModulationSources>8</NModulationSources>
            <NModulationTargetsPerSource>8</NModulationTargetsPerSource>
            <Author></Author>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>0</x>
            <y>0</y>
            <width>1603</width>
            <height>702</height>
         </windowPos>
      </subpatch>
   </patcher>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="294" y="28">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="patcher_1" outlet="outlet_1"/>
         <dest obj="out_1" inlet="right"/>
         <dest obj="out_1" inlet="left"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1936</width>
      <height>1056</height>
   </windowPos>
</patch-1.0>