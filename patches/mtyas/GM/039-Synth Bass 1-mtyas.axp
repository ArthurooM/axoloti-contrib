<patch-1.0 appVersion="1.0.11">
   <obj type="env/adsr m" uuid="98bd39fb828c392b28126d259cb5175e6f6ea34b" name="adsr_1" x="854" y="70">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="-22.0"/>
         <frac32.u.map name="s" value="28.5"/>
         <frac32.s.map name="r" value="-18.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d5d6a12c-480d-4893-88a1-cf0e843d71f9" name="unipolar2bipolar_1" x="980" y="98">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="d5d6a12c-480d-4893-88a1-cf0e843d71f9">
         <sDescription>unipolar to bipolar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   outlet_o= (inlet_i-(1<<26))<<1;
]]></code.krate>
      </object>
   </patchobj>
   <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_2" x="1176" y="168">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="21.0"/>
         <frac32.u.map name="s" value="23.0"/>
         <frac32.s.map name="r" value="-29.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc/pwm" uuid="a6b40ff63f161d8bac8ea2eba5b0dbffcf49b472" name="pwm_1" x="714" y="196">
      <params>
         <frac32.s.map name="pitch" value="-12.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/div 4" uuid="507955275561b256e540f7205386d31545a2828f" name="div_1" x="588" y="210">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_1" x="1050" y="210">
      <params>
         <frac32.u.map name="amp" value="48.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="midi/in/keyb" uuid="53b04874696932f38aceaa168bd5d9efb743716d" name="keyb_1" x="196" y="294">
      <params/>
      <attribs/>
   </obj>
   <obj type="osc/tri" uuid="905879afa8256b0ca207557d656949e476ca6f16" name="tri_1" x="714" y="308">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix/mix 6" uuid="a77539f90594da68ea7affa92e5c17caad5b3f04" name="mix_2" x="896" y="336">
      <params>
         <frac32.u.map name="gain1" value="50.5"/>
         <frac32.u.map name="gain2" value="48.5"/>
         <frac32.u.map name="gain3" value="48.0"/>
         <frac32.u.map name="gain4" value="51.5"/>
         <frac32.u.map name="gain5" value="45.0"/>
         <frac32.u.map name="gain6" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="dist/soft" uuid="e680d76a805e4866027cdf654c7efd8b2e54622" name="soft_1" x="1484" y="350">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="*c_3" x="1554" y="350">
      <params>
         <frac32.u.map name="amp" value="21.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="1694" y="378">
      <params/>
      <attribs/>
   </obj>
   <obj type="mix/mix 1" uuid="26fb1fe4ed25d8bc2ac4a3f91ab6b80ed6d9d4fa" name="mix_1" x="392" y="406">
      <params>
         <frac32.u.map name="gain1" value="2.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="ae5ef3cf-ae38-4534-87b8-33bdc7680f0f" name="square_osc_cic3" x="714" y="406">
      <params>
         <frac32.s.map name="pitch" value="-12.099999904632568"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="ae5ef3cf-ae38-4534-87b8-33bdc7680f0f">
         <sDescription>square wave oscillator 
based on a three stage CIC filter</sDescription>
         <author>Johannes Taelman</author>
         <license>GPL</license>
         <inlets>
            <frac32.bipolar name="pitch"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int phase=0;

const int16_t *p_cic_i32_int;

int accu[3];
int p1=0;
int p2=0;
int p3=0;
int p4=0;

__attribute__ ( ( always_inline ) ) void cic31_i32_lut(int i32, int *acc) {
/*
meaning of argument i32:
i32= 0:10000000000000000000000000000000
i32= 1:11000000000000000000000000000000
...
i32=29:11111111111111111111111111111100
i32=30:11111111111111111111111111111110
i32=31:11111111111111111111111111111111
i32=32:01111111111111111111111111111111
i32=33:00111111111111111111111111111111
...
i32=61:00000000000000000000000000000011
i32=62:00000000000000000000000000000001
i32=63:00000000000000000000000000000000
*/
  int i32x4=i32<<2;
  int16_t c1=p_cic_i32_int[i32x4];
  int16_t c2=p_cic_i32_int[i32x4+1];
  int16_t c3=p_cic_i32_int[i32x4+2];
  int a0 = c1 + acc[0];
  int a1 = c2 + acc[1] + 32*acc[0];
  int a2 = c3 + acc[2] + 32*acc[1] + 528*acc[0];
  accu[0]=a0;
  accu[1]=a1;
  accu[2]=a2;
}
]]></code.declaration>
         <code.init><![CDATA[// CIC magic table
// pre-integrated 32 subsamples
static const int16_t cic_i32_int[] = {
1, 1, 1, 0, 2, 3, 4, 0, 3, 6, 10, 0, 4, 10, 20, 0, 
5, 15, 35, 0, 6, 21, 56, 0, 7, 28, 84, 0, 8, 36, 120, 0, 
9, 45, 165, 0, 10, 55, 220, 0, 11, 66, 286, 0, 12, 78, 364, 0, 
13, 91, 455, 0, 14, 105, 560, 0, 15, 120, 680, 0, 16, 136, 816, 0, 
17, 153, 969, 0, 18, 171, 1140, 0, 19, 190, 1330, 0, 20, 210, 1540, 0, 
21, 231, 1771, 0, 22, 253, 2024, 0, 23, 276, 2300, 0, 24, 300, 2600, 0, 
25, 325, 2925, 0, 26, 351, 3276, 0, 27, 378, 3654, 0, 28, 406, 4060, 0, 
29, 435, 4495, 0, 30, 465, 4960, 0, 31, 496, 5456, 0, 32, 528, 5984, 0, 
31, 527, 5983, 0, 30, 525, 5980, 0, 29, 522, 5974, 0, 28, 518, 5964, 0, 
27, 513, 5949, 0, 26, 507, 5928, 0, 25, 500, 5900, 0, 24, 492, 5864, 0, 
23, 483, 5819, 0, 22, 473, 5764, 0, 21, 462, 5698, 0, 20, 450, 5620, 0, 
19, 437, 5529, 0, 18, 423, 5424, 0, 17, 408, 5304, 0, 16, 392, 5168, 0, 
15, 375, 5015, 0, 14, 357, 4844, 0, 13, 338, 4654, 0, 12, 318, 4444, 0, 
11, 297, 4213, 0, 10, 275, 3960, 0, 9, 252, 3684, 0, 8, 228, 3384, 0, 
7, 203, 3059, 0, 6, 177, 2708, 0, 5, 150, 2330, 0, 4, 122, 1924, 0, 
3, 93, 1489, 0, 2, 63, 1024, 0, 1, 32, 528, 0, 0, 0, 0, 0 };

p_cic_i32_int=&cic_i32_int[0];

accu[0]=0;
accu[1]=0;
accu[2]=0;
]]></code.init>
         <code.krate><![CDATA[int32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,freq);
freq=freq>>5;

int freq_x32=freq*32;
int freq_inv=0xFFFFFFFFu/(unsigned int)freq;
]]></code.krate>
         <code.srate><![CDATA[phase+=freq_x32;
if ((phase&0x80000000)!=0) {
	if ((phase-0x80000000)>freq_x32){
		cic31_i32_lut(31,&accu[0]);
	 } else {
//		int f32=(phase-0x80000000)/freq;
		int f32=___SMMUL(phase-0x80000000,freq_inv);
		cic31_i32_lut(f32,&accu[0]);
	 }
} else {
	if (phase>freq_x32){
		cic31_i32_lut(63,&accu[0]);
	} else {
//		int f32=phase/freq;
//		cic31_i32_lut(32+f32,&accu[0]);
		int f32=___SMMLA(phase,freq_inv,32);
		cic31_i32_lut(f32,&accu[0]);		
	}
}
int d = accu[2];
// differentiator stages
int d_1 = d-p1; 
int d_2 = d_1-p2;
int d_3 = d_2-p3;
p1 = d;
p2 = d_1;
p3 = d_2;
// add null at nyquist
outlet_out=(d_3+p4-(1<<15))<<11;
p4 = d_3;
]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="33853b16-4900-412e-bc57-db5a42502d87" name="vcf4pole2x_1" x="1078" y="406">
      <params>
         <frac32.s.map name="pitch" value="7.0"/>
         <frac32.u.map name="reso" value="4.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="33853b16-4900-412e-bc57-db5a42502d87">
         <sDescription>Four pole VCF
The cutoff frequency is limited to 9.4kHz. For higher cutoff frequencies, use the vcf4pole2x version.</sDescription>
         <author>Johannes Taelman</author>
         <license>GPL</license>
         <helpPatch>vcf4pole.axh</helpPatch>
         <inlets>
            <frac32buffer name="in"/>
            <frac32.bipolar name="pitch"/>
            <frac32.positive name="reso"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch"/>
            <frac32.u.map name="reso"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[/* based on https://github.com/ddiakopoulos/MoogLadders/blob/master/src/RKSimulationModel.h 
*
Copyright (c) 2015, Miller Puckette. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/

int32_t cutoff=0;
int32_t resonance=0;

int32_t clip(int32_t x) {
	return __SSAT(x,28);
}

int32_t state[4];

int32_t MultCutoff_A(int32_t x) {
	return ___SMMUL(x, cutoff);
}

void calculateDerivatives_A(int32_t input, int32_t * dstate, int32_t * sstate)
{
	int32_t satstate0 = clip(sstate[0]);
	int32_t satstate1 = clip(sstate[1]);
	int32_t satstate2 = clip(sstate[2]);
	int32_t satstate3 = clip(sstate[3]);
	
	dstate[0] = MultCutoff_A(clip(input - (___SMMUL(resonance,sstate[3])<<4)) - satstate0);
	dstate[1] = MultCutoff_A(satstate0 - satstate1);
	dstate[2] = MultCutoff_A(satstate1 - satstate2);
	dstate[3] = MultCutoff_A(satstate2 - satstate3);
}

void rungekutteSolver_A(int32_t input)
{
	int i;
	int32_t deriv1[4], deriv2[4], deriv3[4], deriv4[4], tempState[4];
	
	calculateDerivatives_A(input, deriv1, state);
	
	for (i = 0; i < 4; i++)
		tempState[i] = state[i] + (deriv1[i]);
	
	calculateDerivatives_A(input, deriv2, tempState);
	
	for (i = 0; i < 4; i++)
		tempState[i] = state[i] + (deriv2[i]);
	
	calculateDerivatives_A(input, deriv3, tempState);
	
	for (i = 0; i < 4; i++)
		tempState[i] = state[i] + (deriv3[i]<<1);
	
	calculateDerivatives_A(input, deriv4, tempState);
	
	for (i = 0; i < 4; i++)
		state[i] = ___SMMLA(deriv1[i]+deriv4[i] + ((deriv2[i] + deriv3[i])<<1),(int)(0xFFFFFFFFu/3u),state[i]);
}

int32_t MultCutoff_B(int32_t x) {
	return ___SMMLA(x, cutoff, x);
}

void calculateDerivatives_B(int32_t input, int32_t * dstate, int32_t * sstate)
{
	int32_t satstate0 = clip(sstate[0]);
	int32_t satstate1 = clip(sstate[1]);
	int32_t satstate2 = clip(sstate[2]);
	int32_t satstate3 = clip(sstate[3]);
	
	dstate[0] = MultCutoff_B(clip(input - (___SMMUL(resonance,sstate[3])<<4)) - satstate0);
	dstate[1] = MultCutoff_B(satstate0 - satstate1);
	dstate[2] = MultCutoff_B(satstate1 - satstate2);
	dstate[3] = MultCutoff_B(satstate2 - satstate3);
}

void rungekutteSolver_B(int32_t input)
{
	int i;
	int32_t deriv1[4], deriv2[4], deriv3[4], deriv4[4], tempState[4];
	
	calculateDerivatives_B(input, deriv1, state);
	
	for (i = 0; i < 4; i++)
		tempState[i] = state[i] + (deriv1[i]);
	
	calculateDerivatives_B(input, deriv2, tempState);
	
	for (i = 0; i < 4; i++)
		tempState[i] = state[i] + (deriv2[i]);
	
	calculateDerivatives_B(input, deriv3, tempState);
	
	for (i = 0; i < 4; i++)
		tempState[i] = state[i] + (deriv3[i]<<1);
	
	calculateDerivatives_B(input, deriv4, tempState);
	
	for (i = 0; i < 4; i++)
		state[i] = ___SMMLA(deriv1[i]+deriv4[i] + ((deriv2[i] + deriv3[i])<<1),(int)(0xFFFFFFFFu/3u),state[i]);
}]]></code.declaration>
         <code.krate><![CDATA[int pitch1=param_pitch + inlet_pitch - 0x01000000;
if (pitch1>0x08400000)
	pitch1=0x08400000;
int32_t freq;
MTOFEXTENDED(pitch1,freq);
cutoff = (freq<<1);
resonance = __USAT(param_reso+inlet_reso,28)<<3;
resonance += resonance>>6;

if (cutoff>0) {
	// case A	
	int i;
	for(int i=0;i<BUFSIZE;i++){
		rungekutteSolver_A(inlet_in[i]);
		rungekutteSolver_A(inlet_in[i]);
		outlet_out[i] = state[3];
	}
} else {
	// case B
	int i;
	for(int i=0;i<BUFSIZE;i++){
		rungekutteSolver_B(inlet_in[i]);
		rungekutteSolver_B(inlet_in[i]);
		outlet_out[i] = state[3];
	}	
}]]></code.krate>
      </object>
   </patchobj>
   <obj type="midi/in/bend" uuid="7bd8cace52a8c26ed61d80f65e238408d5d621f4" name="bend_1" x="196" y="462">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/gain" uuid="62b1c1a6337c7c8f6aec96408a432477b113cfa0" name="gain_1" x="1344" y="490">
      <params>
         <frac32.u.map name="amp" value="5.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="c5e74e37-0e1c-4dae-945e-06af1195b418" name="class_1" x="1456" y="490">
      <params>
         <frac32.u.map name="drive" value="6.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="c5e74e37-0e1c-4dae-945e-06af1195b418">
         <sDescription>&quot;Class A&quot; distortion. Class A refers to an amplifier topology, with asymetrical overdrive properties. This object adds variable DC offset, a subtle highpass filter can be useful before further processing.</sDescription>
         <author>Johannes Taelman</author>
         <license>GPL</license>
         <helpPatch>class a.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="input"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="drive" description="overdrivel level" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t prev=0;
int32_t prev2=0;
int32_t prev_in=0;]]></code.declaration>
         <code.krate><![CDATA[int i;

int32_t drive_complement = (1<<27)-param_drive;
int32_t drive_complement_square = ___SMMUL(drive_complement,drive_complement)<<2;
drive_complement = drive_complement>>1;
for(i=0;i<BUFSIZE;i++) {
	int32_t mul1 = ___SMMUL((inlet_in[i]+prev_in),prev+prev2);
     int32_t biased1 = __SSAT(___SMMLA(param_drive<<4,mul1 + 0x00800000 + drive_complement, drive_complement_square),26)<<5;
     prev2 = prev;
     prev = biased1;
     outlet_out[i] = mul1;
     prev_in = inlet_in[i];
}]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="*c_2" x="1568" y="490">
      <params>
         <frac32.u.map name="amp" value="47.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1274" y="504">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="ae5ef3cf-ae38-4534-87b8-33bdc7680f0f" name="square_osc_cic3_" x="714" y="532">
      <params>
         <frac32.s.map name="pitch" value="-24.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="ae5ef3cf-ae38-4534-87b8-33bdc7680f0f">
         <sDescription>square wave oscillator 
based on a three stage CIC filter</sDescription>
         <author>Johannes Taelman</author>
         <license>GPL</license>
         <inlets>
            <frac32.bipolar name="pitch"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int phase=0;

const int16_t *p_cic_i32_int;

int accu[3];
int p1=0;
int p2=0;
int p3=0;
int p4=0;

__attribute__ ( ( always_inline ) ) void cic31_i32_lut(int i32, int *acc) {
/*
meaning of argument i32:
i32= 0:10000000000000000000000000000000
i32= 1:11000000000000000000000000000000
...
i32=29:11111111111111111111111111111100
i32=30:11111111111111111111111111111110
i32=31:11111111111111111111111111111111
i32=32:01111111111111111111111111111111
i32=33:00111111111111111111111111111111
...
i32=61:00000000000000000000000000000011
i32=62:00000000000000000000000000000001
i32=63:00000000000000000000000000000000
*/
  int i32x4=i32<<2;
  int16_t c1=p_cic_i32_int[i32x4];
  int16_t c2=p_cic_i32_int[i32x4+1];
  int16_t c3=p_cic_i32_int[i32x4+2];
  int a0 = c1 + acc[0];
  int a1 = c2 + acc[1] + 32*acc[0];
  int a2 = c3 + acc[2] + 32*acc[1] + 528*acc[0];
  accu[0]=a0;
  accu[1]=a1;
  accu[2]=a2;
}
]]></code.declaration>
         <code.init><![CDATA[// CIC magic table
// pre-integrated 32 subsamples
static const int16_t cic_i32_int[] = {
1, 1, 1, 0, 2, 3, 4, 0, 3, 6, 10, 0, 4, 10, 20, 0, 
5, 15, 35, 0, 6, 21, 56, 0, 7, 28, 84, 0, 8, 36, 120, 0, 
9, 45, 165, 0, 10, 55, 220, 0, 11, 66, 286, 0, 12, 78, 364, 0, 
13, 91, 455, 0, 14, 105, 560, 0, 15, 120, 680, 0, 16, 136, 816, 0, 
17, 153, 969, 0, 18, 171, 1140, 0, 19, 190, 1330, 0, 20, 210, 1540, 0, 
21, 231, 1771, 0, 22, 253, 2024, 0, 23, 276, 2300, 0, 24, 300, 2600, 0, 
25, 325, 2925, 0, 26, 351, 3276, 0, 27, 378, 3654, 0, 28, 406, 4060, 0, 
29, 435, 4495, 0, 30, 465, 4960, 0, 31, 496, 5456, 0, 32, 528, 5984, 0, 
31, 527, 5983, 0, 30, 525, 5980, 0, 29, 522, 5974, 0, 28, 518, 5964, 0, 
27, 513, 5949, 0, 26, 507, 5928, 0, 25, 500, 5900, 0, 24, 492, 5864, 0, 
23, 483, 5819, 0, 22, 473, 5764, 0, 21, 462, 5698, 0, 20, 450, 5620, 0, 
19, 437, 5529, 0, 18, 423, 5424, 0, 17, 408, 5304, 0, 16, 392, 5168, 0, 
15, 375, 5015, 0, 14, 357, 4844, 0, 13, 338, 4654, 0, 12, 318, 4444, 0, 
11, 297, 4213, 0, 10, 275, 3960, 0, 9, 252, 3684, 0, 8, 228, 3384, 0, 
7, 203, 3059, 0, 6, 177, 2708, 0, 5, 150, 2330, 0, 4, 122, 1924, 0, 
3, 93, 1489, 0, 2, 63, 1024, 0, 1, 32, 528, 0, 0, 0, 0, 0 };

p_cic_i32_int=&cic_i32_int[0];

accu[0]=0;
accu[1]=0;
accu[2]=0;
]]></code.init>
         <code.krate><![CDATA[int32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,freq);
freq=freq>>5;

int freq_x32=freq*32;
int freq_inv=0xFFFFFFFFu/(unsigned int)freq;
]]></code.krate>
         <code.srate><![CDATA[phase+=freq_x32;
if ((phase&0x80000000)!=0) {
	if ((phase-0x80000000)>freq_x32){
		cic31_i32_lut(31,&accu[0]);
	 } else {
//		int f32=(phase-0x80000000)/freq;
		int f32=___SMMUL(phase-0x80000000,freq_inv);
		cic31_i32_lut(f32,&accu[0]);
	 }
} else {
	if (phase>freq_x32){
		cic31_i32_lut(63,&accu[0]);
	} else {
//		int f32=phase/freq;
//		cic31_i32_lut(32+f32,&accu[0]);
		int f32=___SMMLA(phase,freq_inv,32);
		cic31_i32_lut(f32,&accu[0]);		
	}
}
int d = accu[2];
// differentiator stages
int d_1 = d-p1; 
int d_2 = d_1-p2;
int d_3 = d_2-p3;
p1 = d;
p2 = d_1;
p3 = d_2;
// add null at nyquist
outlet_out=(d_3+p4-(1<<15))<<11;
p4 = d_3;
]]></code.srate>
      </object>
   </patchobj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_1" x="1274" y="560">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_4" x="462" y="588">
      <params>
         <frac32.u.map name="amp" value="54.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_1" x="308" y="616">
      <params>
         <frac32.s.map name="pitch" value="-43.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="ae5ef3cf-ae38-4534-87b8-33bdc7680f0f" name="pdm_square_osc" x="714" y="658">
      <params>
         <frac32.s.map name="pitch" value="-23.899999618530273"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="ae5ef3cf-ae38-4534-87b8-33bdc7680f0f">
         <sDescription>pdm square wave oscillator</sDescription>
         <inlets>
            <frac32.bipolar name="pitch"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int phase=0;]]></code.declaration>
         <code.krate><![CDATA[int32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,freq);
freq=freq>>5;]]></code.krate>
         <code.srate><![CDATA[//int f;


phase+=freq*32;
//    p+=random(-pnoise, pnoise);
if ((phase&0x80000000)!=0) {
 int f32=(phase-0x80000000)/(freq);
 if (f32>31) {
   outlet_out=0xFFFFFFFF;
 } else {
   outlet_out=~(0xFFFFFFFFu>>f32);
 }
} else {
 int f32=phase/freq;
 if (f32>31) {
   outlet_out=0x00000000;
 } else {
//   outlet_out=~((-1)<<(31-f32));
   outlet_out=(0xFFFFFFFFu>>f32);
 }
}
]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="2ce1e11f-8cda-43f0-af4d-04193b134485" name="pdm_converter" x="812" y="658">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="2ce1e11f-8cda-43f0-af4d-04193b134485">
         <sDescription>Converts pulse density modulation (PDM) signal to regular pulse code modulation (PCM) signal. The PDM signal has a 32 times higher sample frequency than the audio sampling frequency, and only one bit per sample. This allows 

Using CIC filter.
CIC filter spec:
- decimation ratio: 32
- 3 integrator/differentiator stages
- M=1
Additional [1+z^-1] filter added to attenuate near Nyquist.</sDescription>
         <author>Johannes Taelman</author>
         <license>GPL</license>
         <inlets>
            <frac32buffer name="pdm"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int cic_b8_int1[256];
int cic_b8_int2[256];
int cic_b8_int3[256];

void build_cictable_b8(void) {
  int i,j;
  for (i=0; i<256; i++) {
    int a0=0;
    int a1=0;
    int a2=0;
    for (j=0; j<8; j++) {
      if ((i&(1<<j))>0) {
        a0+=1;
      } else {
        a0+=-1;
      }
      a1+=a0;
      a2+=a1;
    }
    cic_b8_int1[i]=a0;
    cic_b8_int2[i]=a1;
    cic_b8_int3[i]=a2;
  }
}

void cic31_b8(uint8_t b8, int *acc) {
  int a0 = cic_b8_int1[b8] + acc[0];
  int a1 = cic_b8_int2[b8] + acc[1] + 8*acc[0];
  int a2 = cic_b8_int3[b8] + acc[2] + 8*acc[1] + 36*acc[0];  
  acc[0]=a0;
  acc[1]=a1;
  acc[2]=a2;
}

void cic31_b32(uint32_t b32, int *acc) {
  cic31_b8(b32, acc);
  cic31_b8(b32>>8, acc);
  cic31_b8(b32>>16, acc);
  cic31_b8(b32>>24, acc);
}

int accu[3];
int p1=0;
int p2=0;
int p3=0;  
int p4=0;  
]]></code.declaration>
         <code.init><![CDATA[build_cictable_b8();
accu[0]=0;
accu[1]=0;
accu[2]=0;
]]></code.init>
         <code.srate><![CDATA[cic31_b32(inlet_pdm, &accu[0]);
int d = accu[2];
int d_1 = d-p1; 
int d_2 = d_1-p2;
int d_3 = d_2-p3;
p1 = d;
p2 = d_1;
p3 = d_2;
// add null at nyquist
outlet_out=(d_3+p4)<<10;
p4 = d_3;
]]></code.srate>
      </object>
   </patchobj>
   <nets>
      <net>
         <source obj="keyb_1" outlet="note"/>
         <dest obj="mix_1" inlet="bus_in"/>
      </net>
      <net>
         <source obj="bend_1" outlet="bend"/>
         <dest obj="mix_1" inlet="in1"/>
      </net>
      <net>
         <source obj="tri_1" outlet="wave"/>
         <dest obj="mix_2" inlet="in1"/>
      </net>
      <net>
         <source obj="square_osc_cic3" outlet="out"/>
         <dest obj="mix_2" inlet="in2"/>
      </net>
      <net>
         <source obj="square_osc_cic3_" outlet="out"/>
         <dest obj="mix_2" inlet="in3"/>
      </net>
      <net>
         <source obj="adsr_2" outlet="env"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="velocity"/>
         <dest obj="*_1" inlet="b"/>
         <dest obj="div_1" inlet="in"/>
      </net>
      <net>
         <source obj="vcf4pole2x_1" outlet="out"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="mix_2" outlet="out"/>
         <dest obj="vcf4pole2x_1" inlet="in"/>
      </net>
      <net>
         <source obj="adsr_1" outlet="env"/>
         <dest obj="unipolar2bipolar_1" inlet="i"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_1" outlet="o"/>
         <dest obj="*c_1" inlet="in"/>
      </net>
      <net>
         <source obj="*c_1" outlet="out"/>
         <dest obj="vcf4pole2x_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="gate2"/>
         <dest obj="adsr_1" inlet="gate"/>
      </net>
      <net>
         <source obj="mix_1" outlet="out"/>
         <dest obj="square_osc_cic3_" inlet="pitch"/>
         <dest obj="square_osc_cic3" inlet="pitch"/>
         <dest obj="tri_1" inlet="pitch"/>
         <dest obj="pdm_square_osc" inlet="pitch"/>
         <dest obj="pwm_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="pdm_square_osc" outlet="out"/>
         <dest obj="pdm_converter" inlet="pdm"/>
      </net>
      <net>
         <source obj="pdm_converter" outlet="out"/>
         <dest obj="mix_2" inlet="in4"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="gain_1" inlet="in"/>
         <dest obj="soft_1" inlet="in"/>
      </net>
      <net>
         <source obj="gain_1" outlet="out"/>
         <dest obj="class_1" inlet="in"/>
      </net>
      <net>
         <source obj="class_1" outlet="out"/>
         <dest obj="*c_2" inlet="in"/>
      </net>
      <net>
         <source obj="*c_2" outlet="out"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="soft_1" outlet="out"/>
         <dest obj="*c_3" inlet="in"/>
      </net>
      <net>
         <source obj="*c_3" outlet="out"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="div_1" outlet="out"/>
         <dest obj="adsr_1" inlet="d"/>
      </net>
      <net>
         <source obj="pwm_1" outlet="wave"/>
         <dest obj="mix_2" inlet="in5"/>
      </net>
      <net>
         <source obj="sine_1" outlet="wave"/>
         <dest obj="*c_4" inlet="in"/>
      </net>
      <net>
         <source obj="*c_4" outlet="out"/>
         <dest obj="pwm_1" inlet="pw"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="gate"/>
         <dest obj="adsr_2" inlet="gate"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>19</x>
      <y>80</y>
      <width>1840</width>
      <height>960</height>
   </windowPos>
</patch-1.0>