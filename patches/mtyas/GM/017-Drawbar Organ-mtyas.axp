<patch-1.0 appVersion="1.0.11">
   <patchobj type="patch/object" uuid="266d4924-81f7-4344-978f-ac12aa9b0483" name="hammond_1" x="154" y="42">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="266d4924-81f7-4344-978f-ac12aa9b0483">
         <sDescription>Tuning table for tonewheels using hammond organ ratios.
This does NOT follow the tuning deviation of the upper 7 tonewheels of the B3 as documented at http://www.goodeveca.net/RotorOrgan/ToneWheelSpec.html/</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>tuning.axh</helpPatch>
         <inlets>
            <frac32 name="detune" description="in semitones"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = 4;
static const uint32_t LENGTH = 1<<LENGTHPOW;
static const uint32_t LENGTHMASK = (1<<LENGTHPOW)-1;
static const uint32_t BITS = 32;
static const uint32_t GAIN = 0;
int32_t array[LENGTH];]]></code.declaration>
         <code.init><![CDATA[int i;
for(i=0;i<LENGTH;i++) {
	array[i]=0;
}]]></code.init>
         <code.krate><![CDATA[int32_t f0 = mtof48k_ext_q31(inlet_detune + (24<<21));

// hammond gear ratios
const float ref_E = 0.5f*67.f/69.f;
static const int32_t intervals[] = {
	(int32_t)((1ll<<31)*85.f*ref_E/104.f), 
	(int32_t)((1ll<<31)*71.f*ref_E/82.f), 
	(int32_t)((1ll<<31)*67.f*ref_E/73.f), 
	(int32_t)((1ll<<31)*70.f*ref_E/72.f), 
	(int32_t)((1ll<<31)*69.f*ref_E/67.f), 
	(int32_t)((2ll<<31)*54.f*ref_E/99.f), 
	(int32_t)((2ll<<31)*37.f*ref_E/64.f), 
	(int32_t)((2ll<<31)*49.f*ref_E/80.f), 
	(int32_t)((2ll<<31)*48.f*ref_E/74.f), 
	(int32_t)((2ll<<31)*66.f*ref_E/96.f), 
	(int32_t)((2ll<<31)*67.f*ref_E/92.f), 
	(int32_t)((2ll<<31)*54.f*ref_E/70.f), 
};

int i;
for(i=0;i<12;i++){
	array[i] = ___SMMUL(f0,intervals[i]);
}]]></code.krate>
      </object>
   </patchobj>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_1" x="294" y="42">
      <params>
         <frac32.s.map name="pitch" value="3.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_1" x="406" y="42">
      <params>
         <frac32.u.map name="amp" value="11.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/div 128" uuid="7e534ce0f62b1fddbad78a797d8c10c8d1a0b812" name="div_1" x="672" y="56">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="952" y="126">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="e1640f46-ef68-489c-8916-5e4b99f68b70" name="switched_1" x="154" y="140">
      <params>
         <frac32.u.map name="velosense" value="0.0"/>
         <frac32.u.map name="f1" value="54.0"/>
         <frac32.u.map name="f2" value="23.5"/>
         <frac32.u.map name="f3" value="36.5"/>
         <frac32.u.map name="f4" value="23.0"/>
         <frac32.u.map name="f5" value="19.0"/>
         <frac32.u.map name="f6" value="20.0"/>
         <frac32.u.map name="f7" value="22.5"/>
         <frac32.u.map name="f8" value="19.0"/>
         <frac32.u.map name="f9" value="17.5"/>
      </params>
      <attribs>
         <spinner attributeName="startNote" value="0"/>
         <spinner attributeName="endNote" value="127"/>
      </attribs>
      <object id="patch/object" uuid="e1640f46-ef68-489c-8916-5e4b99f68b70">
         <sDescription>Switching drawbars at hammond intervals.
Note that the key switches do not open/close at exactly the same moment, but are spread over maximum 2.666 milliseconds.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>drawbars.axh</helpPatch>
         <inlets/>
         <outlets/>
         <displays/>
         <params>
            <frac32.u.map name="velosense" description="0: no velocity, 64: full velocity dependent"/>
            <frac32.u.map name="f1" description="16&apos;, suboctave, -12ST"/>
            <frac32.u.map name="f2" description="5 1/3&apos;, 5th, +7ST"/>
            <frac32.u.map name="f3" description="8&apos;, unison, principal">
               <DefaultValue v="64.0"/>
            </frac32.u.map>
            <frac32.u.map name="f4" description="4&apos;, 8th, octave, +12ST"/>
            <frac32.u.map name="f5" description="2 2/3&apos;,12th, nazard, +19ST"/>
            <frac32.u.map name="f6" description="2&apos;, 15th, blockflote, +24ST"/>
            <frac32.u.map name="f7" description="1 3/5&apos;, 17th, tierce, +28ST"/>
            <frac32.u.map name="f8" description="1 1/3&apos;, 19th, +31ST"/>
            <frac32.u.map name="f9" description="1&apos;, 22nd, +36ST"/>
         </params>
         <attribs>
            <spinner name="startNote" MinValue="0" MaxValue="0" DefaultValue="0"/>
            <spinner name="endNote" MinValue="0" MaxValue="127" DefaultValue="127"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const int ntw = 128;
static const int nkeys = 128+48;
int16_t keys[nkeys];
int32_t *array;
static const uint32_t LENGTHPOW = 7;
static const uint32_t LENGTH = 1<<LENGTHPOW;
static const uint32_t LENGTHMASK = (1<<LENGTHPOW)-1;
static const uint32_t BITS = 32;
static const uint32_t GAIN = 0;

int32_t r_array[ntw+48];
int32_t velosense=0;
const int keyoffset = 36;
int cycle=0;


__attribute__( ( always_inline ) ) __STATIC_INLINE int32_t _SMLABB (int32_t op1, int32_t op2, int32_t op3)
{
  int32_t result;  
  __ASM volatile ("smlabb %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3));
  return(result);
}

__attribute__( ( always_inline ) ) __STATIC_INLINE int32_t _SMLABT (int32_t op1, int32_t op2, int32_t op3)
{
  int32_t result;  
  __ASM volatile ("smlabt %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3));
  return(result);
}

__attribute__( ( always_inline ) ) __STATIC_INLINE int32_t _SMLATB (int32_t op1, int32_t op2, int32_t op3)
{
  int32_t result;  
  __ASM volatile ("smlatb %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3));
  return(result);
}

__attribute__( ( always_inline ) ) __STATIC_INLINE int32_t _SMLATT (int32_t op1, int32_t op2, int32_t op3)
{
  int32_t result;  
  __ASM volatile ("smlatt %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3));
  return(result);
}]]></code.declaration>
         <code.init><![CDATA[array = &r_array[0];

int i;
for(i=0;i<nkeys;i++){
	keys[i]=0;
}
for(i=0;i<ntw;i++){
	array[i]=0;
}]]></code.init>
         <code.krate><![CDATA[velosense=param_velosense<<3;

param_f1<<=3;
param_f2<<=3;
param_f3<<=3;
param_f4<<=3;
param_f5<<=3;
param_f6<<=3;
param_f7<<=3;
param_f8<<=3;
param_f9<<=3;

int32_t f12 = (param_f1>>16) + (param_f2 & 0xFFFF0000);
int32_t f34 = (param_f3>>16) + (param_f4 & 0xFFFF0000);
int32_t f56 = (param_f5>>16) + (param_f6 & 0xFFFF0000);
int32_t f78 = (param_f7>>16) + (param_f8 & 0xFFFF0000);
int32_t f90 = (param_f9>>16);

int offset = cycle&0x7;
cycle++;
int i;
for(i=offset<<1;i<nkeys;i+=16){
	int32_t a1 = 0;
	int32_t a2 = 0;
	int32_t k12;
	
	k12 = *((int32_t *)&keys[i+12+keyoffset]);
	a1 = _SMLABB(k12,f12,a1);
	a2 = _SMLATB(k12,f12,a2);
	k12 = *((int32_t *)&keys[i- 7+keyoffset]);
	a1 = _SMLABT(k12,f12,a1);
	a2 = _SMLATT(k12,f12,a2);
	
	k12 = *((int32_t *)&keys[i   +keyoffset]);
	a1 = _SMLABB(k12,f34,a1);
	a2 = _SMLATB(k12,f34,a2);
	k12 = *((int32_t *)&keys[i-12+keyoffset]);
	a1 = _SMLABT(k12,f34,a1);
	a2 = _SMLATT(k12,f34,a2);

	k12 = *((int32_t *)&keys[i-19+keyoffset]);
	a1 = _SMLABB(k12,f56,a1);
	a2 = _SMLATB(k12,f56,a2);
	k12 = *((int32_t *)&keys[i-24+keyoffset]);
	a1 = _SMLABT(k12,f56,a1);
	a2 = _SMLATT(k12,f56,a2);
	
	k12 = *((int32_t *)&keys[i-28+keyoffset]);
	a1 = _SMLABB(k12,f78,a1);
	a2 = _SMLATB(k12,f78,a2);
	k12 = *((int32_t *)&keys[i-31+keyoffset]);
	a1 = _SMLABT(k12,f78,a1);
	a2 = _SMLATT(k12,f78,a2);

	k12 = *((int32_t *)&keys[i-36+keyoffset]);
	a1 = _SMLABB(k12,f90,a1);
	a2 = _SMLATB(k12,f90,a2);

	array[i  ]= a1;
	array[i+1]= a2;
}]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + attr_midichannel) && (data2)) {
	if ((data1>=attr_startNote)&&(data1<=attr_endNote))
		keys[data1+keyoffset]=__SMMLA(velosense,data2<<24,0x1FFFFFFF-(velosense>>1))>>16;
} else if (((status == MIDI_NOTE_ON + attr_midichannel) && (!data2))||(status == MIDI_NOTE_OFF + attr_midichannel)) {
	if ((data1>=attr_startNote)&&(data1<=attr_endNote))
		keys[data1+keyoffset]=0;
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="5ffef33a-228b-47ad-8d1e-cb4e30e3d814" name="sine_2" x="280" y="140">
      <params/>
      <attribs>
         <objref attributeName="amplitudes" obj="switched_1"/>
         <objref attributeName="tuning" obj="hammond_1"/>
      </attribs>
      <object id="patch/object" uuid="5ffef33a-228b-47ad-8d1e-cb4e30e3d814">
         <sDescription>Sine wave tonewheels.
Processes note number 24 to 117.
No amplitude interpolation.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>tonewheels.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32buffer.bipolar name="wave" description="sine wave"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="amplitudes" description="Table containing the amplitudes (32bit)"/>
            <objref name="tuning" description="Tuning table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[class osc_sine_plus_octave_cheap {
	// processes TWO octaves!
	// cheaper version, but fails when cos(f)<0.5 or sin(f)>0.5
	public:

	void init(){
	}

	void render(int32_t *pOut, int32_t amp1, int32_t amp2, uint32_t freq, uint32_t phase){
		// out: pointer to s32 output buffer, adds values
		// amp: s32 amplitude
		int i;
		amp1=amp1>>3;
		int32_t ss = sin_q31(phase);
		int32_t sc = sin_q31(phase + 0x40000000);
		ss=ss>>1;
		sc=sc>>1;		
		int32_t rs = sin_q31(freq);
		int32_t rc = sin_q31(freq + 0x40000000);
		rs = rs<<1;
		rc = (0x80000000-rc)<<1;
		for(i=0;i<BUFSIZE;i++) {
			int32_t ss2 = __SMMLA(sc,rs,___SMMLS(ss,rc,ss));
			sc = ___SMMLS(ss,rs,___SMMLS(sc,rc,sc));
			ss = ss2;
			int32_t out = *pOut;
			out = __SMMLA(ss,amp1,out);
			int32_t ss2f = ___SMMUL(sc,ss);
			out = __SMMLA(ss2f,amp2,out);
			*pOut = out;
			pOut++;
		}
	}
};

class osc_sine_plus_octave {
	// processes TWO octaves!
	// slightly more expensive version works for all frequencies
	public:

	void init(){
	}

	void render(int32_t *pOut, int32_t amp1, int32_t amp2, uint32_t freq, uint32_t phase){
		// out: pointer to s32 output buffer, adds values
		// amp: s32 amplitude
		int i;
		amp1=amp1>>3;
		int32_t ss = sin_q31(phase);
		int32_t sc = sin_q31(phase + 0x40000000);
		ss=ss>>1;
		sc=sc>>1;
		int32_t rs = sin_q31(freq);
		int32_t rc = sin_q31(freq + 0x40000000);
		for(i=0;i<BUFSIZE;i++) {
			int32_t ss2 = __SMMLA(ss,rc,___SMMUL(sc,rs))<<1;
			sc = ___SMMLS(ss,rs,___SMMUL(sc,rc))<<1;
			ss = ss2;
			int32_t out = *pOut;
			out = __SMMLA(ss,amp1,out);
			int32_t ss2f = ___SMMUL(sc,ss);
			out = __SMMLA(ss2f,amp2,out);			
			*pOut++ = out;
		}
	}
};

static const int n_octaves3 = 6;
static const int n_octaves4 = 2;

class chroma {
	int phase;
		
	public:
	osc_sine_plus_octave_cheap octaves3[n_octaves3/2];
	osc_sine_plus_octave octaves4[n_octaves4/2];
	
	void init(){
		phase = 0;
		int i;
		for(i=0;i<n_octaves3/2;i++){
			octaves3[i].init();
		}
		for(i=0;i<n_octaves4/2;i++){
			octaves4[i].init();
		}
	};

	void render(uint32_t freq, int32_t *pOut, int32_t *amp){
		amp += 24;
		phase += freq<<4;
		uint32_t p = phase;
		uint32_t f = freq;
		int i;
		for(i=0;i<n_octaves3/2;i++){
			octaves3[i].render(pOut,*amp,amp[12],f,p);
			amp+=24;
			p=p<<2;
			f=f<<2;
		}
		for(i=0;i<n_octaves4/2;i++){
			octaves4[i].render(pOut,*amp,amp[12],f,p);
			amp+=24;
			p=p<<2;
			f=f<<2;
		}
	}
};

chroma chromas[12];]]></code.declaration>
         <code.init><![CDATA[int i;

for(i=0;i<12;i++) {
	chromas[i].init();
}]]></code.init>
         <code.krate><![CDATA[int i;

for(i=0;i<BUFSIZE;i++) {
	outlet_wave[i]=0;
}

for(i=0;i<12;i++){
	chromas[i].render(attr_tuning.array[i]>>3,&outlet_wave[0] ,&attr_amplitudes.array[i]);
}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="73013f6a-4064-4f02-9fef-d3bb5a18502f" name="damper_1" x="462" y="140">
      <params>
         <frac32.u.map name="damp" value="56.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="73013f6a-4064-4f02-9fef-d3bb5a18502f">
         <sDescription>Dampens an audio signal by fading out the difference between samples.
eg. dampens non-bandlimited saw/pulse waveforms or any other waveforms that have sudden jumps in the signal.
eg. removes clicks from audio</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <inlets>
            <frac32buffer name="in"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="damp" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t prev;
int32_t offset;]]></code.declaration>
         <code.srate><![CDATA[int32_t diff=prev-inlet_in;
offset=___SMMUL(param_damp<<3,offset<<2)+diff;
outlet_out=offset+inlet_in;
prev=inlet_in;]]></code.srate>
      </object>
   </patchobj>
   <obj type="math/gain" uuid="62b1c1a6337c7c8f6aec96408a432477b113cfa0" name="gain_1" x="560" y="140">
      <params>
         <frac32.u.map name="amp" value="14.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="ab1a568d-edf1-4b21-b1f7-b30bc284f067" name="class_1" x="672" y="140">
      <params>
         <frac32.u.map name="drive" value="12.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="ab1a568d-edf1-4b21-b1f7-b30bc284f067">
         <sDescription>&quot;Class A&quot; distortion. Class A refers to an amplifier topology, with asymetrical overdrive properties. This object adds variable DC offset, a subtle highpass filter can be useful before further processing.</sDescription>
         <author>Johannes Taelman</author>
         <license>GPL</license>
         <helpPatch>class a.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="input"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="drive" description="overdrivel level" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t prev=0;
int32_t prev2=0;
int32_t prev_in=0;]]></code.declaration>
         <code.krate><![CDATA[int i;

int32_t drive_complement = (1<<27)-param_drive;
int32_t drive_complement_square = ___SMMUL(drive_complement,drive_complement)<<2;
drive_complement = drive_complement>>1;
for(i=0;i<BUFSIZE;i++) {
	int32_t mul1 = ___SMMUL((inlet_in[i]+prev_in),prev+prev2);
     int32_t biased1 = __SSAT(___SMMLA(param_drive<<4,mul1 + 0x00800000 + drive_complement, drive_complement_square),26)<<5;
     prev2 = prev;
     prev = biased1;
     outlet_out[i] = mul1;
     prev_in = inlet_in[i];
}]]></code.krate>
      </object>
   </patchobj>
   <patcher type="patch/patcher" uuid="55e5de44-9788-4f79-a7f2-ed0a62166e4b" name="obj_1" x="770" y="140">
      <params>
         <frac32.s.map name="speed" value="-30.0"/>
         <frac32.u.map name="depth" value="14.5"/>
         <frac32.s.map name="offset" value="-39.0"/>
         <frac32.u.map name="wobble" value="2.0"/>
         <frac32.s.map name="xover1" value="64.0"/>
         <frac32.s.map name="xover2" value="38.0"/>
         <frac32.u.map name="blend" value="12.0"/>
         <bool32.tgl name="on" value="1"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.11">
         <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_1" x="14" y="28">
            <params>
               <frac32.s.map name="pitch" value="-20.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/&gt;&gt;" uuid="d883beaf50b7aae4803ed9941e8f123e87e1e3aa" name="&gt;&gt;_4" x="126" y="28">
            <params/>
            <attribs>
               <spinner attributeName="shift" value="3"/>
            </attribs>
         </obj>
         <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_1" x="224" y="28">
            <params>
               <frac32.u.map name="amp" value="3.5"/>
            </params>
            <attribs/>
         </obj>
         <obj type="lfo/saw" uuid="ef2a162678b533c5e46c4e3c0decba17b1862d85" name="speed" x="336" y="28">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="1.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/window" uuid="276ef1bfd2978430dd94074347265b17092b6311" name="window_1" x="448" y="28">
            <params/>
            <attribs/>
         </obj>
         <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_2" x="546" y="28">
            <params/>
            <attribs>
               <spinner attributeName="value" value="32"/>
            </attribs>
         </obj>
         <obj type="math/-" uuid="3280bb759e9fc189e134300e48dda7e903c9a110" name="-_4" x="644" y="28">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="depth" x="448" y="126">
            <params>
               <frac32.u.map name="amp" onParent="true" value="18.5"/>
            </params>
            <attribs/>
         </obj>
         <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="offset" x="560" y="126">
            <params>
               <frac32.s.map name="value" onParent="true" value="15.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/&gt;&gt;" uuid="d883beaf50b7aae4803ed9941e8f123e87e1e3aa" name="&gt;&gt;_1" x="644" y="126">
            <params/>
            <attribs>
               <spinner attributeName="shift" value="1"/>
            </attribs>
         </obj>
         <obj type="math/inv" uuid="565521d3699b36d8095aa1c79b9ad0046fb133ce" name="inv_1" x="742" y="126">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_3" x="812" y="126">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_2" x="896" y="126">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/wrap" uuid="bb34ebfe0112f3238b3f928bf7ddea465d410bcb" name="wrap_1" x="140" y="238">
            <params/>
            <attribs>
               <spinner attributeName="bits" value="1"/>
            </attribs>
         </obj>
         <obj type="math/window" uuid="276ef1bfd2978430dd94074347265b17092b6311" name="window_2" x="224" y="238">
            <params/>
            <attribs/>
         </obj>
         <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_1" x="322" y="238">
            <params/>
            <attribs>
               <spinner attributeName="value" value="32"/>
            </attribs>
         </obj>
         <obj type="math/-" uuid="3280bb759e9fc189e134300e48dda7e903c9a110" name="-_2" x="420" y="238">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/&lt;&lt;" uuid="b03d8d8009c0480be0ccb29ed65933a82fa4a80f" name="&lt;&lt;_3" x="504" y="238">
            <params/>
            <attribs>
               <spinner attributeName="shift" value="1"/>
            </attribs>
         </obj>
         <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="wobble" x="602" y="238">
            <params>
               <frac32.u.map name="amp" onParent="true" value="31.5"/>
            </params>
            <attribs/>
         </obj>
         <obj type="patch/inlet a" uuid="b577fe41e0a6bc7b5502ce33cb8a3129e2e28ee5" name="inlet_1" x="14" y="308">
            <params/>
            <attribs/>
         </obj>
         <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_1" x="112" y="308">
            <params/>
            <attribs/>
         </obj>
         <obj type="jho/filter/allpass m hq" uuid="c6bec25f5bf44267a6bd5537d6a2cfae" name="allpass_1" x="196" y="308">
            <params/>
            <attribs>
               <spinner attributeName="delay" value="4"/>
            </attribs>
         </obj>
         <obj type="jho/filter/allpass m hq" uuid="c6bec25f5bf44267a6bd5537d6a2cfae" name="allpass_2" x="350" y="308">
            <params/>
            <attribs>
               <spinner attributeName="delay" value="5"/>
            </attribs>
         </obj>
         <obj type="filter/hp1" uuid="abea7276611b289bed35b80345a6bc4efd4d9a4e" name="xover1" x="518" y="392">
            <params>
               <frac32.s.map name="freq" onParent="true" value="38.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="630" y="392">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_1" x="700" y="392">
            <params/>
            <attribs/>
         </obj>
         <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_2" x="112" y="518">
            <params/>
            <attribs/>
         </obj>
         <obj type="jho/filter/allpass m hq" uuid="c6bec25f5bf44267a6bd5537d6a2cfae" name="allpass_5" x="196" y="518">
            <params/>
            <attribs>
               <spinner attributeName="delay" value="19"/>
            </attribs>
         </obj>
         <obj type="jho/filter/allpass m hq" uuid="c6bec25f5bf44267a6bd5537d6a2cfae" name="allpass_6" x="350" y="518">
            <params/>
            <attribs>
               <spinner attributeName="delay" value="22"/>
            </attribs>
         </obj>
         <obj type="filter/hp1" uuid="abea7276611b289bed35b80345a6bc4efd4d9a4e" name="xover2" x="518" y="518">
            <params>
               <frac32.s.map name="freq" onParent="true" value="4.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="blend" x="798" y="518">
            <params>
               <frac32.u.map name="value" onParent="true" value="19.5"/>
            </params>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="630" y="630">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_4" x="700" y="630">
            <params/>
            <attribs/>
         </obj>
         <obj type="mix/xfade" uuid="375dc91d218e96cdc9cbc7e92adb48f705ef701a" name="xfade_2" x="798" y="630">
            <params/>
            <attribs/>
         </obj>
         <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="on" x="28" y="728">
            <params>
               <bool32.tgl name="b" onParent="true" value="1"/>
            </params>
            <attribs/>
         </obj>
         <obj type="mux/mux 2" uuid="539c246f4c360ac476e128cfbfa84348fb7f7e73" name="mux_1" x="112" y="728">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="outlet_1" x="196" y="728">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="speed" outlet="wave"/>
               <dest obj="wrap_1" inlet="a"/>
               <dest obj="window_1" inlet="phase"/>
            </net>
            <net>
               <source obj="window_1" outlet="win"/>
               <dest obj="-_4" inlet="in1"/>
            </net>
            <net>
               <source obj="-_2" outlet="out"/>
               <dest obj="&lt;&lt;_3" inlet="a"/>
            </net>
            <net>
               <source obj="&lt;&lt;_3" outlet="result"/>
               <dest obj="wobble" inlet="in"/>
            </net>
            <net>
               <source obj="wobble" outlet="out"/>
               <dest obj="vca_1" inlet="v"/>
               <dest obj="vca_2" inlet="v"/>
            </net>
            <net>
               <source obj="i_1" outlet="out"/>
               <dest obj="-_2" inlet="in1"/>
            </net>
            <net>
               <source obj="+_2" outlet="out"/>
               <dest obj="interp_2" inlet="i"/>
            </net>
            <net>
               <source obj="allpass_1" outlet="out"/>
               <dest obj="allpass_2" inlet="in"/>
            </net>
            <net>
               <source obj="interp_1" outlet="o"/>
               <dest obj="allpass_1" inlet="mod"/>
               <dest obj="allpass_2" inlet="mod"/>
            </net>
            <net>
               <source obj="inlet_1" outlet="inlet"/>
               <dest obj="allpass_1" inlet="in"/>
               <dest obj="mux_1" inlet="i1"/>
               <dest obj="allpass_5" inlet="in"/>
            </net>
            <net>
               <source obj="on" outlet="o"/>
               <dest obj="mux_1" inlet="s"/>
            </net>
            <net>
               <source obj="xover1" outlet="out"/>
               <dest obj="vca_1" inlet="a"/>
            </net>
            <net>
               <source obj="allpass_2" outlet="out"/>
               <dest obj="+_1" inlet="in1"/>
               <dest obj="xover1" inlet="in"/>
            </net>
            <net>
               <source obj="wrap_1" outlet="b"/>
               <dest obj="window_2" inlet="phase"/>
            </net>
            <net>
               <source obj="window_2" outlet="win"/>
               <dest obj="-_2" inlet="in2"/>
            </net>
            <net>
               <source obj="vca_1" outlet="o"/>
               <dest obj="+_1" inlet="in2"/>
            </net>
            <net>
               <source obj="i_2" outlet="out"/>
               <dest obj="-_4" inlet="in2"/>
            </net>
            <net>
               <source obj="-_4" outlet="out"/>
               <dest obj="depth" inlet="in"/>
            </net>
            <net>
               <source obj="inv_1" outlet="out"/>
               <dest obj="+_3" inlet="in1"/>
            </net>
            <net>
               <source obj="offset" outlet="out"/>
               <dest obj="&gt;&gt;_1" inlet="a"/>
            </net>
            <net>
               <source obj="depth" outlet="out"/>
               <dest obj="inv_1" inlet="in"/>
               <dest obj="+_2" inlet="in1"/>
            </net>
            <net>
               <source obj="+_3" outlet="out"/>
               <dest obj="interp_1" inlet="i"/>
            </net>
            <net>
               <source obj="&gt;&gt;_1" outlet="result"/>
               <dest obj="+_3" inlet="in2"/>
               <dest obj="+_2" inlet="in2"/>
            </net>
            <net>
               <source obj="allpass_5" outlet="out"/>
               <dest obj="allpass_6" inlet="in"/>
            </net>
            <net>
               <source obj="interp_2" outlet="o"/>
               <dest obj="allpass_5" inlet="mod"/>
               <dest obj="allpass_6" inlet="mod"/>
            </net>
            <net>
               <source obj="xover2" outlet="out"/>
               <dest obj="vca_2" inlet="a"/>
            </net>
            <net>
               <source obj="allpass_6" outlet="out"/>
               <dest obj="+_4" inlet="in1"/>
               <dest obj="xover2" inlet="in"/>
            </net>
            <net>
               <source obj="vca_2" outlet="o"/>
               <dest obj="+_4" inlet="in2"/>
            </net>
            <net>
               <source obj="blend" outlet="out"/>
               <dest obj="xfade_2" inlet="c"/>
            </net>
            <net>
               <source obj="xfade_2" outlet="o"/>
               <dest obj="mux_1" inlet="i2"/>
            </net>
            <net>
               <source obj="sine_1" outlet="wave"/>
               <dest obj="&gt;&gt;_4" inlet="a"/>
            </net>
            <net>
               <source obj="&gt;&gt;_4" outlet="result"/>
               <dest obj="*c_1" inlet="in"/>
            </net>
            <net>
               <source obj="*c_1" outlet="out"/>
               <dest obj="speed" inlet="pitch"/>
            </net>
            <net>
               <source obj="mux_1" outlet="o"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="+_1" outlet="out"/>
               <dest obj="xfade_2" inlet="i1"/>
            </net>
            <net>
               <source obj="+_4" outlet="out"/>
               <dest obj="xfade_2" inlet="i2"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>58</x>
            <y>-4</y>
            <width>1226</width>
            <height>1032</height>
         </windowPos>
      </subpatch>
   </patcher>
   <nets>
      <net>
         <source obj="obj_1" outlet="outlet_1"/>
         <dest obj="out_1" inlet="right"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="sine_1" outlet="wave"/>
         <dest obj="*c_1" inlet="in"/>
      </net>
      <net>
         <source obj="sine_2" outlet="wave"/>
         <dest obj="damper_1" inlet="in"/>
      </net>
      <net>
         <source obj="*c_1" outlet="out"/>
         <dest obj="div_1" inlet="in"/>
      </net>
      <net>
         <source obj="div_1" outlet="out"/>
         <dest obj="hammond_1" inlet="detune"/>
      </net>
      <net>
         <source obj="class_1" outlet="out"/>
         <dest obj="obj_1" inlet="inlet_1"/>
      </net>
      <net>
         <source obj="gain_1" outlet="out"/>
         <dest obj="class_1" inlet="in"/>
      </net>
      <net>
         <source obj="damper_1" outlet="out"/>
         <dest obj="gain_1" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>788</x>
      <y>149</y>
      <width>1372</width>
      <height>1003</height>
   </windowPos>
</patch-1.0>