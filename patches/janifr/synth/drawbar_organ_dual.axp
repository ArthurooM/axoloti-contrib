<patch-1.0 appVersion="1.0.12">
   <patchobj type="patch/object" uuid="0351859b-6d3a-4a42-abc4-dcc720b817ea" name="upper" x="14" y="0">
      <params>
         <frac32.u.map name="d16" value="64.0"/>
         <frac32.u.map name="d513" value="64.0"/>
         <frac32.u.map name="d8" value="64.0"/>
         <frac32.u.map name="d4" value="64.0"/>
         <frac32.u.map name="d223" value="64.0"/>
         <frac32.u.map name="d2" value="64.0"/>
         <frac32.u.map name="d135" value="64.0"/>
         <frac32.u.map name="d113" value="64.0"/>
         <frac32.u.map name="d1" value="64.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0351859b-6d3a-4a42-abc4-dcc720b817ea">
         <inlets/>
         <outlets>
            <frac32.positive name="o16"/>
            <frac32.positive name="o513"/>
            <frac32.positive name="o8"/>
            <frac32.positive name="o4"/>
            <frac32.positive name="o223"/>
            <frac32.positive name="o2"/>
            <frac32.positive name="o135"/>
            <frac32.positive name="o113"/>
            <frac32.positive name="o1"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="d16"/>
            <frac32.u.map name="d513"/>
            <frac32.u.map name="d8"/>
            <frac32.u.map name="d4"/>
            <frac32.u.map name="d223"/>
            <frac32.u.map name="d2"/>
            <frac32.u.map name="d135"/>
            <frac32.u.map name="d113"/>
            <frac32.u.map name="d1"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o16=param_d16;
outlet_o513=param_d513;
outlet_o8=param_d8;
outlet_o4=param_d4;
outlet_o223=param_d223;
outlet_o2=param_d2;
outlet_o135=param_d135;
outlet_o113=param_d113;
outlet_o1=param_d1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0351859b-6d3a-4a42-abc4-dcc720b817ea" name="lower" x="98" y="0">
      <params>
         <frac32.u.map name="d16" value="64.0"/>
         <frac32.u.map name="d513" value="63.5"/>
         <frac32.u.map name="d8" value="64.0"/>
         <frac32.u.map name="d4" value="0.0"/>
         <frac32.u.map name="d223" value="0.0"/>
         <frac32.u.map name="d2" value="0.0"/>
         <frac32.u.map name="d135" value="0.0"/>
         <frac32.u.map name="d113" value="0.0"/>
         <frac32.u.map name="d1" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0351859b-6d3a-4a42-abc4-dcc720b817ea">
         <inlets/>
         <outlets>
            <frac32.positive name="o16"/>
            <frac32.positive name="o513"/>
            <frac32.positive name="o8"/>
            <frac32.positive name="o4"/>
            <frac32.positive name="o223"/>
            <frac32.positive name="o2"/>
            <frac32.positive name="o135"/>
            <frac32.positive name="o113"/>
            <frac32.positive name="o1"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="d16"/>
            <frac32.u.map name="d513"/>
            <frac32.u.map name="d8"/>
            <frac32.u.map name="d4"/>
            <frac32.u.map name="d223"/>
            <frac32.u.map name="d2"/>
            <frac32.u.map name="d135"/>
            <frac32.u.map name="d113"/>
            <frac32.u.map name="d1"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o16=param_d16;
outlet_o513=param_d513;
outlet_o8=param_d8;
outlet_o4=param_d4;
outlet_o223=param_d223;
outlet_o2=param_d2;
outlet_o135=param_d135;
outlet_o113=param_d113;
outlet_o1=param_d1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="8b03c296-8c05-4a5c-9658-abcad2174dcf" name="object_1" x="210" y="0">
      <params>
         <frac32.u.map name="keyclick" value="0.0"/>
         <frac32.u.map name="percvolume" value="0.0"/>
         <frac32.u.map name="percdecay" value="37.5"/>
         <bool32.tgl name="perc2nd3rd" value="0"/>
         <bool32.tgl name="taper" value="0"/>
         <frac32.u.map name="leakage" value="0.0"/>
      </params>
      <attribs>
         <spinner attributeName="upperchannel" value="1"/>
         <spinner attributeName="lowerchannel" value="2"/>
      </attribs>
      <object id="patch/object" uuid="8b03c296-8c05-4a5c-9658-abcad2174dcf">
         <sDescription>Drawbar organ</sDescription>
         <author>Jani Frilander</author>
         <license>BSD</license>
         <inlets>
            <frac32.positive name="u16"/>
            <frac32.positive name="u513"/>
            <frac32.positive name="u8"/>
            <frac32.positive name="u4"/>
            <frac32.positive name="u223"/>
            <frac32.positive name="u2"/>
            <frac32.positive name="u135"/>
            <frac32.positive name="u113"/>
            <frac32.positive name="u1"/>
            <frac32.positive name="l16"/>
            <frac32.positive name="l513"/>
            <frac32.positive name="l8"/>
            <frac32.positive name="l4"/>
            <frac32.positive name="l223"/>
            <frac32.positive name="l2"/>
            <frac32.positive name="l135"/>
            <frac32.positive name="l113"/>
            <frac32.positive name="l1"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="upper"/>
            <frac32buffer.bipolar name="lower"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="keyclick"/>
            <frac32.u.map name="percvolume"/>
            <frac32.u.map name="percdecay"/>
            <bool32.tgl name="perc2nd3rd"/>
            <bool32.tgl name="taper"/>
            <frac32.u.map name="leakage"/>
         </params>
         <attribs>
            <spinner name="upperchannel" MinValue="1" MaxValue="16" DefaultValue="1"/>
            <spinner name="lowerchannel" MinValue="1" MaxValue="16" DefaultValue="2"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const int tonewheels = 91;
static const int max_percussion_tonewheels=10;
int8_t key[2][61];

/*99=no pair, tone wheels 36-40 have no pair
uint8_t tw_bin_leakage_map[tonewheels]={
	48,49,50,51,52,53,54,55,56,57,
	58,59,60,61,62,63,64,65,66,67,
	68,69,70,71,72,73,74,75,76,77,
	78,79,80,81,82,83,99,99,99,99,
	99,84,85,86,87,88,89,90,0, 1,
	2, 3, 4, 5, 6, 7, 8, 9, 10,11,
	12,13,14,15,16,17,18,19,20,21,
	22,23,24,25,26,27,28,29,30,31,
	32,33,34,35,41,42,43,44,45,46,
	47
}*/
int32_t leakage_gain[tonewheels];
int32_t leakage;

int32_t keys=0;
int32_t trigger_percussion=0;
int32_t percussion_tonewheels=0;
int32_t percussion_tonewheel[max_percussion_tonewheels];
int32_t percussion_gain=0;

int32_t d16[2];
int32_t d513[2];
int32_t d8[2];
int32_t d4[2];
int32_t d223[2];
int32_t d2[2];
int32_t d135[2];
int32_t d113[2];
int32_t d1[2];

int32_t delay_line[32];
int32_t delay_position=0;
int32_t lfo_phase=0;
int32_t lfo_increment=1;

int32_t new_note=0;
int32_t keyclick_gain=0;
int32_t rnd=22222;
int32_t gain[2][tonewheels];

int32_t multiplier[tonewheels]={
	280,297,315,334,353,374,397,421,445,472,
	500,529,561,594,630,667,707,749,793,841,
	890,943,1000,1059,1122,1189,1260,1334,1414,1497,
	1587,1681,1781,1887,1999,2118,2244,2377,2519,2669,
	2827,2994,3174,3362,3561,3774,3998,4235,4486,4753,
	5038,5336,5653,5987,6346,6723,7119,7545,7992,8465,
	8968,9499,10068,10664,11296,11962,12677,13428,14217,15065,
	15954,16894,17893,18949,20077,21257,22508,23825,25234,26714,
	28267,29930,31671,33507,35488,37555,39719,41982,44399,46916,
	49561};
	
//tone generator calibration curve for organs from 1935-1940 based on Kon's data
int32_t oscillator_y[tonewheels]={
	16384,15728,14417,13107,11796,10485,9830,9175,8847,8519,
	8192,8060,7864,7733,7602,7471,7340,7208,7077,6946,
	6815,6684,6619,6553,6553,6553,6553,6553,6553,6553,
	6553,6553,6553,6553,6553,6553,6619,6684,6750,6815,
	6881,6946,7077,7208,7340,7471,7602,7733,7864,8060,
	8323,8519,8716,8978,9175,9371,9633,9830,10027,10289,
	10485,10682,10878,11141,11337,11599,11796,11993,12255,12451,
	12648,12910,13107,13107,13107,13107,13107,13107,13107,13107,
	13107,13107,13107,13107,13107,13107,13107,13107,13107,13107,
	13107};

int32_t oscillator_x[tonewheels];

int32_t process_tw=0;]]></code.declaration>
         <code.init><![CDATA[int i;
for(i=0;i<tonewheels;i++) {
	oscillator_x[i]=0;
	leakage_gain [i]=0;
	gain[0][i]=0;
	gain[1][i]=0;
}

for (i=0;i<61;i++){
	key[0][i]=0;
	key[1][i]=0;
}

for (i=0;i<32;i++)
	delay_line[i]=0;

//for (i=0;i<BUFSIZE;i++)
//	percussion_gain[i]=0;]]></code.init>
         <code.krate><![CDATA[int i,j;
/*for(j=0;j<2;j++)
	for(i=0;i<tonewheels;i++){
		gain[j][i]=0;
	}*/

int32_t percvolume=param_percvolume;

/*keys=0;
for (i=0;i<61;i++)
	if (key[i])
		keys++;*/
		
if(trigger_percussion)
{
	percussion_gain=percvolume;
	trigger_percussion=0;
}

/* key click*/
if(new_note){	
//	if(keys==1)
//		percussion_gain=percvolume;
		
	keyclick_gain=param_keyclick;
	new_note=0;
}

int32_t perc_tw = 24+7*(param_perc2nd3rd&&1);
percussion_tonewheels=0;

for (i=0;i<61;i++){
	if (key[0][i]){
		int32_t temp_tw=i+perc_tw;
		if (temp_tw<tonewheels){
			percussion_tonewheel[percussion_tonewheels]=temp_tw;
			percussion_tonewheels++;
			if (percussion_tonewheels>=max_percussion_tonewheels)
				break;
		}
	}
}

d16[0] = inlet_u16;
d513[0] = inlet_u513;
d8[0] = inlet_u8;
d4[0] = inlet_u4;
d223[0] = inlet_u223;
d2[0] = inlet_u2;
d135[0] = inlet_u135;
d113[0] = inlet_u113;
d1[0] = inlet_u1;

d16[1] = inlet_l16;
d513[1] = inlet_l513;
d8[1] = inlet_l8;
d4[1] = inlet_l4;
d223[1] = inlet_l223;
d2[1] = inlet_l2;
d135[1] = inlet_l135;
d113[1] = inlet_l113;
d1[1] = inlet_l1;

for (i=0;i<2;i++){
	d16[i] -= 3*(d16[i]>>14)*(percvolume>>15);
	d513[i] -= 3*(d513[i]>>14)*(percvolume>>15);
	d8[i] -= 3*(d8[i]>>14)*(percvolume>>15);
	d4[i] -= 3*(d4[i]>>14)*(percvolume>>15);
	d223[i] -= 3*(d223[i]>>14)*(percvolume>>15);
	d2[i] -= 3*(d2[i]>>14)*(percvolume>>15);
	d135[i] -= 3*(d135[i]>>14)*(percvolume>>15);
	d113[i] -= 3*(d113[i]>>14)*(percvolume>>15);
	d1[i] -= 3*(d1[i]>>14)*(percvolume>>15);
}

//Process 13 tonewheels every K-cycle. After 7 rounds start over.
for(i=0;i<2;i++){
	//0-6
	j=process_tw;
	gain[i][j] = d16[i]*key[i][j];
	//7-13
	j +=7;
	gain[i][j] = d16[i]*key[i][j];
	if (j>11)
		gain[i][j] += d8[i]*key[i][j-12];
	//14-20
	j +=7;
	gain[i][j] = d16[i]*key[i][j];
	gain[i][j] += d8[i]*key[i][j-12];
	if (j>18)
		gain[i][j] += d513[i]*key[i][j-19];
	//21-27
	j +=7;
	gain[i][j] = d16[i]*key[i][j];
	gain[i][j] += d8[i]*key[i][j-12];
	gain[i][j] += d513[i]*key[i][j-19];
	if (j>23)
		gain[i][j] += d4[i]*key[i][j-24];
	//28-34
	j +=7;
	gain[i][j] = d16[i]*key[i][j];
	gain[i][j] += d8[i]*key[i][j-12];
	gain[i][j] += d513[i]*key[i][j-19];
	gain[i][j] += d4[i]*key[i][j-24];
	if (j>30)
		gain[i][j] += d223[i]*key[i][j-31];
	//35-41
	j +=7;
	gain[i][j] = d16[i]*key[i][j];
	gain[i][j] += d8[i]*key[i][j-12];
	gain[i][j] += d513[i]*key[i][j-19];
	gain[i][j] += d4[i]*key[i][j-24];
	gain[i][j] += d223[i]*key[i][j-31];
	if (j>35)
		gain[i][j] += d2[i]*key[i][j-36];
	if (j>39)
		gain[i][j] += d135[i]*key[i][j-40];
	//42-48
	j +=7;
	gain[i][j] = d16[i]*key[i][j];
	gain[i][j] += d8[i]*key[i][j-12];
	gain[i][j] += d513[i]*key[i][j-19];
	gain[i][j] += d4[i]*key[i][j-24];
	gain[i][j] += d223[i]*key[i][j-31];
	gain[i][j] += d2[i]*key[i][j-36];
	gain[i][j] += d135[i]*key[i][j-40];
	if (j>42)
		gain[i][j] += d113[i]*key[i][j-43];
	if (j>47)
		gain[i][j] += d1[i]*key[i][j-48];
	//49-55
	j +=7;
	gain[i][j] = d16[i]*key[i][j];
	gain[i][j] += d8[i]*key[i][j-12];
	gain[i][j] += d513[i]*key[i][j-19];
	gain[i][j] += d4[i]*key[i][j-24];
	gain[i][j] += d223[i]*key[i][j-31];
	gain[i][j] += d2[i]*key[i][j-36];
	gain[i][j] += d135[i]*key[i][j-40];
	gain[i][j] += d113[i]*key[i][j-43];
	gain[i][j] += d1[i]*key[i][j-48];
	//56-62
	j +=7;
	gain[i][j] = d8[i]*key[i][j-12];
	gain[i][j] += d513[i]*key[i][j-19];
	gain[i][j] += d4[i]*key[i][j-24];
	gain[i][j] += d223[i]*key[i][j-31];
	gain[i][j] += d2[i]*key[i][j-36];
	gain[i][j] += d135[i]*key[i][j-40];
	gain[i][j] += d113[i]*key[i][j-43];
	gain[i][j] += d1[i]*key[i][j-48];
	if(j<61)
		gain[i][j] += d16[i]*key[i][j];
	//63-69
	j +=7;
	gain[i][j] = d8[i]*key[i][j-12];
	gain[i][j] += d513[i]*key[i][j-19];
	gain[i][j] += d4[i]*key[i][j-24];
	gain[i][j] += d223[i]*key[i][j-31];
	gain[i][j] += d2[i]*key[i][j-36];
	gain[i][j] += d135[i]*key[i][j-40];
	gain[i][j] += d113[i]*key[i][j-43];
	gain[i][j] += d1[i]*key[i][j-48];
	//70-76
	j +=7;
	gain[i][j] = d513[i]*key[i][j-19];
	gain[i][j] += d4[i]*key[i][j-24];
	gain[i][j] += d223[i]*key[i][j-31];
	gain[i][j] += d2[i]*key[i][j-36];
	gain[i][j] += d135[i]*key[i][j-40];
	gain[i][j] += d113[i]*key[i][j-43];
	gain[i][j] += d1[i]*key[i][j-48];
	if(j<73)
		gain[i][j] += d8[i]*key[i][j-12];
	//77-83
}

process_tw++;
if (process_tw>6)
	process_tw=0;

for(i=0;i<BUFSIZE;i++){
	outlet_upper[i]=0;
	outlet_lower[i]=0;
//	tg_out[i]=0;
	//outlet_out[i]=0;
}

/*leakage=(param_leakage>>16);
for(j=0;j<2;j++){
	for (i=0;i<36;i++)
		leakage_gain[i]=leakage*(gain[j][i+48]>>16);
	for (i=41;i<48;i++)
		leakage_gain[i]=leakage*(gain[j][i+43]>>16);
	for (i=48;i<tonewheels;i++)
		leakage_gain[i]=leakage*(gain[j][i-48]>>16);

	for (i=0;i<tonewheels;i++)
		gain[j][i] += leakage_gain[i];
}*/

int32_t stored_percussion_gain=percussion_gain;

for(i=0;i<percussion_tonewheels;i++) {
	int32_t osc_x=oscillator_x[percussion_tonewheel[i]];
	int32_t osc_y=oscillator_y[percussion_tonewheel[i]];
	int32_t mult=multiplier[percussion_tonewheel[i]];
	percussion_gain=stored_percussion_gain;
	for(j=0;j<BUFSIZE;j++) {
		outlet_upper[j]=__SMMLA(osc_x<<12,percussion_gain,outlet_upper[j]);
		int32_t temp = (osc_y * mult)>>16;
		osc_x -= temp;
		temp = (osc_x * mult)>>16;
		osc_y += temp;
		percussion_gain -=(((percussion_gain>>12)*(param_percdecay>>12))>>15);

	}
}

if(keyclick_gain>0){
	for(i=0;i<BUFSIZE;i++) {
		outlet_upper[i] = __SMMLA(rnd>>6,keyclick_gain,outlet_upper[i]);
		keyclick_gain -= 100000;
		if (keyclick_gain<0)
			keyclick_gain=0;
		rnd = rnd*196314165+907633515;
	}
}

for(i=0;i<tonewheels;i++) {
	for(j=0;j<BUFSIZE;j++) {
		outlet_upper[j] = __SMMLA(oscillator_x[i]<<12,gain[0][i],outlet_upper[j]);
		outlet_lower[j] = __SMMLA(oscillator_x[i]<<12,gain[1][i],outlet_lower[j]);
		int32_t temp = (oscillator_y[i] * multiplier[i])>>16;
		oscillator_x[i] -= temp;
		temp = (oscillator_x[i] * multiplier[i])>>16;
		oscillator_y[i] += temp;	
	}
}

/*int32_t upper = param_vibratoupper;
int32_t lower = param_vibratolower;
int32_t tg_out[BUFSIZE];
for(i=0;i<BUFSIZE;i++)
	tg_out[i]=upper_out[i]*upper+lower_out[i]*lower;

if(param_chorus){
	for (i=0;i<BUFSIZE;i++){
		int32_t pos= i+delay_position;
		int32_t depth=lfo_phase>>(3-(param_vibrato>>25));
		delay_line[(pos)&0x1f]=tg_out[i];
		int32_t delayed_sample=(depth&0x7f)*(delay_line[(pos+5+(depth>>7))&0x1f]>>7)+
					(0x7f-(depth&0x7f))*(delay_line[(pos+4+(depth>>7))&0x1f]>>7);
		outlet_out[i]=(tg_out[i]>>1)+(delayed_sample>>1);
		lfo_phase += lfo_increment;
	}
}
else
{
	for (i=0;i<BUFSIZE;i++){
		int32_t pos=i+delay_position;
		int32_t depth=lfo_phase>>(3-(param_vibrato>>25));
		delay_line[(pos)&0x1f]=tg_out[i];
		int32_t delayed_sample=(depth&0x7f)*(delay_line[(pos+5+(depth>>7))&0x1f]>>7)+
					(0x7f-(depth&0x7f))*(delay_line[(pos+4+(depth>>7))&0x1f]>>7);		
		outlet_out[i]=delayed_sample;
		lfo_phase += lfo_increment;
	}
}
delay_position = ((delay_position+BUFSIZE)&0x1f);
if (lfo_phase<=0)
		lfo_increment=1;
if (lfo_phase>=3456)
		lfo_increment=-1;
			
for (i=0;i<BUFSIZE;i++)
	outlet_out[i]+=upper_out[i]*(!upper)+lower_out[i]*(!lower);*/]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_upperchannel-1)) && (data2)) {
	if((data1>23)&&(data1<85))
	{
		if(!key[0][data1-24]){
			key[0][data1-24]=1;
  			keys++;
  			if (keys==1)
  				trigger_percussion=1;
			new_note=1;
		}
	}
} else if (((status == MIDI_NOTE_ON + (attr_upperchannel-1)) && (!data2))||(status == MIDI_NOTE_OFF + (attr_upperchannel-1))) {
   	if((data1>23)&&(data1<85))
   	{
   		if(key[0][data1-24]){
   			key[0][data1-24]=0;
   			keys--;
   		}
   	}
}
if ((status == MIDI_NOTE_ON + (attr_lowerchannel-1)) && (data2)) {
	if((data1>23)&&(data1<85))
	{
		key[1][data1-24]=1;
	}
} else if (((status == MIDI_NOTE_ON + (attr_lowerchannel-1)) && (!data2))||(status == MIDI_NOTE_OFF + (attr_lowerchannel-1))) {
   	if((data1>23)&&(data1<85))
   	{
   		key[1][data1-24]=0;
   	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="77d1df07-daf8-4157-b0be-275a3c033923" name="object_2" x="364" y="0">
      <params>
         <frac32.u.map name="vibrato" value="64.0"/>
         <bool32.tgl name="upper" value="0"/>
         <bool32.tgl name="lower" value="0"/>
         <bool32.tgl name="chorus" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="77d1df07-daf8-4157-b0be-275a3c033923">
         <inlets>
            <frac32buffer.bipolar name="upper"/>
            <frac32buffer.bipolar name="lower"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="out"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="vibrato"/>
            <bool32.tgl name="upper"/>
            <bool32.tgl name="lower"/>
            <bool32.tgl name="chorus"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t delay_line[32];
int32_t delay_position=0;
int32_t lfo_phase=0;
int32_t lfo_increment=1;]]></code.declaration>
         <code.init><![CDATA[int i;
for(i=0;i<32;i++)
	delay_line[i]=0;]]></code.init>
         <code.krate><![CDATA[int32_t i;
int32_t scanner_in[BUFSIZE];
//int32_t upper=param_upper;
//int32_t lower=param_lower;
for (i=0;i<BUFSIZE;i++)
	scanner_in[i]=inlet_upper[i]*param_upper+inlet_lower[i]*param_lower;

if(param_chorus){
	for (i=0;i<BUFSIZE;i++){
		int32_t pos= i+delay_position;
		int32_t depth=lfo_phase>>(3-(param_vibrato>>25));
		delay_line[(pos)&0x1f]=scanner_in[i];
		int32_t delayed_sample=(depth&0x7f)*(delay_line[(pos+5+(depth>>7))&0x1f]>>7)+
					(0x7f-(depth&0x7f))*(delay_line[(pos+4+(depth>>7))&0x1f]>>7);
		outlet_out[i]=(scanner_in[i]>>1)+(delayed_sample>>1);
		lfo_phase += lfo_increment;
	}
}
else
{
	for (i=0;i<BUFSIZE;i++){
		int32_t pos=i+delay_position;
		int32_t depth=lfo_phase>>(3-(param_vibrato>>25));
		delay_line[(pos)&0x1f]=scanner_in[i];
		int32_t delayed_sample=(depth&0x7f)*(delay_line[(pos+5+(depth>>7))&0x1f]>>7)+
					(0x7f-(depth&0x7f))*(delay_line[(pos+4+(depth>>7))&0x1f]>>7);		
		outlet_out[i]=delayed_sample;
		lfo_phase += lfo_increment;
	}
}
delay_position = ((delay_position+BUFSIZE)&0x1f);
if (lfo_phase<=0)
		lfo_increment=1;
if (lfo_phase>=3456)
		lfo_increment=-1;
			
for (i=0;i<BUFSIZE;i++)
	outlet_out[i]+=inlet_upper[i]*(!param_upper)+inlet_lower[i]*(!param_lower);]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c9bd74fd-8a0b-4847-8949-7224b9f3b9f9" name="moving" x="546" y="0">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c9bd74fd-8a0b-4847-8949-7224b9f3b9f9">
         <sDescription>Dual serial moving average low pass filter with window sizes 5 and 3. Attenuation -3dB at 4 kHz and -6 dB at 5 kHz.</sDescription>
         <author>Jani Frilander</author>
         <license>BSD</license>
         <inlets>
            <frac32buffer.bipolar name="in"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t buf5[5];
int32_t buf3[3];
int32_t pos5;
int32_t pos3;
int32_t sum5;
int32_t sum3;]]></code.declaration>
         <code.init><![CDATA[int i;
for(i=0;i<5;i++)
	buf5[i]=0;
for(i=0;i<3;i++)
	buf3[i]=0;

pos5=0;
pos3=0;
sum5=0;
sum3=0;]]></code.init>
         <code.srate><![CDATA[sum5+=inlet_in;
pos5++;
if (pos5>4)
	pos5=0;
sum5-=buf5[pos5];
buf5[pos5]=inlet_in;

sum3+=sum5;
pos3++;
if (pos3>2)
	pos3=0;
sum3-=buf3[pos3];
buf3[pos3]=sum5;

outlet_out=sum3>>4;]]></code.srate>
      </object>
   </patchobj>
   <obj type="filter/lp" uuid="1427779cf086ab83c8b03eeeac69c2a97759c651" name="lp_1" x="784" y="0">
      <params>
         <frac32.s.map name="pitch" value="45.0"/>
         <frac32.u.map name="reso" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/gain" uuid="62b1c1a6337c7c8f6aec96408a432477b113cfa0" name="gain_1" x="896" y="0">
      <params>
         <frac32.u.map name="amp" value="6.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="dist/soft" uuid="e680d76a805e4866027cdf654c7efd8b2e54622" name="soft_1" x="1008" y="0">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="1078" y="0">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="gain_1" outlet="out"/>
         <dest obj="soft_1" inlet="in"/>
      </net>
      <net>
         <source obj="lp_1" outlet="out"/>
         <dest obj="gain_1" inlet="in"/>
      </net>
      <net>
         <source obj="soft_1" outlet="out"/>
         <dest obj="out_1" inlet="left"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="upper" outlet="o16"/>
         <dest obj="object_1" inlet="u16"/>
      </net>
      <net>
         <source obj="upper" outlet="o513"/>
         <dest obj="object_1" inlet="u513"/>
      </net>
      <net>
         <source obj="upper" outlet="o8"/>
         <dest obj="object_1" inlet="u8"/>
      </net>
      <net>
         <source obj="upper" outlet="o4"/>
         <dest obj="object_1" inlet="u4"/>
      </net>
      <net>
         <source obj="upper" outlet="o223"/>
         <dest obj="object_1" inlet="u223"/>
      </net>
      <net>
         <source obj="upper" outlet="o2"/>
         <dest obj="object_1" inlet="u2"/>
      </net>
      <net>
         <source obj="upper" outlet="o135"/>
         <dest obj="object_1" inlet="u135"/>
      </net>
      <net>
         <source obj="upper" outlet="o113"/>
         <dest obj="object_1" inlet="u113"/>
      </net>
      <net>
         <source obj="upper" outlet="o1"/>
         <dest obj="object_1" inlet="u1"/>
      </net>
      <net>
         <source obj="lower" outlet="o16"/>
         <dest obj="object_1" inlet="l16"/>
      </net>
      <net>
         <source obj="lower" outlet="o513"/>
         <dest obj="object_1" inlet="l513"/>
      </net>
      <net>
         <source obj="lower" outlet="o8"/>
         <dest obj="object_1" inlet="l8"/>
      </net>
      <net>
         <source obj="lower" outlet="o4"/>
         <dest obj="object_1" inlet="l4"/>
      </net>
      <net>
         <source obj="lower" outlet="o223"/>
         <dest obj="object_1" inlet="l223"/>
      </net>
      <net>
         <source obj="lower" outlet="o2"/>
         <dest obj="object_1" inlet="l2"/>
      </net>
      <net>
         <source obj="lower" outlet="o135"/>
         <dest obj="object_1" inlet="l135"/>
      </net>
      <net>
         <source obj="lower" outlet="o113"/>
         <dest obj="object_1" inlet="l113"/>
      </net>
      <net>
         <source obj="lower" outlet="o1"/>
         <dest obj="object_1" inlet="l1"/>
      </net>
      <net>
         <source obj="object_1" outlet="upper"/>
         <dest obj="object_2" inlet="upper"/>
      </net>
      <net>
         <source obj="object_1" outlet="lower"/>
         <dest obj="object_2" inlet="lower"/>
      </net>
      <net>
         <source obj="object_2" outlet="out"/>
         <dest obj="moving" inlet="in"/>
      </net>
      <net>
         <source obj="moving" outlet="out"/>
         <dest obj="lp_1" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>91</x>
      <y>54</y>
      <width>1215</width>
      <height>694</height>
   </windowPos>
</patch-1.0>