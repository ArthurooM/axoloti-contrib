<patch-1.0 appVersion="1.0.12">
   <obj type="table/alloc 16b sdram" uuid="6d8eb0fd68f404cb5d14e7d4c8c146c8ccf09da1" name="slicesbuf" x="14" y="14">
      <params/>
      <attribs>
         <combo attributeName="size" selection="524288"/>
         <text attributeName="init">
            <sText><![CDATA[for(int i = 0; i < LENGTH; i++){
	array[i] = 0;
}
]]></sText>
         </text>
      </attribs>
   </obj>
   <obj type="table/alloc 32b sdram" uuid="1a4546b7b52747ea765093ac97444601c44721e8" name="slicesind" x="140" y="14">
      <params/>
      <attribs>
         <combo attributeName="size" selection="8"/>
         <text attributeName="init">
            <sText><![CDATA[for(int i = 0; i < LENGTH; i++){
	array[i] = 0;
}
]]></sText>
         </text>
      </attribs>
   </obj>
   <obj type="audio/inconfig" uuid="9a80ef3c19f2a8f81da3a3b7c1c44d18126b97d9" name="inconfig_1" x="266" y="14">
      <params/>
      <attribs>
         <combo attributeName="gain" selection="12dB"/>
         <combo attributeName="boost" selection="0dB"/>
         <combo attributeName="mode" selection="Stereo"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="490" y="14" text="Set power_db_threshold and delta_power_db parameters to detect musical percussives sounds and not noise and unintentional clicks and pops."/>
   <comment type="patch/comment" x="490" y="28" text="These parameters are printed in Axoloti console when a detection occurs. Use inputs selector below."/>
   <comment type="patch/comment" x="490" y="56" text="Set timeconstant constant parameters (in &quot;conf&quot; text box) in order to record all modulating sound."/>
   <comment type="patch/comment" x="490" y="70" text="If timeconstant parameters is set with a wrong value, modulations can be interpreted as silence."/>
   <comment type="patch/comment" x="490" y="98" text="End of percussive sound is detected when the signal is below silence_db_threshold. In noisy environment set this threshold with an appropriate value."/>
   <patcher type="patch/patcher" uuid="11c1a355-5230-4d92-8eb2-bc86fb345857" name="Absolute attack thershold_" x="28" y="112">
      <params>
         <frac32.u.map name="click_pop_amp" value="9.5"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.12">
         <obj type="lfo/square" uuid="de6909eb64db13af5b43f979a4c130024b3a4793" name="square_3" x="14" y="28">
            <params>
               <frac32.s.map name="pitch" value="-11.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="rand/uniform f trig" uuid="223873125a332e3b8a82795a3eef167993adb086" name="uniform_2" x="112" y="28">
            <params/>
            <attribs/>
         </obj>
         <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_2" x="224" y="28">
            <params>
               <frac32.s.map name="value" value="14.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/&gt;" uuid="8112942c245dbc2edf7d7de122fe83b0dcd0a391" name="&gt;_2" x="294" y="28">
            <params/>
            <attribs/>
         </obj>
         <obj type="env/ad" uuid="255cb0cd67470c7498f9c33b820facd26aa629ce" name="ad_3" x="364" y="28">
            <params>
               <frac32.s.map name="a" value="-64.0"/>
               <frac32.s.map name="d" value="-43.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="noise/pink" uuid="72c03a2468ee865f248733fcf9b12d4cf42b5a61" name="pink_1" x="462" y="28">
            <params/>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_3" x="560" y="28">
            <params/>
            <attribs/>
         </obj>
         <obj type="mix/mix 2" uuid="30c04239c88e09d3fa5c333b784ecf54f1b0e268" name="mix_2" x="658" y="70">
            <params>
               <frac32.u.map name="gain1" value="32.0"/>
               <frac32.u.map name="gain2" value="32.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="click_pop_amp" x="770" y="70">
            <params>
               <frac32.u.map name="amp" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="outlet_1" x="882" y="70">
            <params/>
            <attribs/>
         </obj>
         <obj type="lfo/square" uuid="de6909eb64db13af5b43f979a4c130024b3a4793" name="square_2" x="14" y="140">
            <params>
               <frac32.s.map name="pitch" value="-11.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="rand/uniform f trig" uuid="223873125a332e3b8a82795a3eef167993adb086" name="uniform_1" x="112" y="140">
            <params/>
            <attribs/>
         </obj>
         <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_1" x="224" y="140">
            <params>
               <frac32.s.map name="value" value="17.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/&gt;" uuid="8112942c245dbc2edf7d7de122fe83b0dcd0a391" name="&gt;_1" x="294" y="140">
            <params/>
            <attribs/>
         </obj>
         <obj type="env/ad" uuid="255cb0cd67470c7498f9c33b820facd26aa629ce" name="ad_2" x="364" y="140">
            <params>
               <frac32.s.map name="a" value="-64.0"/>
               <frac32.s.map name="d" value="-35.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="osc/sine" uuid="6e094045cca76a9dbf7ebfa72e44e4700d2b3ba" name="sine_2" x="462" y="140">
            <params>
               <frac32.s.map name="pitch" value="-28.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="560" y="140">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="click_pop_amp" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="ad_2" outlet="env"/>
               <dest obj="vca_2" inlet="v"/>
            </net>
            <net>
               <source obj="sine_2" outlet="wave"/>
               <dest obj="vca_2" inlet="a"/>
            </net>
            <net>
               <source obj="vca_2" outlet="o"/>
               <dest obj="mix_2" inlet="in2"/>
            </net>
            <net>
               <source obj="square_2" outlet="wave"/>
               <dest obj="uniform_1" inlet="trig"/>
            </net>
            <net>
               <source obj="uniform_1" outlet="rand"/>
               <dest obj="&gt;_1" inlet="in1"/>
            </net>
            <net>
               <source obj="dial_1" outlet="out"/>
               <dest obj="&gt;_1" inlet="in2"/>
            </net>
            <net>
               <source obj="&gt;_1" outlet="out"/>
               <dest obj="ad_2" inlet="trig"/>
            </net>
            <net>
               <source obj="ad_3" outlet="env"/>
               <dest obj="vca_3" inlet="v"/>
            </net>
            <net>
               <source obj="square_3" outlet="wave"/>
               <dest obj="uniform_2" inlet="trig"/>
            </net>
            <net>
               <source obj="uniform_2" outlet="rand"/>
               <dest obj="&gt;_2" inlet="in1"/>
            </net>
            <net>
               <source obj="dial_2" outlet="out"/>
               <dest obj="&gt;_2" inlet="in2"/>
            </net>
            <net>
               <source obj="&gt;_2" outlet="out"/>
               <dest obj="ad_3" inlet="trig"/>
            </net>
            <net>
               <source obj="vca_3" outlet="o"/>
               <dest obj="mix_2" inlet="in1"/>
            </net>
            <net>
               <source obj="mix_2" outlet="out"/>
               <dest obj="click_pop_amp" inlet="in"/>
            </net>
            <net>
               <source obj="pink_1" outlet="out"/>
               <dest obj="vca_3" inlet="a"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>201</x>
            <y>272</y>
            <width>1056</width>
            <height>496</height>
         </windowPos>
      </subpatch>
   </patcher>
   <patcher type="patch/patcher" uuid="cb68f3a3-fca3-4b19-bda9-6f7cdbffafde" name="Modulated sound generator" x="28" y="252">
      <params>
         <bool32.mom name="trig modulated sound" value="0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.12">
         <obj type="env/ad" uuid="255cb0cd67470c7498f9c33b820facd26aa629ce" name="ad_1" x="182" y="0">
            <params>
               <frac32.s.map name="a" value="-64.0"/>
               <frac32.s.map name="d" value="-55.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="378" y="56">
            <params/>
            <attribs/>
         </obj>
         <obj type="noise/pink" uuid="72c03a2468ee865f248733fcf9b12d4cf42b5a61" name="pink_1" x="308" y="70">
            <params/>
            <attribs/>
         </obj>
         <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="trig modulated sound" x="42" y="112">
            <params>
               <bool32.mom name="b" onParent="true" value="0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_1" x="182" y="112">
            <params>
               <frac32.s.map name="a" value="-64.0"/>
               <frac32.s.map name="d" value="-39.0"/>
               <frac32.u.map name="s" value="40.0"/>
               <frac32.s.map name="r" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="osc/brds/vowel" uuid="5fe75952-b89b-416b-a502-d5c1e47a8827" name="vowel_1" x="280" y="112">
            <params>
               <frac32.s.map name="pitch" value="-13.0"/>
               <frac32.u.map name="timbre" value="20.0"/>
               <frac32.u.map name="color" value="38.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="378" y="112">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/gain" uuid="62b1c1a6337c7c8f6aec96408a432477b113cfa0" name="gain_1" x="434" y="112">
            <params>
               <frac32.u.map name="amp" value="8.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_1" x="560" y="112">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="outlet_1" x="630" y="112">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="vowel_1" outlet="wave"/>
               <dest obj="vca_1" inlet="a"/>
            </net>
            <net>
               <source obj="adsr_1" outlet="env"/>
               <dest obj="vca_1" inlet="v"/>
            </net>
            <net>
               <source obj="trig modulated sound" outlet="o"/>
               <dest obj="adsr_1" inlet="gate"/>
               <dest obj="ad_1" inlet="trig"/>
            </net>
            <net>
               <source obj="pink_1" outlet="out"/>
               <dest obj="vca_2" inlet="a"/>
            </net>
            <net>
               <source obj="ad_1" outlet="env"/>
               <dest obj="vca_2" inlet="v"/>
            </net>
            <net>
               <source obj="+_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="vca_2" outlet="o"/>
               <dest obj="+_1" inlet="in1"/>
            </net>
            <net>
               <source obj="vca_1" outlet="o"/>
               <dest obj="gain_1" inlet="in"/>
            </net>
            <net>
               <source obj="gain_1" outlet="out"/>
               <dest obj="+_1" inlet="in2"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>121</x>
            <y>368</y>
            <width>848</width>
            <height>400</height>
         </windowPos>
      </subpatch>
   </patcher>
   <obj type="ctrl/i radio 4 v" uuid="b610704137c90b0e43464440b84bfb4fb7d2bb30" name="inputs selector" x="280" y="252">
      <params>
         <int32.vradio name="value" value="3"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="364" y="294" text="&lt;-- unintentional clicks and pops : no detection expected."/>
   <comment type="patch/comment" x="364" y="308" text="&lt;-- musical percussive sound with modulation : detection expected while button is pressed (long time for the test)"/>
   <comment type="patch/comment" x="364" y="322" text="&lt;-- musical percussive sound with noise : detection expected only when button is pressed."/>
   <comment type="patch/comment" x="364" y="336" text="&lt;-- microphone (real usage of the beatslicer)"/>
   <patcher type="patch/patcher" uuid="13956e92-a0b2-4dd6-82bb-42c64a91ed5a" name="Noisy input" x="28" y="364">
      <params>
         <frac32.u.map name="noise amp" value="1.5"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.12">
         <obj type="noise/gaussian" uuid="a0f2cae6eafbfa58e1f1cb28e369824c54486f79" name="gaussian_1" x="70" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="filter/lp" uuid="1427779cf086ab83c8b03eeeac69c2a97759c651" name="lp_1" x="154" y="84">
            <params>
               <frac32.s.map name="pitch" value="58.0"/>
               <frac32.u.map name="reso" value="17.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/cos" uuid="a2ba1ca8d10b854e06728c088c43409866624fc1" name="cos_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="dist/hardclip" uuid="8f14ab3a-798a-473a-9c68-2f9e6a8054b5" name="hardclip_1" x="308" y="84">
            <params>
               <frac32.u.map name="level" value="20.5"/>
            </params>
            <attribs/>
         </obj>
         <obj type="filter/hp" uuid="7829b56456e975f1d89bda2ad1c7ad678080a73b" name="hp_1" x="392" y="84">
            <params>
               <frac32.s.map name="pitch" value="-17.0"/>
               <frac32.u.map name="reso" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="noise amp" x="490" y="84">
            <params>
               <frac32.u.map name="amp" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="outlet_1" x="616" y="84">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="gaussian_1" outlet="wave"/>
               <dest obj="lp_1" inlet="in"/>
            </net>
            <net>
               <source obj="lp_1" outlet="out"/>
               <dest obj="cos_1" inlet="phase"/>
            </net>
            <net>
               <source obj="cos_1" outlet="out"/>
               <dest obj="hardclip_1" inlet="in"/>
            </net>
            <net>
               <source obj="hp_1" outlet="out"/>
               <dest obj="noise amp" inlet="in"/>
            </net>
            <net>
               <source obj="hardclip_1" outlet="outlet_1"/>
               <dest obj="hp_1" inlet="in"/>
            </net>
            <net>
               <source obj="noise amp" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>121</x>
            <y>343</y>
            <width>848</width>
            <height>400</height>
         </windowPos>
      </subpatch>
   </patcher>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="RESET BUFFER" x="476" y="364">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="retrig" x="826" y="364">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="lfo/square" uuid="de6909eb64db13af5b43f979a4c130024b3a4793" name="cyclic trigger" x="896" y="364">
      <params>
         <frac32.s.map name="pitch" value="1.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i radio 8 h" uuid="81c4cf13a2d0e267b327a4663a711c2f96f7f9b7" name="i_3" x="994" y="364">
      <params>
         <int32.hradio name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix/mix 1 g" uuid="e6982841c1bf323ee2062a4b6cc2737adafbd668" name="mix_2" x="140" y="378">
      <params>
         <frac32.u.map name="gain1" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mux/mux 4" uuid="e511105cf5630d1a0b4a144dc3fabb3cc7c07bd" name="mux_1" x="280" y="378">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="83e2f688-3873-45de-b879-8ab79efe3999" name="beatslicer" x="476" y="420">
      <params>
         <int32 name="power_db_threshold" value="40"/>
         <int32 name="delta_power_db" value="15"/>
         <int32 name="silence_db_threshold" value="30"/>
      </params>
      <attribs>
         <objref attributeName="slicesbuffer" obj="slicesbuf"/>
         <objref attributeName="slicesindex" obj="slicesind"/>
         <text attributeName="conf">
            <sText><![CDATA[
timeconstant = 175.f;
]]></sText>
         </text>
      </attribs>
      <object id="patch/object" uuid="83e2f688-3873-45de-b879-8ab79efe3999">
         <sDescription>description</sDescription>
         <author>Jérôme Burlando</author>
         <license>BSD</license>
         <helpPatch>beatslicer.axh</helpPatch>
         <inlets>
            <frac32buffer name="in"/>
            <bool32.rising name="reset"/>
         </inlets>
         <outlets>
            <bool32 name="detection"/>
         </outlets>
         <displays>
            <bool32 name="detection"/>
            <int32.label name="n"/>
         </displays>
         <params>
            <int32 name="power_db_threshold">
               <MinValue i="0"/>
               <MaxValue i="100"/>
            </int32>
            <int32 name="delta_power_db">
               <MinValue i="0"/>
               <MaxValue i="100"/>
            </int32>
            <int32 name="silence_db_threshold">
               <MinValue i="0"/>
               <MaxValue i="100"/>
            </int32>
         </params>
         <attribs>
            <objref name="slicesbuffer"/>
            <objref name="slicesindex"/>
            <text name="conf"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint8_t FRAME_SIZE = 64;		// Frame size (energy is calculated on 1 frame, etc.)
static const uint8_t NB_CHUNK_FRAME = 4;	// 16 samples for k-rate call, then 4 calls for a 64 samples frame
static const uint8_t INITTIMER = 128;		// Nb frames while attack or silence detection are desactived
static const uint32_t HANINC = 33554432;	// Increment of the half hanning window use for fadein and fadeout : MAX_INT / 2 / FRAME_SIZE
static const uint32_t HANMID = 2147483648;	// Index of the middle of the hanning window
static const uint32_t LOG2_10 = 50504453;	// 10/8*ln(2)/ln(10) in fixed point Q27

uint8_t preset = 0;						// Used for rising edge logic on reset inlet
uint32_t si = 0;						// slice buffer current index
uint32_t sii = 1;						// slice index current index
float energy = 0.f;						// root mean square value of the current frame
float power_decibel = 0.f;				// root mean square value of the current frame in decibel (rms reference = 1)
float power_decibel_prev = 0.f;			// root mean square value of the current frame in decibel (rms reference = 1)
uint16_t timer = 0;						// A simple timer, for mask consecutive attack detection
uint8_t crosscheck = 0;					// true <==> zero crossing check activate
uint32_t zerocrosspoint = 0;				// zero crossing index in wave table
int32_t twoframe[2 * FRAME_SIZE];			// Buffer used for temporary continuous recording
uint8_t tfi = 0;						// Two frame buffer index
uint8_t curchunk = 0;					// Current chunk number
uint8_t detect = 0;						// Detection status : 1 => store slice in slicebuffer
float peakenvelope = 0.f;				// Current envelope value expressed in decibel
float delta = 0.f;						// For attackstep calibration output
float power_db_threshold = 0.f;			// [user] Decibel absolute threshold for attack test
float delta_power_db = 0.f;				// [user] Threshold for attack detection on difference of previous peakenvelope and current peakenvelope
float silence_db_threshold = 0.f;			// [user] Decibel threshold for silence test
float timeconstant = 0.f;				// [user] Attribute
float radius = 0.f;
uint8_t trig = 0;

/* Float <-> Fixed Point conversion */
__attribute__ ( ( always_inline ) ) __STATIC_INLINE float q_to_float(int32_t op1, int q) {
  float fop1 = *(float*)(&op1);
  __ASM volatile ("VCVT.F32.S32 %0, %0, %1" : "+w" (fop1) : "i" (q));
  return(fop1);
}

__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t float_to_q(float op1, int q) {
  __ASM volatile ("VCVT.S32.F32 %0, %0, %1" : "+w" (op1) : "i" (q));
  return(*(int32_t*)(&op1));
}

// For display a value each second : if(!calib_cpt) LogTextMessage("val : %d", val);

/*  Apply an half Hanning window on the begin of the recorded sample (2 frames)
 *  Hanning is full range (input in range 0..MAX_INT).
 *  Start on the begin of the hanning window and finish on the middle the hanning window. 
 */
void insert_twoframe(void) {
	int32_t s = 0;
	uint32_t phase = 0;
	int8_t tfitmp = tfi;
	int32_t r;
	int8_t i;
	
	for(i = 0; i < FRAME_SIZE; i++){
		HANNING2TINTERP(phase, r)
		/* "<< 5" to complete ___SMMUL operation (fixed point choice contraint)
		 * ">> 4" => just a copy of the hanning window axoloti object. Why not >> 5 ? I don't understand.
		 */
		s = ___SMMUL(twoframe[tfitmp], r >> 4) << 5;
		attr_slicesbuffer.array[si] = __SSAT(s,28)>>attr_slicesbuffer.GAIN;
		tfitmp++;
		si++;
		tfitmp %= FRAME_SIZE * 2;
		phase += HANINC;
	}
	for(i = 0; i < FRAME_SIZE; i++){
		s = twoframe[tfitmp];
		attr_slicesbuffer.array[si] = __SSAT(s,28)>>attr_slicesbuffer.GAIN;
		tfitmp++;
		si++;
		tfitmp %= FRAME_SIZE * 2;
	}
}

/*  Apply an half Hanning window on the end of the recorded sample (2 frames)
 *  Hanning is full range (input in range 0..MAX_INT).
 *  Start on the middle of the hanning window and finish on the end the hanning window. 
 */
void fadeout(uint32_t cuepoint) {
	/* MAX_INT / 2 => hanning window is full range (input in range 0..MAX_INT).
	 *  Start on the middle of the hanning window. */
	uint32_t phase = HANMID; 
	int32_t r;
	int32_t s;
     for(int i = cuepoint - (2 * FRAME_SIZE); i < cuepoint; i++){
     	HANNING2TINTERP(phase, r)
     	s = ___SMMUL(attr_slicesbuffer.array[i], r >> 4) << 5; // see "insert_twoframe"
     	attr_slicesbuffer.array[i] = __SSAT(s,28)>>attr_slicesbuffer.GAIN;
     	phase += (HANINC / 2); // HANINC is a FRAMESIZE increment. Fadeout apply a fadeout on 2 frames.
     }

     /* Store cuepoint */
     if(sii < attr_slicesindex.LENGTH){
     	attr_slicesindex.array[0] = sii;
     	attr_slicesindex.array[sii++] = cuepoint;
     }
}

void detection() {
	float peakenvelope_tmp = peakenvelope;
	power_decibel = log(energy*15625000+1)*4.34294482f;
	// 0.015625 = 1/64 for compute the mean of sum of squares (64 samples (FRAME_SIZE))
	// P0 = 0,000000001 is the power ref, then 10*log10(P/P0) <=> 10*log10(energy/64 * 1000000000)
	// log10(x) = ln(x)/ln(10), then 10*log10(x) = ln(x)*10/ln(10) = ln(x)*4,34294482
	delta = power_decibel - peakenvelope_tmp;
	
	if((power_decibel > power_db_threshold) && (delta > delta_power_db) && !(timer > 0)) {
		LogTextMessage("power_db / delta_power_db : %f / %f", power_decibel, delta);
		trig = 1;
		if(!(detect)) {
			insert_twoframe();
			detect = 1;
          } else {
          	fadeout(zerocrosspoint);
          }
          timer = INITTIMER; // To avoid closed detections 
	}
	peakenvelope_tmp = radius * peakenvelope_tmp;
	if(power_decibel > peakenvelope_tmp) peakenvelope_tmp = power_decibel;

	// Silence detection
	if(detect && !(timer > 0) && (peakenvelope_tmp < silence_db_threshold)) {
		detect = 0;
		fadeout(si);
	}
     peakenvelope = peakenvelope_tmp;
}]]></code.declaration>
         <code.init><![CDATA[attr_conf

radius = exp(((-1000.f / 48000.f) * ((float)(BUFSIZE*NB_CHUNK_FRAME))) / timeconstant);]]></code.init>
         <code.krate><![CDATA[power_db_threshold = (float)param_power__db__threshold;
delta_power_db = (float)param_delta__power__db;
silence_db_threshold = (float)param_silence__db__threshold;

/****************/
/* Record logic */
/****************/

float s = 0.f;
float prev_s = 0.f;
static uint32_t zerocrosspoint_tmp = 0;
trig = 0;

if(inlet_reset>0 && !preset) {
	preset = 1;
	si = 0;
	sii = 1;
	attr_slicesindex.array[0] = 0;
} else if(!(inlet_reset>0)) {
	preset = 0;
}

if(timer > 0) timer--;

for(int i = 0; i < BUFSIZE; i++){
	s = q_to_float(inlet_in[i],27);
	if(detect){
		if(crosscheck && (prev_s * s < 0)){
			zerocrosspoint_tmp = si;
			crosscheck = 0;
		}
		attr_slicesbuffer.array[si] = __SSAT(inlet_in[i],28)>>attr_slicesbuffer.GAIN;
		si++;
	} else {
		twoframe[tfi] = inlet_in[i];
		tfi++;
	}
	energy = s*s;
	prev_s = s;
}

tfi %= 2 * FRAME_SIZE;
if(curchunk == NB_CHUNK_FRAME - 1){
	crosscheck = 1;
	detection(); // Attack and decay to zero detection
	zerocrosspoint = zerocrosspoint_tmp;
	energy = 0;
}
curchunk++;
curchunk %= NB_CHUNK_FRAME;

/************************/
/* Displays and outputs */
/************************/
disp_detection = detect;
disp_n = sii;
outlet_detection = detect;]]></code.krate>
      </object>
   </patchobj>
   <obj type="gpio/out/digital" uuid="320eed040f6c55bb24c56416596ac2e67d0c82bc" name="detection_led" x="644" y="420">
      <params/>
      <attribs>
         <combo attributeName="pad" selection="PB6"/>
         <combo attributeName="mode" selection="Push pull"/>
      </attribs>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="reverse" x="826" y="420">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="e0631b14-a178-462d-9a53-af8b7b93cc7a" name="slice_player1" x="896" y="476">
      <params/>
      <attribs>
         <objref attributeName="slicesbuffer" obj="slicesbuf"/>
         <objref attributeName="slicesindex" obj="slicesind"/>
      </attribs>
      <object id="patch/object" uuid="e0631b14-a178-462d-9a53-af8b7b93cc7a">
         <sDescription>play audio from table (non-transposed), starting from position</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <bool32.rising name="start" description="start playback"/>
            <int32 name="nslice"/>
            <frac32.bipolar name="pitch"/>
            <bool32 name="reverse"/>
            <bool32 name="retrig"/>
         </inlets>
         <outlets>
            <frac32buffer name="o" description="wave"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="slicesbuffer"/>
            <objref name="slicesindex"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int pstart;
int play;
int64_t pos;
uint32_t beg;
uint32_t end;
int64_t f0;]]></code.declaration>
         <code.init><![CDATA[pstart = 0;
play = 0;
beg = 0;
end = 0;
pos = 0;
f0 = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_start>0) && !pstart && (inlet_retrig || !play)) {
   pstart = 1;
   play = 1;
   if(inlet_nslice < attr_slicesindex.array[0]) {
      if(inlet_nslice == 0) {
         beg = 0;
   	    end = attr_slicesindex.array[1];
      } else {
         beg = (uint64_t)attr_slicesindex.array[inlet_nslice];
         end = attr_slicesindex.array[inlet_nslice+1];
      }
      if(!inlet_reverse){
      	pos = ((uint64_t)beg)<<32;
      } else {
      	pos = ((uint64_t)end)<<32;
      }
   }
} else if (!(inlet_start>0)) {
   pstart = 0;
}

MTOFEXTENDED(inlet_pitch + 80179668,f0);]]></code.krate>
         <code.srate><![CDATA[outlet_o = 0;

if(play){
   uint64_t inc = ((uint64_t)f0)<<4;
   if(!inlet_reverse) { 
      uint32_t o = ___SMMUL(attr_slicesbuffer.array[pos>>32]<<attr_slicesbuffer.GAIN,INT32_MAX-(((uint32_t)pos)>>1));
      outlet_o = ___SMMLA(attr_slicesbuffer.array[(pos>>32)+1]<<attr_slicesbuffer.GAIN,(((uint32_t)pos)>>1),o);
      pos += inc;
      if(pos>>32 > end) play = 0; 
   } else if (inlet_reverse){ 
      uint32_t o = ___SMMUL(attr_slicesbuffer.array[pos>>32]<<attr_slicesbuffer.GAIN,INT32_MAX-(((uint32_t)pos)>>1));
      outlet_o = ___SMMLA(attr_slicesbuffer.array[(pos>>32)-1]<<attr_slicesbuffer.GAIN,(((uint32_t)pos)>>1),o);
      pos -= inc;
      if(pos>>32 < beg) play = 0; 
   } else {
      play = 0;
   }
}]]></code.srate>
      </object>
   </patchobj>
   <obj type="mix/mix 1 g" uuid="e6982841c1bf323ee2062a4b6cc2737adafbd668" name="mix_1" x="1078" y="476">
      <params>
         <frac32.u.map name="gain1" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="1176" y="476">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="28" y="490">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="RESET BUFFER" outlet="o"/>
         <dest obj="beatslicer" inlet="reset"/>
      </net>
      <net>
         <source obj="beatslicer" outlet="detection"/>
         <dest obj="detection_led" inlet="in"/>
      </net>
      <net>
         <source obj="cyclic trigger" outlet="wave"/>
         <dest obj="slice_player1" inlet="start"/>
      </net>
      <net>
         <source obj="mux_1" outlet="o"/>
         <dest obj="mix_1" inlet="bus_in"/>
         <dest obj="beatslicer" inlet="in"/>
      </net>
      <net>
         <source obj="inputs selector" outlet="out"/>
         <dest obj="mux_1" inlet="s"/>
      </net>
      <net>
         <source obj="Noisy input" outlet="outlet_1"/>
         <dest obj="mix_2" inlet="bus_in"/>
      </net>
      <net>
         <source obj="slice_player1" outlet="o"/>
         <dest obj="mix_1" inlet="in1"/>
      </net>
      <net>
         <source obj="mix_1" outlet="out"/>
         <dest obj="out_1" inlet="right"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="Absolute attack thershold_" outlet="outlet_1"/>
         <dest obj="mux_1" inlet="i0"/>
      </net>
      <net>
         <source obj="retrig" outlet="o"/>
         <dest obj="slice_player1" inlet="retrig"/>
      </net>
      <net>
         <source obj="i_3" outlet="out"/>
         <dest obj="slice_player1" inlet="nslice"/>
      </net>
      <net>
         <source obj="Modulated sound generator" outlet="outlet_1"/>
         <dest obj="mux_1" inlet="i1"/>
         <dest obj="mix_2" inlet="in1"/>
      </net>
      <net>
         <source obj="mix_2" outlet="out"/>
         <dest obj="mux_1" inlet="i2"/>
      </net>
      <net>
         <source obj="reverse" outlet="o"/>
         <dest obj="slice_player1" inlet="reverse"/>
      </net>
      <net>
         <source obj="in_1" outlet="wave"/>
         <dest obj="mux_1" inlet="i3"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>55</x>
      <y>24</y>
      <width>1311</width>
      <height>744</height>
   </windowPos>
</patch-1.0>